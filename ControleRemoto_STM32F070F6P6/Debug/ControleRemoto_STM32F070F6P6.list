
ControleRemoto_STM32F070F6P6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003550  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003610  08003610  00013610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003650  08003650  00020048  2**0
                  CONTENTS
  4 .ARM          00000000  08003650  08003650  00020048  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003650  08003650  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003650  08003650  00013650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003654  08003654  00013654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  08003658  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000048  080036a0  00020048  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  080036a0  00020160  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000749f  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001872  00000000  00000000  0002750f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000780  00000000  00000000  00028d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006b8  00000000  00000000  00029508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f492  00000000  00000000  00029bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000090c0  00000000  00000000  00039052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005ae8f  00000000  00000000  00042112  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0009cfa1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000197c  00000000  00000000  0009cff4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000048 	.word	0x20000048
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080035f8 	.word	0x080035f8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000004c 	.word	0x2000004c
 8000104:	080035f8 	.word	0x080035f8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <CS_Select>:

#define NRF24_CSN_PORT GPIOA
#define NRF24_CSN_PIN GPIO_PIN_9

void CS_Select (void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_RESET);
 8000224:	2380      	movs	r3, #128	; 0x80
 8000226:	0099      	lsls	r1, r3, #2
 8000228:	2390      	movs	r3, #144	; 0x90
 800022a:	05db      	lsls	r3, r3, #23
 800022c:	2200      	movs	r2, #0
 800022e:	0018      	movs	r0, r3
 8000230:	f001 fe18 	bl	8001e64 <HAL_GPIO_WritePin>
}
 8000234:	46c0      	nop			; (mov r8, r8)
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}

0800023a <CS_UnSelect>:

void CS_UnSelect (void)
{
 800023a:	b580      	push	{r7, lr}
 800023c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CSN_PORT, NRF24_CSN_PIN, GPIO_PIN_SET);
 800023e:	2380      	movs	r3, #128	; 0x80
 8000240:	0099      	lsls	r1, r3, #2
 8000242:	2390      	movs	r3, #144	; 0x90
 8000244:	05db      	lsls	r3, r3, #23
 8000246:	2201      	movs	r2, #1
 8000248:	0018      	movs	r0, r3
 800024a:	f001 fe0b 	bl	8001e64 <HAL_GPIO_WritePin>
}
 800024e:	46c0      	nop			; (mov r8, r8)
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}

08000254 <CE_Enable>:


void CE_Enable (void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_SET);
 8000258:	2380      	movs	r3, #128	; 0x80
 800025a:	00d9      	lsls	r1, r3, #3
 800025c:	2390      	movs	r3, #144	; 0x90
 800025e:	05db      	lsls	r3, r3, #23
 8000260:	2201      	movs	r2, #1
 8000262:	0018      	movs	r0, r3
 8000264:	f001 fdfe 	bl	8001e64 <HAL_GPIO_WritePin>
}
 8000268:	46c0      	nop			; (mov r8, r8)
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}

0800026e <CE_Disable>:

void CE_Disable (void)
{
 800026e:	b580      	push	{r7, lr}
 8000270:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NRF24_CE_PORT, NRF24_CE_PIN, GPIO_PIN_RESET);
 8000272:	2380      	movs	r3, #128	; 0x80
 8000274:	00d9      	lsls	r1, r3, #3
 8000276:	2390      	movs	r3, #144	; 0x90
 8000278:	05db      	lsls	r3, r3, #23
 800027a:	2200      	movs	r2, #0
 800027c:	0018      	movs	r0, r3
 800027e:	f001 fdf1 	bl	8001e64 <HAL_GPIO_WritePin>
}
 8000282:	46c0      	nop			; (mov r8, r8)
 8000284:	46bd      	mov	sp, r7
 8000286:	bd80      	pop	{r7, pc}

08000288 <nrf24_WriteReg>:



// write a single byte to the particular register
void nrf24_WriteReg (uint8_t Reg, uint8_t Data)
{
 8000288:	b590      	push	{r4, r7, lr}
 800028a:	b085      	sub	sp, #20
 800028c:	af00      	add	r7, sp, #0
 800028e:	0002      	movs	r2, r0
 8000290:	1dfb      	adds	r3, r7, #7
 8000292:	701a      	strb	r2, [r3, #0]
 8000294:	1dbb      	adds	r3, r7, #6
 8000296:	1c0a      	adds	r2, r1, #0
 8000298:	701a      	strb	r2, [r3, #0]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 800029a:	1dfb      	adds	r3, r7, #7
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	2220      	movs	r2, #32
 80002a0:	4313      	orrs	r3, r2
 80002a2:	b2da      	uxtb	r2, r3
 80002a4:	240c      	movs	r4, #12
 80002a6:	193b      	adds	r3, r7, r4
 80002a8:	701a      	strb	r2, [r3, #0]
	buf[1] = Data;
 80002aa:	193b      	adds	r3, r7, r4
 80002ac:	1dba      	adds	r2, r7, #6
 80002ae:	7812      	ldrb	r2, [r2, #0]
 80002b0:	705a      	strb	r2, [r3, #1]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80002b2:	f7ff ffb5 	bl	8000220 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 2, 1000);
 80002b6:	23fa      	movs	r3, #250	; 0xfa
 80002b8:	009b      	lsls	r3, r3, #2
 80002ba:	1939      	adds	r1, r7, r4
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <nrf24_WriteReg+0x48>)
 80002be:	2202      	movs	r2, #2
 80002c0:	f002 fb06 	bl	80028d0 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 80002c4:	f7ff ffb9 	bl	800023a <CS_UnSelect>
}
 80002c8:	46c0      	nop			; (mov r8, r8)
 80002ca:	46bd      	mov	sp, r7
 80002cc:	b005      	add	sp, #20
 80002ce:	bd90      	pop	{r4, r7, pc}
 80002d0:	200000e8 	.word	0x200000e8

080002d4 <nrf24_WriteRegMulti>:

//write multiple bytes starting from a particular register
void nrf24_WriteRegMulti (uint8_t Reg, uint8_t *data, int size)
{
 80002d4:	b590      	push	{r4, r7, lr}
 80002d6:	b087      	sub	sp, #28
 80002d8:	af00      	add	r7, sp, #0
 80002da:	60b9      	str	r1, [r7, #8]
 80002dc:	607a      	str	r2, [r7, #4]
 80002de:	210f      	movs	r1, #15
 80002e0:	187b      	adds	r3, r7, r1
 80002e2:	1c02      	adds	r2, r0, #0
 80002e4:	701a      	strb	r2, [r3, #0]
	uint8_t buf[2];
	buf[0] = Reg|1<<5;
 80002e6:	187b      	adds	r3, r7, r1
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	2220      	movs	r2, #32
 80002ec:	4313      	orrs	r3, r2
 80002ee:	b2da      	uxtb	r2, r3
 80002f0:	2414      	movs	r4, #20
 80002f2:	193b      	adds	r3, r7, r4
 80002f4:	701a      	strb	r2, [r3, #0]
//	buf[1] = Data;

	// Pull the CS Pin LOW to select the device
	CS_Select();
 80002f6:	f7ff ff93 	bl	8000220 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, buf, 1, 100);
 80002fa:	1939      	adds	r1, r7, r4
 80002fc:	4809      	ldr	r0, [pc, #36]	; (8000324 <nrf24_WriteRegMulti+0x50>)
 80002fe:	2364      	movs	r3, #100	; 0x64
 8000300:	2201      	movs	r2, #1
 8000302:	f002 fae5 	bl	80028d0 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(NRF24_SPI, data, size, 1000);
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	b29a      	uxth	r2, r3
 800030a:	23fa      	movs	r3, #250	; 0xfa
 800030c:	009b      	lsls	r3, r3, #2
 800030e:	68b9      	ldr	r1, [r7, #8]
 8000310:	4804      	ldr	r0, [pc, #16]	; (8000324 <nrf24_WriteRegMulti+0x50>)
 8000312:	f002 fadd 	bl	80028d0 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000316:	f7ff ff90 	bl	800023a <CS_UnSelect>
}
 800031a:	46c0      	nop			; (mov r8, r8)
 800031c:	46bd      	mov	sp, r7
 800031e:	b007      	add	sp, #28
 8000320:	bd90      	pop	{r4, r7, pc}
 8000322:	46c0      	nop			; (mov r8, r8)
 8000324:	200000e8 	.word	0x200000e8

08000328 <nrf24_ReadReg>:


uint8_t nrf24_ReadReg (uint8_t Reg)
{
 8000328:	b590      	push	{r4, r7, lr}
 800032a:	b085      	sub	sp, #20
 800032c:	af00      	add	r7, sp, #0
 800032e:	0002      	movs	r2, r0
 8000330:	1dfb      	adds	r3, r7, #7
 8000332:	701a      	strb	r2, [r3, #0]
	uint8_t data=0;
 8000334:	240f      	movs	r4, #15
 8000336:	193b      	adds	r3, r7, r4
 8000338:	2200      	movs	r2, #0
 800033a:	701a      	strb	r2, [r3, #0]

	// Pull the CS Pin LOW to select the device
	CS_Select();
 800033c:	f7ff ff70 	bl	8000220 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &Reg, 1, 100);
 8000340:	1df9      	adds	r1, r7, #7
 8000342:	4809      	ldr	r0, [pc, #36]	; (8000368 <nrf24_ReadReg+0x40>)
 8000344:	2364      	movs	r3, #100	; 0x64
 8000346:	2201      	movs	r2, #1
 8000348:	f002 fac2 	bl	80028d0 <HAL_SPI_Transmit>
	HAL_SPI_Receive(NRF24_SPI, &data, 1, 100);
 800034c:	1939      	adds	r1, r7, r4
 800034e:	4806      	ldr	r0, [pc, #24]	; (8000368 <nrf24_ReadReg+0x40>)
 8000350:	2364      	movs	r3, #100	; 0x64
 8000352:	2201      	movs	r2, #1
 8000354:	f002 fc1c 	bl	8002b90 <HAL_SPI_Receive>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000358:	f7ff ff6f 	bl	800023a <CS_UnSelect>

	return data;
 800035c:	193b      	adds	r3, r7, r4
 800035e:	781b      	ldrb	r3, [r3, #0]
}
 8000360:	0018      	movs	r0, r3
 8000362:	46bd      	mov	sp, r7
 8000364:	b005      	add	sp, #20
 8000366:	bd90      	pop	{r4, r7, pc}
 8000368:	200000e8 	.word	0x200000e8

0800036c <nrfsendCmd>:
}


// send the command to the NRF
void nrfsendCmd (uint8_t cmd)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0
 8000372:	0002      	movs	r2, r0
 8000374:	1dfb      	adds	r3, r7, #7
 8000376:	701a      	strb	r2, [r3, #0]
	// Pull the CS Pin LOW to select the device
	CS_Select();
 8000378:	f7ff ff52 	bl	8000220 <CS_Select>

	HAL_SPI_Transmit(NRF24_SPI, &cmd, 1, 100);
 800037c:	1df9      	adds	r1, r7, #7
 800037e:	4805      	ldr	r0, [pc, #20]	; (8000394 <nrfsendCmd+0x28>)
 8000380:	2364      	movs	r3, #100	; 0x64
 8000382:	2201      	movs	r2, #1
 8000384:	f002 faa4 	bl	80028d0 <HAL_SPI_Transmit>

	// Pull the CS HIGH to release the device
	CS_UnSelect();
 8000388:	f7ff ff57 	bl	800023a <CS_UnSelect>
}
 800038c:	46c0      	nop			; (mov r8, r8)
 800038e:	46bd      	mov	sp, r7
 8000390:	b002      	add	sp, #8
 8000392:	bd80      	pop	{r7, pc}
 8000394:	200000e8 	.word	0x200000e8

08000398 <nrf24_reset>:

void nrf24_reset(uint8_t REG)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b088      	sub	sp, #32
 800039c:	af00      	add	r7, sp, #0
 800039e:	0002      	movs	r2, r0
 80003a0:	1dfb      	adds	r3, r7, #7
 80003a2:	701a      	strb	r2, [r3, #0]
	if (REG == STATUS)
 80003a4:	1dfb      	adds	r3, r7, #7
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	2b07      	cmp	r3, #7
 80003aa:	d104      	bne.n	80003b6 <nrf24_reset+0x1e>
	{
		nrf24_WriteReg(STATUS, 0x00);
 80003ac:	2100      	movs	r1, #0
 80003ae:	2007      	movs	r0, #7
 80003b0:	f7ff ff6a 	bl	8000288 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
	nrf24_WriteReg(FIFO_STATUS, 0x11);
	nrf24_WriteReg(DYNPD, 0);
	nrf24_WriteReg(FEATURE, 0);
	}
}
 80003b4:	e08b      	b.n	80004ce <nrf24_reset+0x136>
	else if (REG == FIFO_STATUS)
 80003b6:	1dfb      	adds	r3, r7, #7
 80003b8:	781b      	ldrb	r3, [r3, #0]
 80003ba:	2b17      	cmp	r3, #23
 80003bc:	d104      	bne.n	80003c8 <nrf24_reset+0x30>
		nrf24_WriteReg(FIFO_STATUS, 0x11);
 80003be:	2111      	movs	r1, #17
 80003c0:	2017      	movs	r0, #23
 80003c2:	f7ff ff61 	bl	8000288 <nrf24_WriteReg>
}
 80003c6:	e082      	b.n	80004ce <nrf24_reset+0x136>
	nrf24_WriteReg(CONFIG, 0x08);
 80003c8:	2108      	movs	r1, #8
 80003ca:	2000      	movs	r0, #0
 80003cc:	f7ff ff5c 	bl	8000288 <nrf24_WriteReg>
	nrf24_WriteReg(EN_AA, 0x3F);
 80003d0:	213f      	movs	r1, #63	; 0x3f
 80003d2:	2001      	movs	r0, #1
 80003d4:	f7ff ff58 	bl	8000288 <nrf24_WriteReg>
	nrf24_WriteReg(EN_RXADDR, 0x03);
 80003d8:	2103      	movs	r1, #3
 80003da:	2002      	movs	r0, #2
 80003dc:	f7ff ff54 	bl	8000288 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_AW, 0x03);
 80003e0:	2103      	movs	r1, #3
 80003e2:	2003      	movs	r0, #3
 80003e4:	f7ff ff50 	bl	8000288 <nrf24_WriteReg>
	nrf24_WriteReg(SETUP_RETR, 0x03);
 80003e8:	2103      	movs	r1, #3
 80003ea:	2004      	movs	r0, #4
 80003ec:	f7ff ff4c 	bl	8000288 <nrf24_WriteReg>
	nrf24_WriteReg(RF_CH, 0x02);
 80003f0:	2102      	movs	r1, #2
 80003f2:	2005      	movs	r0, #5
 80003f4:	f7ff ff48 	bl	8000288 <nrf24_WriteReg>
	nrf24_WriteReg(RF_SETUP, 0x0E);
 80003f8:	210e      	movs	r1, #14
 80003fa:	2006      	movs	r0, #6
 80003fc:	f7ff ff44 	bl	8000288 <nrf24_WriteReg>
	nrf24_WriteReg(STATUS, 0x00);
 8000400:	2100      	movs	r1, #0
 8000402:	2007      	movs	r0, #7
 8000404:	f7ff ff40 	bl	8000288 <nrf24_WriteReg>
	nrf24_WriteReg(OBSERVE_TX, 0x00);
 8000408:	2100      	movs	r1, #0
 800040a:	2008      	movs	r0, #8
 800040c:	f7ff ff3c 	bl	8000288 <nrf24_WriteReg>
	nrf24_WriteReg(CD, 0x00);
 8000410:	2100      	movs	r1, #0
 8000412:	2009      	movs	r0, #9
 8000414:	f7ff ff38 	bl	8000288 <nrf24_WriteReg>
	uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8000418:	2018      	movs	r0, #24
 800041a:	183b      	adds	r3, r7, r0
 800041c:	4a2e      	ldr	r2, [pc, #184]	; (80004d8 <nrf24_reset+0x140>)
 800041e:	6811      	ldr	r1, [r2, #0]
 8000420:	6019      	str	r1, [r3, #0]
 8000422:	7912      	ldrb	r2, [r2, #4]
 8000424:	711a      	strb	r2, [r3, #4]
	nrf24_WriteRegMulti(RX_ADDR_P0, rx_addr_p0_def, 5);
 8000426:	183b      	adds	r3, r7, r0
 8000428:	2205      	movs	r2, #5
 800042a:	0019      	movs	r1, r3
 800042c:	200a      	movs	r0, #10
 800042e:	f7ff ff51 	bl	80002d4 <nrf24_WriteRegMulti>
	uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 8000432:	2010      	movs	r0, #16
 8000434:	183b      	adds	r3, r7, r0
 8000436:	4a29      	ldr	r2, [pc, #164]	; (80004dc <nrf24_reset+0x144>)
 8000438:	6811      	ldr	r1, [r2, #0]
 800043a:	6019      	str	r1, [r3, #0]
 800043c:	7912      	ldrb	r2, [r2, #4]
 800043e:	711a      	strb	r2, [r3, #4]
	nrf24_WriteRegMulti(RX_ADDR_P1, rx_addr_p1_def, 5);
 8000440:	183b      	adds	r3, r7, r0
 8000442:	2205      	movs	r2, #5
 8000444:	0019      	movs	r1, r3
 8000446:	200b      	movs	r0, #11
 8000448:	f7ff ff44 	bl	80002d4 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_ADDR_P2, 0xC3);
 800044c:	21c3      	movs	r1, #195	; 0xc3
 800044e:	200c      	movs	r0, #12
 8000450:	f7ff ff1a 	bl	8000288 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P3, 0xC4);
 8000454:	21c4      	movs	r1, #196	; 0xc4
 8000456:	200d      	movs	r0, #13
 8000458:	f7ff ff16 	bl	8000288 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P4, 0xC5);
 800045c:	21c5      	movs	r1, #197	; 0xc5
 800045e:	200e      	movs	r0, #14
 8000460:	f7ff ff12 	bl	8000288 <nrf24_WriteReg>
	nrf24_WriteReg(RX_ADDR_P5, 0xC6);
 8000464:	21c6      	movs	r1, #198	; 0xc6
 8000466:	200f      	movs	r0, #15
 8000468:	f7ff ff0e 	bl	8000288 <nrf24_WriteReg>
	uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 800046c:	2008      	movs	r0, #8
 800046e:	183b      	adds	r3, r7, r0
 8000470:	4a19      	ldr	r2, [pc, #100]	; (80004d8 <nrf24_reset+0x140>)
 8000472:	6811      	ldr	r1, [r2, #0]
 8000474:	6019      	str	r1, [r3, #0]
 8000476:	7912      	ldrb	r2, [r2, #4]
 8000478:	711a      	strb	r2, [r3, #4]
	nrf24_WriteRegMulti(TX_ADDR, tx_addr_def, 5);
 800047a:	183b      	adds	r3, r7, r0
 800047c:	2205      	movs	r2, #5
 800047e:	0019      	movs	r1, r3
 8000480:	2010      	movs	r0, #16
 8000482:	f7ff ff27 	bl	80002d4 <nrf24_WriteRegMulti>
	nrf24_WriteReg(RX_PW_P0, 0);
 8000486:	2100      	movs	r1, #0
 8000488:	2011      	movs	r0, #17
 800048a:	f7ff fefd 	bl	8000288 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P1, 0);
 800048e:	2100      	movs	r1, #0
 8000490:	2012      	movs	r0, #18
 8000492:	f7ff fef9 	bl	8000288 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P2, 0);
 8000496:	2100      	movs	r1, #0
 8000498:	2013      	movs	r0, #19
 800049a:	f7ff fef5 	bl	8000288 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P3, 0);
 800049e:	2100      	movs	r1, #0
 80004a0:	2014      	movs	r0, #20
 80004a2:	f7ff fef1 	bl	8000288 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P4, 0);
 80004a6:	2100      	movs	r1, #0
 80004a8:	2015      	movs	r0, #21
 80004aa:	f7ff feed 	bl	8000288 <nrf24_WriteReg>
	nrf24_WriteReg(RX_PW_P5, 0);
 80004ae:	2100      	movs	r1, #0
 80004b0:	2016      	movs	r0, #22
 80004b2:	f7ff fee9 	bl	8000288 <nrf24_WriteReg>
	nrf24_WriteReg(FIFO_STATUS, 0x11);
 80004b6:	2111      	movs	r1, #17
 80004b8:	2017      	movs	r0, #23
 80004ba:	f7ff fee5 	bl	8000288 <nrf24_WriteReg>
	nrf24_WriteReg(DYNPD, 0);
 80004be:	2100      	movs	r1, #0
 80004c0:	201c      	movs	r0, #28
 80004c2:	f7ff fee1 	bl	8000288 <nrf24_WriteReg>
	nrf24_WriteReg(FEATURE, 0);
 80004c6:	2100      	movs	r1, #0
 80004c8:	201d      	movs	r0, #29
 80004ca:	f7ff fedd 	bl	8000288 <nrf24_WriteReg>
}
 80004ce:	46c0      	nop			; (mov r8, r8)
 80004d0:	46bd      	mov	sp, r7
 80004d2:	b008      	add	sp, #32
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	08003610 	.word	0x08003610
 80004dc:	08003618 	.word	0x08003618

080004e0 <NRF24_Init>:




void NRF24_Init (void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
	// disable the chip before configuring the device
	CE_Disable();
 80004e4:	f7ff fec3 	bl	800026e <CE_Disable>


	// reset everything
	nrf24_reset (0);
 80004e8:	2000      	movs	r0, #0
 80004ea:	f7ff ff55 	bl	8000398 <nrf24_reset>

	nrf24_WriteReg(CONFIG, 0);  // will be configured later
 80004ee:	2100      	movs	r1, #0
 80004f0:	2000      	movs	r0, #0
 80004f2:	f7ff fec9 	bl	8000288 <nrf24_WriteReg>

	nrf24_WriteReg(EN_AA, 0);  // No Auto ACK
 80004f6:	2100      	movs	r1, #0
 80004f8:	2001      	movs	r0, #1
 80004fa:	f7ff fec5 	bl	8000288 <nrf24_WriteReg>

	nrf24_WriteReg (EN_RXADDR, 0);  // Not Enabling any data pipe right now
 80004fe:	2100      	movs	r1, #0
 8000500:	2002      	movs	r0, #2
 8000502:	f7ff fec1 	bl	8000288 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_AW, 0x03);  // 5 Bytes for the TX/RX address
 8000506:	2103      	movs	r1, #3
 8000508:	2003      	movs	r0, #3
 800050a:	f7ff febd 	bl	8000288 <nrf24_WriteReg>

	nrf24_WriteReg (SETUP_RETR, 0);   // No retransmission
 800050e:	2100      	movs	r1, #0
 8000510:	2004      	movs	r0, #4
 8000512:	f7ff feb9 	bl	8000288 <nrf24_WriteReg>

	nrf24_WriteReg (RF_CH, 0);  // will be setup during Tx or RX
 8000516:	2100      	movs	r1, #0
 8000518:	2005      	movs	r0, #5
 800051a:	f7ff feb5 	bl	8000288 <nrf24_WriteReg>

	nrf24_WriteReg (RF_SETUP, 0x0E);   // Power= 0db, data rate = 2Mbps
 800051e:	210e      	movs	r1, #14
 8000520:	2006      	movs	r0, #6
 8000522:	f7ff feb1 	bl	8000288 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 8000526:	f7ff fe95 	bl	8000254 <CE_Enable>

}
 800052a:	46c0      	nop			; (mov r8, r8)
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}

08000530 <NRF24_TxMode>:


// set up the Tx mode

void NRF24_TxMode (uint8_t *Address, uint8_t channel)
{
 8000530:	b5b0      	push	{r4, r5, r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	000a      	movs	r2, r1
 800053a:	1cfb      	adds	r3, r7, #3
 800053c:	701a      	strb	r2, [r3, #0]
	// disable the chip before configuring the device
	CE_Disable();
 800053e:	f7ff fe96 	bl	800026e <CE_Disable>

	nrf24_WriteReg (RF_CH, channel);  // select the channel
 8000542:	1cfb      	adds	r3, r7, #3
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	0019      	movs	r1, r3
 8000548:	2005      	movs	r0, #5
 800054a:	f7ff fe9d 	bl	8000288 <nrf24_WriteReg>

	nrf24_WriteRegMulti(TX_ADDR, Address, 5);  // Write the TX address
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	2205      	movs	r2, #5
 8000552:	0019      	movs	r1, r3
 8000554:	2010      	movs	r0, #16
 8000556:	f7ff febd 	bl	80002d4 <nrf24_WriteRegMulti>


	// power up the device
	uint8_t config = nrf24_ReadReg(CONFIG);
 800055a:	250f      	movs	r5, #15
 800055c:	197c      	adds	r4, r7, r5
 800055e:	2000      	movs	r0, #0
 8000560:	f7ff fee2 	bl	8000328 <nrf24_ReadReg>
 8000564:	0003      	movs	r3, r0
 8000566:	7023      	strb	r3, [r4, #0]
	config = config | (1<<1);   // write 1 in the PWR_UP bit
 8000568:	0028      	movs	r0, r5
 800056a:	183b      	adds	r3, r7, r0
 800056c:	183a      	adds	r2, r7, r0
 800056e:	7812      	ldrb	r2, [r2, #0]
 8000570:	2102      	movs	r1, #2
 8000572:	430a      	orrs	r2, r1
 8000574:	701a      	strb	r2, [r3, #0]
	config = config & (0xF2);    // write 0 in the PRIM_RX, and 1 in the PWR_UP, and all other bits are masked
 8000576:	183b      	adds	r3, r7, r0
 8000578:	183a      	adds	r2, r7, r0
 800057a:	7812      	ldrb	r2, [r2, #0]
 800057c:	210d      	movs	r1, #13
 800057e:	438a      	bics	r2, r1
 8000580:	701a      	strb	r2, [r3, #0]
	nrf24_WriteReg (CONFIG, config);
 8000582:	183b      	adds	r3, r7, r0
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	0019      	movs	r1, r3
 8000588:	2000      	movs	r0, #0
 800058a:	f7ff fe7d 	bl	8000288 <nrf24_WriteReg>

	// Enable the chip after configuring the device
	CE_Enable();
 800058e:	f7ff fe61 	bl	8000254 <CE_Enable>
}
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	46bd      	mov	sp, r7
 8000596:	b004      	add	sp, #16
 8000598:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800059c <NRF24_Transmit>:


// transmit the data

uint8_t NRF24_Transmit (uint8_t *data)
{
 800059c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]

	uint8_t cmdtosend = 0;
 80005a4:	250e      	movs	r5, #14
 80005a6:	197b      	adds	r3, r7, r5
 80005a8:	2200      	movs	r2, #0
 80005aa:	701a      	strb	r2, [r3, #0]

	// select the device
	CS_Select();
 80005ac:	f7ff fe38 	bl	8000220 <CS_Select>

	// payload command
	cmdtosend = W_TX_PAYLOAD;
 80005b0:	197b      	adds	r3, r7, r5
 80005b2:	22a0      	movs	r2, #160	; 0xa0
 80005b4:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(NRF24_SPI, &cmdtosend, 1, 100);
 80005b6:	1979      	adds	r1, r7, r5
 80005b8:	481a      	ldr	r0, [pc, #104]	; (8000624 <NRF24_Transmit+0x88>)
 80005ba:	2364      	movs	r3, #100	; 0x64
 80005bc:	2201      	movs	r2, #1
 80005be:	f002 f987 	bl	80028d0 <HAL_SPI_Transmit>

	// send the payload
	HAL_SPI_Transmit(NRF24_SPI, data, 32, 1000);
 80005c2:	23fa      	movs	r3, #250	; 0xfa
 80005c4:	009b      	lsls	r3, r3, #2
 80005c6:	6879      	ldr	r1, [r7, #4]
 80005c8:	4816      	ldr	r0, [pc, #88]	; (8000624 <NRF24_Transmit+0x88>)
 80005ca:	2220      	movs	r2, #32
 80005cc:	f002 f980 	bl	80028d0 <HAL_SPI_Transmit>

	// Unselect the device
	CS_UnSelect();
 80005d0:	f7ff fe33 	bl	800023a <CS_UnSelect>

	HAL_Delay(1);
 80005d4:	2001      	movs	r0, #1
 80005d6:	f000 fc63 	bl	8000ea0 <HAL_Delay>
	uint8_t fifostatus = nrf24_ReadReg(FIFO_STATUS);
 80005da:	260f      	movs	r6, #15
 80005dc:	19bc      	adds	r4, r7, r6
 80005de:	2017      	movs	r0, #23
 80005e0:	f7ff fea2 	bl	8000328 <nrf24_ReadReg>
 80005e4:	0003      	movs	r3, r0
 80005e6:	7023      	strb	r3, [r4, #0]

	// check the fourth bit of FIFO_STATUS to know if the TX fifo is empty
	if ((fifostatus&(1<<4)) && (!(fifostatus&(1<<3))))
 80005e8:	0031      	movs	r1, r6
 80005ea:	187b      	adds	r3, r7, r1
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	2210      	movs	r2, #16
 80005f0:	4013      	ands	r3, r2
 80005f2:	d011      	beq.n	8000618 <NRF24_Transmit+0x7c>
 80005f4:	187b      	adds	r3, r7, r1
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	2208      	movs	r2, #8
 80005fa:	4013      	ands	r3, r2
 80005fc:	d10c      	bne.n	8000618 <NRF24_Transmit+0x7c>
	{
		cmdtosend = FLUSH_TX;
 80005fe:	197b      	adds	r3, r7, r5
 8000600:	22e1      	movs	r2, #225	; 0xe1
 8000602:	701a      	strb	r2, [r3, #0]
		nrfsendCmd(cmdtosend);
 8000604:	197b      	adds	r3, r7, r5
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	0018      	movs	r0, r3
 800060a:	f7ff feaf 	bl	800036c <nrfsendCmd>

		// reset FIFO_STATUS
		nrf24_reset (FIFO_STATUS);
 800060e:	2017      	movs	r0, #23
 8000610:	f7ff fec2 	bl	8000398 <nrf24_reset>

		return 1;
 8000614:	2301      	movs	r3, #1
 8000616:	e000      	b.n	800061a <NRF24_Transmit+0x7e>
	}
	return 0;
 8000618:	2300      	movs	r3, #0
}
 800061a:	0018      	movs	r0, r3
 800061c:	46bd      	mov	sp, r7
 800061e:	b005      	add	sp, #20
 8000620:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000622:	46c0      	nop			; (mov r8, r8)
 8000624:	200000e8 	.word	0x200000e8

08000628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062c:	f000 fbd4 	bl	8000dd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000630:	f000 f8d0 	bl	80007d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000634:	f000 f9fa 	bl	8000a2c <MX_GPIO_Init>
  MX_DMA_Init();
 8000638:	f000 f9da 	bl	80009f0 <MX_DMA_Init>
  MX_ADC_Init();
 800063c:	f000 f918 	bl	8000870 <MX_ADC_Init>
  MX_SPI1_Init();
 8000640:	f000 f998 	bl	8000974 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  NRF24_Init();
 8000644:	f7ff ff4c 	bl	80004e0 <NRF24_Init>

  NRF24_TxMode(TxAddress, 10);
 8000648:	4b57      	ldr	r3, [pc, #348]	; (80007a8 <main+0x180>)
 800064a:	210a      	movs	r1, #10
 800064c:	0018      	movs	r0, r3
 800064e:	f7ff ff6f 	bl	8000530 <NRF24_TxMode>
  HAL_ADC_Start_DMA(&hadc, h, 4);
 8000652:	4956      	ldr	r1, [pc, #344]	; (80007ac <main+0x184>)
 8000654:	4b56      	ldr	r3, [pc, #344]	; (80007b0 <main+0x188>)
 8000656:	2204      	movs	r2, #4
 8000658:	0018      	movs	r0, r3
 800065a:	f000 fd85 	bl	8001168 <HAL_ADC_Start_DMA>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(h[2] >= 3000){
 800065e:	4b53      	ldr	r3, [pc, #332]	; (80007ac <main+0x184>)
 8000660:	689b      	ldr	r3, [r3, #8]
 8000662:	4a54      	ldr	r2, [pc, #336]	; (80007b4 <main+0x18c>)
 8000664:	4293      	cmp	r3, r2
 8000666:	d910      	bls.n	800068a <main+0x62>
		  	  if(NRF24_Transmit(frente) == 1){
 8000668:	4b53      	ldr	r3, [pc, #332]	; (80007b8 <main+0x190>)
 800066a:	0018      	movs	r0, r3
 800066c:	f7ff ff96 	bl	800059c <NRF24_Transmit>
 8000670:	0003      	movs	r3, r0
 8000672:	2b01      	cmp	r3, #1
 8000674:	d109      	bne.n	800068a <main+0x62>
		  			  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_1);
 8000676:	4b51      	ldr	r3, [pc, #324]	; (80007bc <main+0x194>)
 8000678:	2102      	movs	r1, #2
 800067a:	0018      	movs	r0, r3
 800067c:	f001 fc0f 	bl	8001e9e <HAL_GPIO_TogglePin>
		  			  HAL_Delay(1000);
 8000680:	23fa      	movs	r3, #250	; 0xfa
 8000682:	009b      	lsls	r3, r3, #2
 8000684:	0018      	movs	r0, r3
 8000686:	f000 fc0b 	bl	8000ea0 <HAL_Delay>
		  }
	  }
	  if(h[2] <= 1000){
 800068a:	4b48      	ldr	r3, [pc, #288]	; (80007ac <main+0x184>)
 800068c:	689a      	ldr	r2, [r3, #8]
 800068e:	23fa      	movs	r3, #250	; 0xfa
 8000690:	009b      	lsls	r3, r3, #2
 8000692:	429a      	cmp	r2, r3
 8000694:	d810      	bhi.n	80006b8 <main+0x90>
	  		  if(NRF24_Transmit(tras) == 1){
 8000696:	4b4a      	ldr	r3, [pc, #296]	; (80007c0 <main+0x198>)
 8000698:	0018      	movs	r0, r3
 800069a:	f7ff ff7f 	bl	800059c <NRF24_Transmit>
 800069e:	0003      	movs	r3, r0
 80006a0:	2b01      	cmp	r3, #1
 80006a2:	d109      	bne.n	80006b8 <main+0x90>
	  		  			  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_1);
 80006a4:	4b45      	ldr	r3, [pc, #276]	; (80007bc <main+0x194>)
 80006a6:	2102      	movs	r1, #2
 80006a8:	0018      	movs	r0, r3
 80006aa:	f001 fbf8 	bl	8001e9e <HAL_GPIO_TogglePin>
	  		  			  HAL_Delay(500);
 80006ae:	23fa      	movs	r3, #250	; 0xfa
 80006b0:	005b      	lsls	r3, r3, #1
 80006b2:	0018      	movs	r0, r3
 80006b4:	f000 fbf4 	bl	8000ea0 <HAL_Delay>
	  		  }
	  	  }
	  if(h[3] >= 3000){
 80006b8:	4b3c      	ldr	r3, [pc, #240]	; (80007ac <main+0x184>)
 80006ba:	68db      	ldr	r3, [r3, #12]
 80006bc:	4a3d      	ldr	r2, [pc, #244]	; (80007b4 <main+0x18c>)
 80006be:	4293      	cmp	r3, r2
 80006c0:	d911      	bls.n	80006e6 <main+0xbe>
	  		  if(NRF24_Transmit(direita) == 1){
 80006c2:	4b40      	ldr	r3, [pc, #256]	; (80007c4 <main+0x19c>)
 80006c4:	0018      	movs	r0, r3
 80006c6:	f7ff ff69 	bl	800059c <NRF24_Transmit>
 80006ca:	0003      	movs	r3, r0
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	d10a      	bne.n	80006e6 <main+0xbe>
	  			  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1, GPIO_PIN_SET);
 80006d0:	4b3a      	ldr	r3, [pc, #232]	; (80007bc <main+0x194>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	2102      	movs	r1, #2
 80006d6:	0018      	movs	r0, r3
 80006d8:	f001 fbc4 	bl	8001e64 <HAL_GPIO_WritePin>
	  			  HAL_Delay(500);
 80006dc:	23fa      	movs	r3, #250	; 0xfa
 80006de:	005b      	lsls	r3, r3, #1
 80006e0:	0018      	movs	r0, r3
 80006e2:	f000 fbdd 	bl	8000ea0 <HAL_Delay>
	  	 }
	  }
	  if(h[3] <= 1000){
 80006e6:	4b31      	ldr	r3, [pc, #196]	; (80007ac <main+0x184>)
 80006e8:	68da      	ldr	r2, [r3, #12]
 80006ea:	23fa      	movs	r3, #250	; 0xfa
 80006ec:	009b      	lsls	r3, r3, #2
 80006ee:	429a      	cmp	r2, r3
 80006f0:	d811      	bhi.n	8000716 <main+0xee>
	  		 if(NRF24_Transmit(esquerda) == 1){
 80006f2:	4b35      	ldr	r3, [pc, #212]	; (80007c8 <main+0x1a0>)
 80006f4:	0018      	movs	r0, r3
 80006f6:	f7ff ff51 	bl	800059c <NRF24_Transmit>
 80006fa:	0003      	movs	r3, r0
 80006fc:	2b01      	cmp	r3, #1
 80006fe:	d10a      	bne.n	8000716 <main+0xee>
	  			 HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1, GPIO_PIN_RESET);
 8000700:	4b2e      	ldr	r3, [pc, #184]	; (80007bc <main+0x194>)
 8000702:	2200      	movs	r2, #0
 8000704:	2102      	movs	r1, #2
 8000706:	0018      	movs	r0, r3
 8000708:	f001 fbac 	bl	8001e64 <HAL_GPIO_WritePin>
	  			 HAL_Delay(500);
 800070c:	23fa      	movs	r3, #250	; 0xfa
 800070e:	005b      	lsls	r3, r3, #1
 8000710:	0018      	movs	r0, r3
 8000712:	f000 fbc5 	bl	8000ea0 <HAL_Delay>
  		  			  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_1);
  		  			  HAL_Delay(1000);
  		  }
  	  }*/

  if(h[0] <= 1000){
 8000716:	4b25      	ldr	r3, [pc, #148]	; (80007ac <main+0x184>)
 8000718:	681a      	ldr	r2, [r3, #0]
 800071a:	23fa      	movs	r3, #250	; 0xfa
 800071c:	009b      	lsls	r3, r3, #2
 800071e:	429a      	cmp	r2, r3
 8000720:	d810      	bhi.n	8000744 <main+0x11c>
  	  		  if(NRF24_Transmit(tras) == 1){
 8000722:	4b27      	ldr	r3, [pc, #156]	; (80007c0 <main+0x198>)
 8000724:	0018      	movs	r0, r3
 8000726:	f7ff ff39 	bl	800059c <NRF24_Transmit>
 800072a:	0003      	movs	r3, r0
 800072c:	2b01      	cmp	r3, #1
 800072e:	d109      	bne.n	8000744 <main+0x11c>
  	  		  			  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_1);
 8000730:	4b22      	ldr	r3, [pc, #136]	; (80007bc <main+0x194>)
 8000732:	2102      	movs	r1, #2
 8000734:	0018      	movs	r0, r3
 8000736:	f001 fbb2 	bl	8001e9e <HAL_GPIO_TogglePin>
  	  		  			  HAL_Delay(500);
 800073a:	23fa      	movs	r3, #250	; 0xfa
 800073c:	005b      	lsls	r3, r3, #1
 800073e:	0018      	movs	r0, r3
 8000740:	f000 fbae 	bl	8000ea0 <HAL_Delay>
  	  		  }
  	  	  }
  if(h[1] >= 3000){
 8000744:	4b19      	ldr	r3, [pc, #100]	; (80007ac <main+0x184>)
 8000746:	685b      	ldr	r3, [r3, #4]
 8000748:	4a1a      	ldr	r2, [pc, #104]	; (80007b4 <main+0x18c>)
 800074a:	4293      	cmp	r3, r2
 800074c:	d911      	bls.n	8000772 <main+0x14a>
  	  		  if(NRF24_Transmit(girodir) == 1){
 800074e:	4b1f      	ldr	r3, [pc, #124]	; (80007cc <main+0x1a4>)
 8000750:	0018      	movs	r0, r3
 8000752:	f7ff ff23 	bl	800059c <NRF24_Transmit>
 8000756:	0003      	movs	r3, r0
 8000758:	2b01      	cmp	r3, #1
 800075a:	d10a      	bne.n	8000772 <main+0x14a>
  	  			  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1, GPIO_PIN_SET);
 800075c:	4b17      	ldr	r3, [pc, #92]	; (80007bc <main+0x194>)
 800075e:	2201      	movs	r2, #1
 8000760:	2102      	movs	r1, #2
 8000762:	0018      	movs	r0, r3
 8000764:	f001 fb7e 	bl	8001e64 <HAL_GPIO_WritePin>
  	  			  HAL_Delay(500);
 8000768:	23fa      	movs	r3, #250	; 0xfa
 800076a:	005b      	lsls	r3, r3, #1
 800076c:	0018      	movs	r0, r3
 800076e:	f000 fb97 	bl	8000ea0 <HAL_Delay>
  	  	 }
  	  }
  if(h[1] <= 1000){
 8000772:	4b0e      	ldr	r3, [pc, #56]	; (80007ac <main+0x184>)
 8000774:	685a      	ldr	r2, [r3, #4]
 8000776:	23fa      	movs	r3, #250	; 0xfa
 8000778:	009b      	lsls	r3, r3, #2
 800077a:	429a      	cmp	r2, r3
 800077c:	d900      	bls.n	8000780 <main+0x158>
 800077e:	e76e      	b.n	800065e <main+0x36>
  	  		 if(NRF24_Transmit(giroesq) == 1){
 8000780:	4b13      	ldr	r3, [pc, #76]	; (80007d0 <main+0x1a8>)
 8000782:	0018      	movs	r0, r3
 8000784:	f7ff ff0a 	bl	800059c <NRF24_Transmit>
 8000788:	0003      	movs	r3, r0
 800078a:	2b01      	cmp	r3, #1
 800078c:	d000      	beq.n	8000790 <main+0x168>
 800078e:	e766      	b.n	800065e <main+0x36>
  	  			 HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1, GPIO_PIN_RESET);
 8000790:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <main+0x194>)
 8000792:	2200      	movs	r2, #0
 8000794:	2102      	movs	r1, #2
 8000796:	0018      	movs	r0, r3
 8000798:	f001 fb64 	bl	8001e64 <HAL_GPIO_WritePin>
  	  			 HAL_Delay(500);
 800079c:	23fa      	movs	r3, #250	; 0xfa
 800079e:	005b      	lsls	r3, r3, #1
 80007a0:	0018      	movs	r0, r3
 80007a2:	f000 fb7d 	bl	8000ea0 <HAL_Delay>
	  if(h[2] >= 3000){
 80007a6:	e75a      	b.n	800065e <main+0x36>
 80007a8:	20000000 	.word	0x20000000
 80007ac:	2000014c 	.word	0x2000014c
 80007b0:	20000064 	.word	0x20000064
 80007b4:	00000bb7 	.word	0x00000bb7
 80007b8:	20000008 	.word	0x20000008
 80007bc:	48000400 	.word	0x48000400
 80007c0:	20000010 	.word	0x20000010
 80007c4:	20000018 	.word	0x20000018
 80007c8:	20000020 	.word	0x20000020
 80007cc:	20000034 	.word	0x20000034
 80007d0:	2000002c 	.word	0x2000002c

080007d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d4:	b590      	push	{r4, r7, lr}
 80007d6:	b091      	sub	sp, #68	; 0x44
 80007d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007da:	2410      	movs	r4, #16
 80007dc:	193b      	adds	r3, r7, r4
 80007de:	0018      	movs	r0, r3
 80007e0:	2330      	movs	r3, #48	; 0x30
 80007e2:	001a      	movs	r2, r3
 80007e4:	2100      	movs	r1, #0
 80007e6:	f002 feff 	bl	80035e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ea:	003b      	movs	r3, r7
 80007ec:	0018      	movs	r0, r3
 80007ee:	2310      	movs	r3, #16
 80007f0:	001a      	movs	r2, r3
 80007f2:	2100      	movs	r1, #0
 80007f4:	f002 fef8 	bl	80035e8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSE;
 80007f8:	0021      	movs	r1, r4
 80007fa:	187b      	adds	r3, r7, r1
 80007fc:	2211      	movs	r2, #17
 80007fe:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000800:	187b      	adds	r3, r7, r1
 8000802:	2201      	movs	r2, #1
 8000804:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000806:	187b      	adds	r3, r7, r1
 8000808:	2201      	movs	r2, #1
 800080a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800080c:	187b      	adds	r3, r7, r1
 800080e:	2210      	movs	r2, #16
 8000810:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000812:	187b      	adds	r3, r7, r1
 8000814:	2202      	movs	r2, #2
 8000816:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000818:	187b      	adds	r3, r7, r1
 800081a:	2280      	movs	r2, #128	; 0x80
 800081c:	0252      	lsls	r2, r2, #9
 800081e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL3;
 8000820:	187b      	adds	r3, r7, r1
 8000822:	2280      	movs	r2, #128	; 0x80
 8000824:	02d2      	lsls	r2, r2, #11
 8000826:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000828:	187b      	adds	r3, r7, r1
 800082a:	2200      	movs	r2, #0
 800082c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800082e:	187b      	adds	r3, r7, r1
 8000830:	0018      	movs	r0, r3
 8000832:	f001 fb4f 	bl	8001ed4 <HAL_RCC_OscConfig>
 8000836:	1e03      	subs	r3, r0, #0
 8000838:	d001      	beq.n	800083e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800083a:	f000 f979 	bl	8000b30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083e:	003b      	movs	r3, r7
 8000840:	2207      	movs	r2, #7
 8000842:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000844:	003b      	movs	r3, r7
 8000846:	2202      	movs	r2, #2
 8000848:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800084a:	003b      	movs	r3, r7
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000850:	003b      	movs	r3, r7
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000856:	003b      	movs	r3, r7
 8000858:	2101      	movs	r1, #1
 800085a:	0018      	movs	r0, r3
 800085c:	f001 fe58 	bl	8002510 <HAL_RCC_ClockConfig>
 8000860:	1e03      	subs	r3, r0, #0
 8000862:	d001      	beq.n	8000868 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000864:	f000 f964 	bl	8000b30 <Error_Handler>
  }
}
 8000868:	46c0      	nop			; (mov r8, r8)
 800086a:	46bd      	mov	sp, r7
 800086c:	b011      	add	sp, #68	; 0x44
 800086e:	bd90      	pop	{r4, r7, pc}

08000870 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	0018      	movs	r0, r3
 800087a:	230c      	movs	r3, #12
 800087c:	001a      	movs	r2, r3
 800087e:	2100      	movs	r1, #0
 8000880:	f002 feb2 	bl	80035e8 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000884:	4b39      	ldr	r3, [pc, #228]	; (800096c <MX_ADC_Init+0xfc>)
 8000886:	4a3a      	ldr	r2, [pc, #232]	; (8000970 <MX_ADC_Init+0x100>)
 8000888:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800088a:	4b38      	ldr	r3, [pc, #224]	; (800096c <MX_ADC_Init+0xfc>)
 800088c:	2200      	movs	r2, #0
 800088e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000890:	4b36      	ldr	r3, [pc, #216]	; (800096c <MX_ADC_Init+0xfc>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000896:	4b35      	ldr	r3, [pc, #212]	; (800096c <MX_ADC_Init+0xfc>)
 8000898:	2200      	movs	r2, #0
 800089a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800089c:	4b33      	ldr	r3, [pc, #204]	; (800096c <MX_ADC_Init+0xfc>)
 800089e:	2201      	movs	r2, #1
 80008a0:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008a2:	4b32      	ldr	r3, [pc, #200]	; (800096c <MX_ADC_Init+0xfc>)
 80008a4:	2204      	movs	r2, #4
 80008a6:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80008a8:	4b30      	ldr	r3, [pc, #192]	; (800096c <MX_ADC_Init+0xfc>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80008ae:	4b2f      	ldr	r3, [pc, #188]	; (800096c <MX_ADC_Init+0xfc>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 80008b4:	4b2d      	ldr	r3, [pc, #180]	; (800096c <MX_ADC_Init+0xfc>)
 80008b6:	2201      	movs	r2, #1
 80008b8:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80008ba:	4b2c      	ldr	r3, [pc, #176]	; (800096c <MX_ADC_Init+0xfc>)
 80008bc:	2200      	movs	r2, #0
 80008be:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008c0:	4b2a      	ldr	r3, [pc, #168]	; (800096c <MX_ADC_Init+0xfc>)
 80008c2:	22c2      	movs	r2, #194	; 0xc2
 80008c4:	32ff      	adds	r2, #255	; 0xff
 80008c6:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008c8:	4b28      	ldr	r3, [pc, #160]	; (800096c <MX_ADC_Init+0xfc>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = ENABLE;
 80008ce:	4b27      	ldr	r3, [pc, #156]	; (800096c <MX_ADC_Init+0xfc>)
 80008d0:	2224      	movs	r2, #36	; 0x24
 80008d2:	2101      	movs	r1, #1
 80008d4:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008d6:	4b25      	ldr	r3, [pc, #148]	; (800096c <MX_ADC_Init+0xfc>)
 80008d8:	2201      	movs	r2, #1
 80008da:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80008dc:	4b23      	ldr	r3, [pc, #140]	; (800096c <MX_ADC_Init+0xfc>)
 80008de:	0018      	movs	r0, r3
 80008e0:	f000 fb02 	bl	8000ee8 <HAL_ADC_Init>
 80008e4:	1e03      	subs	r3, r0, #0
 80008e6:	d001      	beq.n	80008ec <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80008e8:	f000 f922 	bl	8000b30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80008ec:	1d3b      	adds	r3, r7, #4
 80008ee:	2201      	movs	r2, #1
 80008f0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	2280      	movs	r2, #128	; 0x80
 80008f6:	0152      	lsls	r2, r2, #5
 80008f8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	2207      	movs	r2, #7
 80008fe:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000900:	1d3a      	adds	r2, r7, #4
 8000902:	4b1a      	ldr	r3, [pc, #104]	; (800096c <MX_ADC_Init+0xfc>)
 8000904:	0011      	movs	r1, r2
 8000906:	0018      	movs	r0, r3
 8000908:	f000 fcc8 	bl	800129c <HAL_ADC_ConfigChannel>
 800090c:	1e03      	subs	r3, r0, #0
 800090e:	d001      	beq.n	8000914 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8000910:	f000 f90e 	bl	8000b30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	2202      	movs	r2, #2
 8000918:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800091a:	1d3a      	adds	r2, r7, #4
 800091c:	4b13      	ldr	r3, [pc, #76]	; (800096c <MX_ADC_Init+0xfc>)
 800091e:	0011      	movs	r1, r2
 8000920:	0018      	movs	r0, r3
 8000922:	f000 fcbb 	bl	800129c <HAL_ADC_ConfigChannel>
 8000926:	1e03      	subs	r3, r0, #0
 8000928:	d001      	beq.n	800092e <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 800092a:	f000 f901 	bl	8000b30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	2203      	movs	r2, #3
 8000932:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000934:	1d3a      	adds	r2, r7, #4
 8000936:	4b0d      	ldr	r3, [pc, #52]	; (800096c <MX_ADC_Init+0xfc>)
 8000938:	0011      	movs	r1, r2
 800093a:	0018      	movs	r0, r3
 800093c:	f000 fcae 	bl	800129c <HAL_ADC_ConfigChannel>
 8000940:	1e03      	subs	r3, r0, #0
 8000942:	d001      	beq.n	8000948 <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 8000944:	f000 f8f4 	bl	8000b30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000948:	1d3b      	adds	r3, r7, #4
 800094a:	2204      	movs	r2, #4
 800094c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800094e:	1d3a      	adds	r2, r7, #4
 8000950:	4b06      	ldr	r3, [pc, #24]	; (800096c <MX_ADC_Init+0xfc>)
 8000952:	0011      	movs	r1, r2
 8000954:	0018      	movs	r0, r3
 8000956:	f000 fca1 	bl	800129c <HAL_ADC_ConfigChannel>
 800095a:	1e03      	subs	r3, r0, #0
 800095c:	d001      	beq.n	8000962 <MX_ADC_Init+0xf2>
  {
    Error_Handler();
 800095e:	f000 f8e7 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000962:	46c0      	nop			; (mov r8, r8)
 8000964:	46bd      	mov	sp, r7
 8000966:	b004      	add	sp, #16
 8000968:	bd80      	pop	{r7, pc}
 800096a:	46c0      	nop			; (mov r8, r8)
 800096c:	20000064 	.word	0x20000064
 8000970:	40012400 	.word	0x40012400

08000974 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000978:	4b1b      	ldr	r3, [pc, #108]	; (80009e8 <MX_SPI1_Init+0x74>)
 800097a:	4a1c      	ldr	r2, [pc, #112]	; (80009ec <MX_SPI1_Init+0x78>)
 800097c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800097e:	4b1a      	ldr	r3, [pc, #104]	; (80009e8 <MX_SPI1_Init+0x74>)
 8000980:	2282      	movs	r2, #130	; 0x82
 8000982:	0052      	lsls	r2, r2, #1
 8000984:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000986:	4b18      	ldr	r3, [pc, #96]	; (80009e8 <MX_SPI1_Init+0x74>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800098c:	4b16      	ldr	r3, [pc, #88]	; (80009e8 <MX_SPI1_Init+0x74>)
 800098e:	22e0      	movs	r2, #224	; 0xe0
 8000990:	00d2      	lsls	r2, r2, #3
 8000992:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000994:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <MX_SPI1_Init+0x74>)
 8000996:	2200      	movs	r2, #0
 8000998:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800099a:	4b13      	ldr	r3, [pc, #76]	; (80009e8 <MX_SPI1_Init+0x74>)
 800099c:	2200      	movs	r2, #0
 800099e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009a0:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <MX_SPI1_Init+0x74>)
 80009a2:	2280      	movs	r2, #128	; 0x80
 80009a4:	0092      	lsls	r2, r2, #2
 80009a6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80009a8:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <MX_SPI1_Init+0x74>)
 80009aa:	2210      	movs	r2, #16
 80009ac:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009ae:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <MX_SPI1_Init+0x74>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009b4:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <MX_SPI1_Init+0x74>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009ba:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <MX_SPI1_Init+0x74>)
 80009bc:	2200      	movs	r2, #0
 80009be:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009c0:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <MX_SPI1_Init+0x74>)
 80009c2:	2207      	movs	r2, #7
 80009c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009c6:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <MX_SPI1_Init+0x74>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <MX_SPI1_Init+0x74>)
 80009ce:	2208      	movs	r2, #8
 80009d0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80009d2:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <MX_SPI1_Init+0x74>)
 80009d4:	0018      	movs	r0, r3
 80009d6:	f001 fec3 	bl	8002760 <HAL_SPI_Init>
 80009da:	1e03      	subs	r3, r0, #0
 80009dc:	d001      	beq.n	80009e2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80009de:	f000 f8a7 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	200000e8 	.word	0x200000e8
 80009ec:	40013000 	.word	0x40013000

080009f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009f6:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <MX_DMA_Init+0x38>)
 80009f8:	695a      	ldr	r2, [r3, #20]
 80009fa:	4b0b      	ldr	r3, [pc, #44]	; (8000a28 <MX_DMA_Init+0x38>)
 80009fc:	2101      	movs	r1, #1
 80009fe:	430a      	orrs	r2, r1
 8000a00:	615a      	str	r2, [r3, #20]
 8000a02:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <MX_DMA_Init+0x38>)
 8000a04:	695b      	ldr	r3, [r3, #20]
 8000a06:	2201      	movs	r2, #1
 8000a08:	4013      	ands	r3, r2
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2100      	movs	r1, #0
 8000a12:	2009      	movs	r0, #9
 8000a14:	f000 feec 	bl	80017f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a18:	2009      	movs	r0, #9
 8000a1a:	f000 fefe 	bl	800181a <HAL_NVIC_EnableIRQ>

}
 8000a1e:	46c0      	nop			; (mov r8, r8)
 8000a20:	46bd      	mov	sp, r7
 8000a22:	b002      	add	sp, #8
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	40021000 	.word	0x40021000

08000a2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a2c:	b590      	push	{r4, r7, lr}
 8000a2e:	b089      	sub	sp, #36	; 0x24
 8000a30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a32:	240c      	movs	r4, #12
 8000a34:	193b      	adds	r3, r7, r4
 8000a36:	0018      	movs	r0, r3
 8000a38:	2314      	movs	r3, #20
 8000a3a:	001a      	movs	r2, r3
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	f002 fdd3 	bl	80035e8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a42:	4b39      	ldr	r3, [pc, #228]	; (8000b28 <MX_GPIO_Init+0xfc>)
 8000a44:	695a      	ldr	r2, [r3, #20]
 8000a46:	4b38      	ldr	r3, [pc, #224]	; (8000b28 <MX_GPIO_Init+0xfc>)
 8000a48:	2180      	movs	r1, #128	; 0x80
 8000a4a:	03c9      	lsls	r1, r1, #15
 8000a4c:	430a      	orrs	r2, r1
 8000a4e:	615a      	str	r2, [r3, #20]
 8000a50:	4b35      	ldr	r3, [pc, #212]	; (8000b28 <MX_GPIO_Init+0xfc>)
 8000a52:	695a      	ldr	r2, [r3, #20]
 8000a54:	2380      	movs	r3, #128	; 0x80
 8000a56:	03db      	lsls	r3, r3, #15
 8000a58:	4013      	ands	r3, r2
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5e:	4b32      	ldr	r3, [pc, #200]	; (8000b28 <MX_GPIO_Init+0xfc>)
 8000a60:	695a      	ldr	r2, [r3, #20]
 8000a62:	4b31      	ldr	r3, [pc, #196]	; (8000b28 <MX_GPIO_Init+0xfc>)
 8000a64:	2180      	movs	r1, #128	; 0x80
 8000a66:	0289      	lsls	r1, r1, #10
 8000a68:	430a      	orrs	r2, r1
 8000a6a:	615a      	str	r2, [r3, #20]
 8000a6c:	4b2e      	ldr	r3, [pc, #184]	; (8000b28 <MX_GPIO_Init+0xfc>)
 8000a6e:	695a      	ldr	r2, [r3, #20]
 8000a70:	2380      	movs	r3, #128	; 0x80
 8000a72:	029b      	lsls	r3, r3, #10
 8000a74:	4013      	ands	r3, r2
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7a:	4b2b      	ldr	r3, [pc, #172]	; (8000b28 <MX_GPIO_Init+0xfc>)
 8000a7c:	695a      	ldr	r2, [r3, #20]
 8000a7e:	4b2a      	ldr	r3, [pc, #168]	; (8000b28 <MX_GPIO_Init+0xfc>)
 8000a80:	2180      	movs	r1, #128	; 0x80
 8000a82:	02c9      	lsls	r1, r1, #11
 8000a84:	430a      	orrs	r2, r1
 8000a86:	615a      	str	r2, [r3, #20]
 8000a88:	4b27      	ldr	r3, [pc, #156]	; (8000b28 <MX_GPIO_Init+0xfc>)
 8000a8a:	695a      	ldr	r2, [r3, #20]
 8000a8c:	2380      	movs	r3, #128	; 0x80
 8000a8e:	02db      	lsls	r3, r3, #11
 8000a90:	4013      	ands	r3, r2
 8000a92:	603b      	str	r3, [r7, #0]
 8000a94:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000a96:	4b25      	ldr	r3, [pc, #148]	; (8000b2c <MX_GPIO_Init+0x100>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	2102      	movs	r1, #2
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	f001 f9e1 	bl	8001e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CSN_Pin|CE_Pin, GPIO_PIN_RESET);
 8000aa2:	23c0      	movs	r3, #192	; 0xc0
 8000aa4:	00d9      	lsls	r1, r3, #3
 8000aa6:	2390      	movs	r3, #144	; 0x90
 8000aa8:	05db      	lsls	r3, r3, #23
 8000aaa:	2200      	movs	r2, #0
 8000aac:	0018      	movs	r0, r3
 8000aae:	f001 f9d9 	bl	8001e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ab2:	193b      	adds	r3, r7, r4
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ab8:	193b      	adds	r3, r7, r4
 8000aba:	2200      	movs	r2, #0
 8000abc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	193b      	adds	r3, r7, r4
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac4:	193a      	adds	r2, r7, r4
 8000ac6:	2390      	movs	r3, #144	; 0x90
 8000ac8:	05db      	lsls	r3, r3, #23
 8000aca:	0011      	movs	r1, r2
 8000acc:	0018      	movs	r0, r3
 8000ace:	f001 f859 	bl	8001b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000ad2:	193b      	adds	r3, r7, r4
 8000ad4:	2202      	movs	r2, #2
 8000ad6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad8:	193b      	adds	r3, r7, r4
 8000ada:	2201      	movs	r2, #1
 8000adc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ade:	193b      	adds	r3, r7, r4
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae4:	193b      	adds	r3, r7, r4
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000aea:	193b      	adds	r3, r7, r4
 8000aec:	4a0f      	ldr	r2, [pc, #60]	; (8000b2c <MX_GPIO_Init+0x100>)
 8000aee:	0019      	movs	r1, r3
 8000af0:	0010      	movs	r0, r2
 8000af2:	f001 f847 	bl	8001b84 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSN_Pin CE_Pin */
  GPIO_InitStruct.Pin = CSN_Pin|CE_Pin;
 8000af6:	0021      	movs	r1, r4
 8000af8:	187b      	adds	r3, r7, r1
 8000afa:	22c0      	movs	r2, #192	; 0xc0
 8000afc:	00d2      	lsls	r2, r2, #3
 8000afe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b00:	187b      	adds	r3, r7, r1
 8000b02:	2201      	movs	r2, #1
 8000b04:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	187b      	adds	r3, r7, r1
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0c:	187b      	adds	r3, r7, r1
 8000b0e:	2200      	movs	r2, #0
 8000b10:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b12:	187a      	adds	r2, r7, r1
 8000b14:	2390      	movs	r3, #144	; 0x90
 8000b16:	05db      	lsls	r3, r3, #23
 8000b18:	0011      	movs	r1, r2
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f001 f832 	bl	8001b84 <HAL_GPIO_Init>

}
 8000b20:	46c0      	nop			; (mov r8, r8)
 8000b22:	46bd      	mov	sp, r7
 8000b24:	b009      	add	sp, #36	; 0x24
 8000b26:	bd90      	pop	{r4, r7, pc}
 8000b28:	40021000 	.word	0x40021000
 8000b2c:	48000400 	.word	0x48000400

08000b30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b34:	b672      	cpsid	i
}
 8000b36:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <Error_Handler+0x8>
	...

08000b3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b42:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <HAL_MspInit+0x44>)
 8000b44:	699a      	ldr	r2, [r3, #24]
 8000b46:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <HAL_MspInit+0x44>)
 8000b48:	2101      	movs	r1, #1
 8000b4a:	430a      	orrs	r2, r1
 8000b4c:	619a      	str	r2, [r3, #24]
 8000b4e:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <HAL_MspInit+0x44>)
 8000b50:	699b      	ldr	r3, [r3, #24]
 8000b52:	2201      	movs	r2, #1
 8000b54:	4013      	ands	r3, r2
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5a:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <HAL_MspInit+0x44>)
 8000b5c:	69da      	ldr	r2, [r3, #28]
 8000b5e:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <HAL_MspInit+0x44>)
 8000b60:	2180      	movs	r1, #128	; 0x80
 8000b62:	0549      	lsls	r1, r1, #21
 8000b64:	430a      	orrs	r2, r1
 8000b66:	61da      	str	r2, [r3, #28]
 8000b68:	4b05      	ldr	r3, [pc, #20]	; (8000b80 <HAL_MspInit+0x44>)
 8000b6a:	69da      	ldr	r2, [r3, #28]
 8000b6c:	2380      	movs	r3, #128	; 0x80
 8000b6e:	055b      	lsls	r3, r3, #21
 8000b70:	4013      	ands	r3, r2
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b76:	46c0      	nop			; (mov r8, r8)
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	b002      	add	sp, #8
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	40021000 	.word	0x40021000

08000b84 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b84:	b590      	push	{r4, r7, lr}
 8000b86:	b08b      	sub	sp, #44	; 0x2c
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b8c:	2414      	movs	r4, #20
 8000b8e:	193b      	adds	r3, r7, r4
 8000b90:	0018      	movs	r0, r3
 8000b92:	2314      	movs	r3, #20
 8000b94:	001a      	movs	r2, r3
 8000b96:	2100      	movs	r1, #0
 8000b98:	f002 fd26 	bl	80035e8 <memset>
  if(hadc->Instance==ADC1)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a2d      	ldr	r2, [pc, #180]	; (8000c58 <HAL_ADC_MspInit+0xd4>)
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	d153      	bne.n	8000c4e <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ba6:	4b2d      	ldr	r3, [pc, #180]	; (8000c5c <HAL_ADC_MspInit+0xd8>)
 8000ba8:	699a      	ldr	r2, [r3, #24]
 8000baa:	4b2c      	ldr	r3, [pc, #176]	; (8000c5c <HAL_ADC_MspInit+0xd8>)
 8000bac:	2180      	movs	r1, #128	; 0x80
 8000bae:	0089      	lsls	r1, r1, #2
 8000bb0:	430a      	orrs	r2, r1
 8000bb2:	619a      	str	r2, [r3, #24]
 8000bb4:	4b29      	ldr	r3, [pc, #164]	; (8000c5c <HAL_ADC_MspInit+0xd8>)
 8000bb6:	699a      	ldr	r2, [r3, #24]
 8000bb8:	2380      	movs	r3, #128	; 0x80
 8000bba:	009b      	lsls	r3, r3, #2
 8000bbc:	4013      	ands	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]
 8000bc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc2:	4b26      	ldr	r3, [pc, #152]	; (8000c5c <HAL_ADC_MspInit+0xd8>)
 8000bc4:	695a      	ldr	r2, [r3, #20]
 8000bc6:	4b25      	ldr	r3, [pc, #148]	; (8000c5c <HAL_ADC_MspInit+0xd8>)
 8000bc8:	2180      	movs	r1, #128	; 0x80
 8000bca:	0289      	lsls	r1, r1, #10
 8000bcc:	430a      	orrs	r2, r1
 8000bce:	615a      	str	r2, [r3, #20]
 8000bd0:	4b22      	ldr	r3, [pc, #136]	; (8000c5c <HAL_ADC_MspInit+0xd8>)
 8000bd2:	695a      	ldr	r2, [r3, #20]
 8000bd4:	2380      	movs	r3, #128	; 0x80
 8000bd6:	029b      	lsls	r3, r3, #10
 8000bd8:	4013      	ands	r3, r2
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2
    PA3     ------> ADC_IN3
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8000bde:	193b      	adds	r3, r7, r4
 8000be0:	221e      	movs	r2, #30
 8000be2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000be4:	193b      	adds	r3, r7, r4
 8000be6:	2203      	movs	r2, #3
 8000be8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	193b      	adds	r3, r7, r4
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf0:	193a      	adds	r2, r7, r4
 8000bf2:	2390      	movs	r3, #144	; 0x90
 8000bf4:	05db      	lsls	r3, r3, #23
 8000bf6:	0011      	movs	r1, r2
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	f000 ffc3 	bl	8001b84 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8000bfe:	4b18      	ldr	r3, [pc, #96]	; (8000c60 <HAL_ADC_MspInit+0xdc>)
 8000c00:	4a18      	ldr	r2, [pc, #96]	; (8000c64 <HAL_ADC_MspInit+0xe0>)
 8000c02:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c04:	4b16      	ldr	r3, [pc, #88]	; (8000c60 <HAL_ADC_MspInit+0xdc>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c0a:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <HAL_ADC_MspInit+0xdc>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000c10:	4b13      	ldr	r3, [pc, #76]	; (8000c60 <HAL_ADC_MspInit+0xdc>)
 8000c12:	2280      	movs	r2, #128	; 0x80
 8000c14:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c16:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <HAL_ADC_MspInit+0xdc>)
 8000c18:	2280      	movs	r2, #128	; 0x80
 8000c1a:	0092      	lsls	r2, r2, #2
 8000c1c:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c1e:	4b10      	ldr	r3, [pc, #64]	; (8000c60 <HAL_ADC_MspInit+0xdc>)
 8000c20:	2280      	movs	r2, #128	; 0x80
 8000c22:	0112      	lsls	r2, r2, #4
 8000c24:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8000c26:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <HAL_ADC_MspInit+0xdc>)
 8000c28:	2220      	movs	r2, #32
 8000c2a:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8000c2c:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <HAL_ADC_MspInit+0xdc>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000c32:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <HAL_ADC_MspInit+0xdc>)
 8000c34:	0018      	movs	r0, r3
 8000c36:	f000 fe0d 	bl	8001854 <HAL_DMA_Init>
 8000c3a:	1e03      	subs	r3, r0, #0
 8000c3c:	d001      	beq.n	8000c42 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8000c3e:	f7ff ff77 	bl	8000b30 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4a06      	ldr	r2, [pc, #24]	; (8000c60 <HAL_ADC_MspInit+0xdc>)
 8000c46:	631a      	str	r2, [r3, #48]	; 0x30
 8000c48:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <HAL_ADC_MspInit+0xdc>)
 8000c4a:	687a      	ldr	r2, [r7, #4]
 8000c4c:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c4e:	46c0      	nop			; (mov r8, r8)
 8000c50:	46bd      	mov	sp, r7
 8000c52:	b00b      	add	sp, #44	; 0x2c
 8000c54:	bd90      	pop	{r4, r7, pc}
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	40012400 	.word	0x40012400
 8000c5c:	40021000 	.word	0x40021000
 8000c60:	200000a4 	.word	0x200000a4
 8000c64:	40020008 	.word	0x40020008

08000c68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c68:	b590      	push	{r4, r7, lr}
 8000c6a:	b08b      	sub	sp, #44	; 0x2c
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	2414      	movs	r4, #20
 8000c72:	193b      	adds	r3, r7, r4
 8000c74:	0018      	movs	r0, r3
 8000c76:	2314      	movs	r3, #20
 8000c78:	001a      	movs	r2, r3
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	f002 fcb4 	bl	80035e8 <memset>
  if(hspi->Instance==SPI1)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a1c      	ldr	r2, [pc, #112]	; (8000cf8 <HAL_SPI_MspInit+0x90>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d132      	bne.n	8000cf0 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c8a:	4b1c      	ldr	r3, [pc, #112]	; (8000cfc <HAL_SPI_MspInit+0x94>)
 8000c8c:	699a      	ldr	r2, [r3, #24]
 8000c8e:	4b1b      	ldr	r3, [pc, #108]	; (8000cfc <HAL_SPI_MspInit+0x94>)
 8000c90:	2180      	movs	r1, #128	; 0x80
 8000c92:	0149      	lsls	r1, r1, #5
 8000c94:	430a      	orrs	r2, r1
 8000c96:	619a      	str	r2, [r3, #24]
 8000c98:	4b18      	ldr	r3, [pc, #96]	; (8000cfc <HAL_SPI_MspInit+0x94>)
 8000c9a:	699a      	ldr	r2, [r3, #24]
 8000c9c:	2380      	movs	r3, #128	; 0x80
 8000c9e:	015b      	lsls	r3, r3, #5
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
 8000ca4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca6:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <HAL_SPI_MspInit+0x94>)
 8000ca8:	695a      	ldr	r2, [r3, #20]
 8000caa:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <HAL_SPI_MspInit+0x94>)
 8000cac:	2180      	movs	r1, #128	; 0x80
 8000cae:	0289      	lsls	r1, r1, #10
 8000cb0:	430a      	orrs	r2, r1
 8000cb2:	615a      	str	r2, [r3, #20]
 8000cb4:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <HAL_SPI_MspInit+0x94>)
 8000cb6:	695a      	ldr	r2, [r3, #20]
 8000cb8:	2380      	movs	r3, #128	; 0x80
 8000cba:	029b      	lsls	r3, r3, #10
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000cc2:	0021      	movs	r1, r4
 8000cc4:	187b      	adds	r3, r7, r1
 8000cc6:	22e0      	movs	r2, #224	; 0xe0
 8000cc8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cca:	187b      	adds	r3, r7, r1
 8000ccc:	2202      	movs	r2, #2
 8000cce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	187b      	adds	r3, r7, r1
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cd6:	187b      	adds	r3, r7, r1
 8000cd8:	2203      	movs	r2, #3
 8000cda:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000cdc:	187b      	adds	r3, r7, r1
 8000cde:	2200      	movs	r2, #0
 8000ce0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce2:	187a      	adds	r2, r7, r1
 8000ce4:	2390      	movs	r3, #144	; 0x90
 8000ce6:	05db      	lsls	r3, r3, #23
 8000ce8:	0011      	movs	r1, r2
 8000cea:	0018      	movs	r0, r3
 8000cec:	f000 ff4a 	bl	8001b84 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cf0:	46c0      	nop			; (mov r8, r8)
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	b00b      	add	sp, #44	; 0x2c
 8000cf6:	bd90      	pop	{r4, r7, pc}
 8000cf8:	40013000 	.word	0x40013000
 8000cfc:	40021000 	.word	0x40021000

08000d00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <NMI_Handler+0x4>

08000d06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d0a:	e7fe      	b.n	8000d0a <HardFault_Handler+0x4>

08000d0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d10:	46c0      	nop			; (mov r8, r8)
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d16:	b580      	push	{r7, lr}
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d1a:	46c0      	nop			; (mov r8, r8)
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d24:	f000 f8a0 	bl	8000e68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d28:	46c0      	nop			; (mov r8, r8)
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
	...

08000d30 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8000d34:	4b03      	ldr	r3, [pc, #12]	; (8000d44 <DMA1_Channel1_IRQHandler+0x14>)
 8000d36:	0018      	movs	r0, r3
 8000d38:	f000 fe3a 	bl	80019b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d3c:	46c0      	nop			; (mov r8, r8)
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	46c0      	nop			; (mov r8, r8)
 8000d44:	200000a4 	.word	0x200000a4

08000d48 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000d4c:	46c0      	nop			; (mov r8, r8)
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
	...

08000d54 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d54:	4813      	ldr	r0, [pc, #76]	; (8000da4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d56:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d58:	f7ff fff6 	bl	8000d48 <SystemInit>

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000d5c:	4812      	ldr	r0, [pc, #72]	; (8000da8 <LoopForever+0x6>)
    LDR R1, [R0]
 8000d5e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000d60:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000d62:	4a12      	ldr	r2, [pc, #72]	; (8000dac <LoopForever+0xa>)
    CMP R1, R2
 8000d64:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000d66:	d105      	bne.n	8000d74 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000d68:	4811      	ldr	r0, [pc, #68]	; (8000db0 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000d6a:	4912      	ldr	r1, [pc, #72]	; (8000db4 <LoopForever+0x12>)
    STR R1, [R0]
 8000d6c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000d6e:	4812      	ldr	r0, [pc, #72]	; (8000db8 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000d70:	4912      	ldr	r1, [pc, #72]	; (8000dbc <LoopForever+0x1a>)
    STR R1, [R0]
 8000d72:	6001      	str	r1, [r0, #0]

08000d74 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d74:	4812      	ldr	r0, [pc, #72]	; (8000dc0 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000d76:	4913      	ldr	r1, [pc, #76]	; (8000dc4 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000d78:	4a13      	ldr	r2, [pc, #76]	; (8000dc8 <LoopForever+0x26>)
  movs r3, #0
 8000d7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d7c:	e002      	b.n	8000d84 <LoopCopyDataInit>

08000d7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d82:	3304      	adds	r3, #4

08000d84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d88:	d3f9      	bcc.n	8000d7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d8a:	4a10      	ldr	r2, [pc, #64]	; (8000dcc <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000d8c:	4c10      	ldr	r4, [pc, #64]	; (8000dd0 <LoopForever+0x2e>)
  movs r3, #0
 8000d8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d90:	e001      	b.n	8000d96 <LoopFillZerobss>

08000d92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d94:	3204      	adds	r2, #4

08000d96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d98:	d3fb      	bcc.n	8000d92 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d9a:	f002 fc01 	bl	80035a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d9e:	f7ff fc43 	bl	8000628 <main>

08000da2 <LoopForever>:

LoopForever:
    b LoopForever
 8000da2:	e7fe      	b.n	8000da2 <LoopForever>
  ldr   r0, =_estack
 8000da4:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000da8:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000dac:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000db0:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000db4:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000db8:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000dbc:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000dc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc4:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 8000dc8:	08003658 	.word	0x08003658
  ldr r2, =_sbss
 8000dcc:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 8000dd0:	20000160 	.word	0x20000160

08000dd4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dd4:	e7fe      	b.n	8000dd4 <ADC1_IRQHandler>
	...

08000dd8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ddc:	4b07      	ldr	r3, [pc, #28]	; (8000dfc <HAL_Init+0x24>)
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <HAL_Init+0x24>)
 8000de2:	2110      	movs	r1, #16
 8000de4:	430a      	orrs	r2, r1
 8000de6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000de8:	2003      	movs	r0, #3
 8000dea:	f000 f809 	bl	8000e00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dee:	f7ff fea5 	bl	8000b3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df2:	2300      	movs	r3, #0
}
 8000df4:	0018      	movs	r0, r3
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	46c0      	nop			; (mov r8, r8)
 8000dfc:	40022000 	.word	0x40022000

08000e00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e00:	b590      	push	{r4, r7, lr}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e08:	4b14      	ldr	r3, [pc, #80]	; (8000e5c <HAL_InitTick+0x5c>)
 8000e0a:	681c      	ldr	r4, [r3, #0]
 8000e0c:	4b14      	ldr	r3, [pc, #80]	; (8000e60 <HAL_InitTick+0x60>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	0019      	movs	r1, r3
 8000e12:	23fa      	movs	r3, #250	; 0xfa
 8000e14:	0098      	lsls	r0, r3, #2
 8000e16:	f7ff f977 	bl	8000108 <__udivsi3>
 8000e1a:	0003      	movs	r3, r0
 8000e1c:	0019      	movs	r1, r3
 8000e1e:	0020      	movs	r0, r4
 8000e20:	f7ff f972 	bl	8000108 <__udivsi3>
 8000e24:	0003      	movs	r3, r0
 8000e26:	0018      	movs	r0, r3
 8000e28:	f000 fd07 	bl	800183a <HAL_SYSTICK_Config>
 8000e2c:	1e03      	subs	r3, r0, #0
 8000e2e:	d001      	beq.n	8000e34 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000e30:	2301      	movs	r3, #1
 8000e32:	e00f      	b.n	8000e54 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2b03      	cmp	r3, #3
 8000e38:	d80b      	bhi.n	8000e52 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e3a:	6879      	ldr	r1, [r7, #4]
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	425b      	negs	r3, r3
 8000e40:	2200      	movs	r2, #0
 8000e42:	0018      	movs	r0, r3
 8000e44:	f000 fcd4 	bl	80017f0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e48:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <HAL_InitTick+0x64>)
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	e000      	b.n	8000e54 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
}
 8000e54:	0018      	movs	r0, r3
 8000e56:	46bd      	mov	sp, r7
 8000e58:	b003      	add	sp, #12
 8000e5a:	bd90      	pop	{r4, r7, pc}
 8000e5c:	2000003c 	.word	0x2000003c
 8000e60:	20000044 	.word	0x20000044
 8000e64:	20000040 	.word	0x20000040

08000e68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e6c:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <HAL_IncTick+0x1c>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	001a      	movs	r2, r3
 8000e72:	4b05      	ldr	r3, [pc, #20]	; (8000e88 <HAL_IncTick+0x20>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	18d2      	adds	r2, r2, r3
 8000e78:	4b03      	ldr	r3, [pc, #12]	; (8000e88 <HAL_IncTick+0x20>)
 8000e7a:	601a      	str	r2, [r3, #0]
}
 8000e7c:	46c0      	nop			; (mov r8, r8)
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	46c0      	nop			; (mov r8, r8)
 8000e84:	20000044 	.word	0x20000044
 8000e88:	2000015c 	.word	0x2000015c

08000e8c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e90:	4b02      	ldr	r3, [pc, #8]	; (8000e9c <HAL_GetTick+0x10>)
 8000e92:	681b      	ldr	r3, [r3, #0]
}
 8000e94:	0018      	movs	r0, r3
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	46c0      	nop			; (mov r8, r8)
 8000e9c:	2000015c 	.word	0x2000015c

08000ea0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ea8:	f7ff fff0 	bl	8000e8c <HAL_GetTick>
 8000eac:	0003      	movs	r3, r0
 8000eae:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	d005      	beq.n	8000ec6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eba:	4b0a      	ldr	r3, [pc, #40]	; (8000ee4 <HAL_Delay+0x44>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	001a      	movs	r2, r3
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	189b      	adds	r3, r3, r2
 8000ec4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000ec6:	46c0      	nop			; (mov r8, r8)
 8000ec8:	f7ff ffe0 	bl	8000e8c <HAL_GetTick>
 8000ecc:	0002      	movs	r2, r0
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	68fa      	ldr	r2, [r7, #12]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d8f7      	bhi.n	8000ec8 <HAL_Delay+0x28>
  {
  }
}
 8000ed8:	46c0      	nop			; (mov r8, r8)
 8000eda:	46c0      	nop			; (mov r8, r8)
 8000edc:	46bd      	mov	sp, r7
 8000ede:	b004      	add	sp, #16
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	46c0      	nop			; (mov r8, r8)
 8000ee4:	20000044 	.word	0x20000044

08000ee8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ef0:	230f      	movs	r3, #15
 8000ef2:	18fb      	adds	r3, r7, r3
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d101      	bne.n	8000f06 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	e125      	b.n	8001152 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d10a      	bne.n	8000f24 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2200      	movs	r2, #0
 8000f12:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2234      	movs	r2, #52	; 0x34
 8000f18:	2100      	movs	r1, #0
 8000f1a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	0018      	movs	r0, r3
 8000f20:	f7ff fe30 	bl	8000b84 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f28:	2210      	movs	r2, #16
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	d000      	beq.n	8000f30 <HAL_ADC_Init+0x48>
 8000f2e:	e103      	b.n	8001138 <HAL_ADC_Init+0x250>
 8000f30:	230f      	movs	r3, #15
 8000f32:	18fb      	adds	r3, r7, r3
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d000      	beq.n	8000f3c <HAL_ADC_Init+0x54>
 8000f3a:	e0fd      	b.n	8001138 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	2204      	movs	r2, #4
 8000f44:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000f46:	d000      	beq.n	8000f4a <HAL_ADC_Init+0x62>
 8000f48:	e0f6      	b.n	8001138 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f4e:	4a83      	ldr	r2, [pc, #524]	; (800115c <HAL_ADC_Init+0x274>)
 8000f50:	4013      	ands	r3, r2
 8000f52:	2202      	movs	r2, #2
 8000f54:	431a      	orrs	r2, r3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	2203      	movs	r2, #3
 8000f62:	4013      	ands	r3, r2
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d112      	bne.n	8000f8e <HAL_ADC_Init+0xa6>
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	2201      	movs	r2, #1
 8000f70:	4013      	ands	r3, r2
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d009      	beq.n	8000f8a <HAL_ADC_Init+0xa2>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	68da      	ldr	r2, [r3, #12]
 8000f7c:	2380      	movs	r3, #128	; 0x80
 8000f7e:	021b      	lsls	r3, r3, #8
 8000f80:	401a      	ands	r2, r3
 8000f82:	2380      	movs	r3, #128	; 0x80
 8000f84:	021b      	lsls	r3, r3, #8
 8000f86:	429a      	cmp	r2, r3
 8000f88:	d101      	bne.n	8000f8e <HAL_ADC_Init+0xa6>
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e000      	b.n	8000f90 <HAL_ADC_Init+0xa8>
 8000f8e:	2300      	movs	r3, #0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d116      	bne.n	8000fc2 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	68db      	ldr	r3, [r3, #12]
 8000f9a:	2218      	movs	r2, #24
 8000f9c:	4393      	bics	r3, r2
 8000f9e:	0019      	movs	r1, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	689a      	ldr	r2, [r3, #8]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	430a      	orrs	r2, r1
 8000faa:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	691b      	ldr	r3, [r3, #16]
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	0899      	lsrs	r1, r3, #2
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	685a      	ldr	r2, [r3, #4]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	430a      	orrs	r2, r1
 8000fc0:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	68da      	ldr	r2, [r3, #12]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4964      	ldr	r1, [pc, #400]	; (8001160 <HAL_ADC_Init+0x278>)
 8000fce:	400a      	ands	r2, r1
 8000fd0:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	7e1b      	ldrb	r3, [r3, #24]
 8000fd6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	7e5b      	ldrb	r3, [r3, #25]
 8000fdc:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000fde:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	7e9b      	ldrb	r3, [r3, #26]
 8000fe4:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000fe6:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d002      	beq.n	8000ff6 <HAL_ADC_Init+0x10e>
 8000ff0:	2380      	movs	r3, #128	; 0x80
 8000ff2:	015b      	lsls	r3, r3, #5
 8000ff4:	e000      	b.n	8000ff8 <HAL_ADC_Init+0x110>
 8000ff6:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000ff8:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000ffe:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	691b      	ldr	r3, [r3, #16]
 8001004:	2b02      	cmp	r3, #2
 8001006:	d101      	bne.n	800100c <HAL_ADC_Init+0x124>
 8001008:	2304      	movs	r3, #4
 800100a:	e000      	b.n	800100e <HAL_ADC_Init+0x126>
 800100c:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800100e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2124      	movs	r1, #36	; 0x24
 8001014:	5c5b      	ldrb	r3, [r3, r1]
 8001016:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001018:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800101a:	68ba      	ldr	r2, [r7, #8]
 800101c:	4313      	orrs	r3, r2
 800101e:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	7edb      	ldrb	r3, [r3, #27]
 8001024:	2b01      	cmp	r3, #1
 8001026:	d115      	bne.n	8001054 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	7e9b      	ldrb	r3, [r3, #26]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d105      	bne.n	800103c <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	2280      	movs	r2, #128	; 0x80
 8001034:	0252      	lsls	r2, r2, #9
 8001036:	4313      	orrs	r3, r2
 8001038:	60bb      	str	r3, [r7, #8]
 800103a:	e00b      	b.n	8001054 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001040:	2220      	movs	r2, #32
 8001042:	431a      	orrs	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800104c:	2201      	movs	r2, #1
 800104e:	431a      	orrs	r2, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	69da      	ldr	r2, [r3, #28]
 8001058:	23c2      	movs	r3, #194	; 0xc2
 800105a:	33ff      	adds	r3, #255	; 0xff
 800105c:	429a      	cmp	r2, r3
 800105e:	d007      	beq.n	8001070 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001068:	4313      	orrs	r3, r2
 800106a:	68ba      	ldr	r2, [r7, #8]
 800106c:	4313      	orrs	r3, r2
 800106e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	68d9      	ldr	r1, [r3, #12]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	68ba      	ldr	r2, [r7, #8]
 800107c:	430a      	orrs	r2, r1
 800107e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001084:	2380      	movs	r3, #128	; 0x80
 8001086:	055b      	lsls	r3, r3, #21
 8001088:	429a      	cmp	r2, r3
 800108a:	d01b      	beq.n	80010c4 <HAL_ADC_Init+0x1dc>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001090:	2b01      	cmp	r3, #1
 8001092:	d017      	beq.n	80010c4 <HAL_ADC_Init+0x1dc>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001098:	2b02      	cmp	r3, #2
 800109a:	d013      	beq.n	80010c4 <HAL_ADC_Init+0x1dc>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010a0:	2b03      	cmp	r3, #3
 80010a2:	d00f      	beq.n	80010c4 <HAL_ADC_Init+0x1dc>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010a8:	2b04      	cmp	r3, #4
 80010aa:	d00b      	beq.n	80010c4 <HAL_ADC_Init+0x1dc>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010b0:	2b05      	cmp	r3, #5
 80010b2:	d007      	beq.n	80010c4 <HAL_ADC_Init+0x1dc>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010b8:	2b06      	cmp	r3, #6
 80010ba:	d003      	beq.n	80010c4 <HAL_ADC_Init+0x1dc>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c0:	2b07      	cmp	r3, #7
 80010c2:	d112      	bne.n	80010ea <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	695a      	ldr	r2, [r3, #20]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2107      	movs	r1, #7
 80010d0:	438a      	bics	r2, r1
 80010d2:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	6959      	ldr	r1, [r3, #20]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010de:	2207      	movs	r2, #7
 80010e0:	401a      	ands	r2, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	430a      	orrs	r2, r1
 80010e8:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	4a1c      	ldr	r2, [pc, #112]	; (8001164 <HAL_ADC_Init+0x27c>)
 80010f2:	4013      	ands	r3, r2
 80010f4:	68ba      	ldr	r2, [r7, #8]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d10b      	bne.n	8001112 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2200      	movs	r2, #0
 80010fe:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001104:	2203      	movs	r2, #3
 8001106:	4393      	bics	r3, r2
 8001108:	2201      	movs	r2, #1
 800110a:	431a      	orrs	r2, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001110:	e01c      	b.n	800114c <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001116:	2212      	movs	r2, #18
 8001118:	4393      	bics	r3, r2
 800111a:	2210      	movs	r2, #16
 800111c:	431a      	orrs	r2, r3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001126:	2201      	movs	r2, #1
 8001128:	431a      	orrs	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800112e:	230f      	movs	r3, #15
 8001130:	18fb      	adds	r3, r7, r3
 8001132:	2201      	movs	r2, #1
 8001134:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001136:	e009      	b.n	800114c <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800113c:	2210      	movs	r2, #16
 800113e:	431a      	orrs	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001144:	230f      	movs	r3, #15
 8001146:	18fb      	adds	r3, r7, r3
 8001148:	2201      	movs	r2, #1
 800114a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800114c:	230f      	movs	r3, #15
 800114e:	18fb      	adds	r3, r7, r3
 8001150:	781b      	ldrb	r3, [r3, #0]
}
 8001152:	0018      	movs	r0, r3
 8001154:	46bd      	mov	sp, r7
 8001156:	b004      	add	sp, #16
 8001158:	bd80      	pop	{r7, pc}
 800115a:	46c0      	nop			; (mov r8, r8)
 800115c:	fffffefd 	.word	0xfffffefd
 8001160:	fffe0219 	.word	0xfffe0219
 8001164:	833fffe7 	.word	0x833fffe7

08001168 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001168:	b590      	push	{r4, r7, lr}
 800116a:	b087      	sub	sp, #28
 800116c:	af00      	add	r7, sp, #0
 800116e:	60f8      	str	r0, [r7, #12]
 8001170:	60b9      	str	r1, [r7, #8]
 8001172:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001174:	2317      	movs	r3, #23
 8001176:	18fb      	adds	r3, r7, r3
 8001178:	2200      	movs	r2, #0
 800117a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	2204      	movs	r2, #4
 8001184:	4013      	ands	r3, r2
 8001186:	d15e      	bne.n	8001246 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	2234      	movs	r2, #52	; 0x34
 800118c:	5c9b      	ldrb	r3, [r3, r2]
 800118e:	2b01      	cmp	r3, #1
 8001190:	d101      	bne.n	8001196 <HAL_ADC_Start_DMA+0x2e>
 8001192:	2302      	movs	r3, #2
 8001194:	e05e      	b.n	8001254 <HAL_ADC_Start_DMA+0xec>
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	2234      	movs	r2, #52	; 0x34
 800119a:	2101      	movs	r1, #1
 800119c:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	7e5b      	ldrb	r3, [r3, #25]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d007      	beq.n	80011b6 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80011a6:	2317      	movs	r3, #23
 80011a8:	18fc      	adds	r4, r7, r3
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	0018      	movs	r0, r3
 80011ae:	f000 f96b 	bl	8001488 <ADC_Enable>
 80011b2:	0003      	movs	r3, r0
 80011b4:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80011b6:	2317      	movs	r3, #23
 80011b8:	18fb      	adds	r3, r7, r3
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d146      	bne.n	800124e <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011c4:	4a25      	ldr	r2, [pc, #148]	; (800125c <HAL_ADC_Start_DMA+0xf4>)
 80011c6:	4013      	ands	r3, r2
 80011c8:	2280      	movs	r2, #128	; 0x80
 80011ca:	0052      	lsls	r2, r2, #1
 80011cc:	431a      	orrs	r2, r3
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	2200      	movs	r2, #0
 80011d6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	2234      	movs	r2, #52	; 0x34
 80011dc:	2100      	movs	r1, #0
 80011de:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e4:	4a1e      	ldr	r2, [pc, #120]	; (8001260 <HAL_ADC_Start_DMA+0xf8>)
 80011e6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ec:	4a1d      	ldr	r2, [pc, #116]	; (8001264 <HAL_ADC_Start_DMA+0xfc>)
 80011ee:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f4:	4a1c      	ldr	r2, [pc, #112]	; (8001268 <HAL_ADC_Start_DMA+0x100>)
 80011f6:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	221c      	movs	r2, #28
 80011fe:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	685a      	ldr	r2, [r3, #4]
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2110      	movs	r1, #16
 800120c:	430a      	orrs	r2, r1
 800120e:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	68da      	ldr	r2, [r3, #12]
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2101      	movs	r1, #1
 800121c:	430a      	orrs	r2, r1
 800121e:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	3340      	adds	r3, #64	; 0x40
 800122a:	0019      	movs	r1, r3
 800122c:	68ba      	ldr	r2, [r7, #8]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	f000 fb58 	bl	80018e4 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	689a      	ldr	r2, [r3, #8]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2104      	movs	r1, #4
 8001240:	430a      	orrs	r2, r1
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	e003      	b.n	800124e <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001246:	2317      	movs	r3, #23
 8001248:	18fb      	adds	r3, r7, r3
 800124a:	2202      	movs	r2, #2
 800124c:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 800124e:	2317      	movs	r3, #23
 8001250:	18fb      	adds	r3, r7, r3
 8001252:	781b      	ldrb	r3, [r3, #0]
}
 8001254:	0018      	movs	r0, r3
 8001256:	46bd      	mov	sp, r7
 8001258:	b007      	add	sp, #28
 800125a:	bd90      	pop	{r4, r7, pc}
 800125c:	fffff0fe 	.word	0xfffff0fe
 8001260:	08001591 	.word	0x08001591
 8001264:	08001645 	.word	0x08001645
 8001268:	08001663 	.word	0x08001663

0800126c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001274:	46c0      	nop			; (mov r8, r8)
 8001276:	46bd      	mov	sp, r7
 8001278:	b002      	add	sp, #8
 800127a:	bd80      	pop	{r7, pc}

0800127c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001284:	46c0      	nop			; (mov r8, r8)
 8001286:	46bd      	mov	sp, r7
 8001288:	b002      	add	sp, #8
 800128a:	bd80      	pop	{r7, pc}

0800128c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001294:	46c0      	nop			; (mov r8, r8)
 8001296:	46bd      	mov	sp, r7
 8001298:	b002      	add	sp, #8
 800129a:	bd80      	pop	{r7, pc}

0800129c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012a6:	230f      	movs	r3, #15
 80012a8:	18fb      	adds	r3, r7, r3
 80012aa:	2200      	movs	r2, #0
 80012ac:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80012ae:	2300      	movs	r3, #0
 80012b0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012b6:	2380      	movs	r3, #128	; 0x80
 80012b8:	055b      	lsls	r3, r3, #21
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d011      	beq.n	80012e2 <HAL_ADC_ConfigChannel+0x46>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d00d      	beq.n	80012e2 <HAL_ADC_ConfigChannel+0x46>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d009      	beq.n	80012e2 <HAL_ADC_ConfigChannel+0x46>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d2:	2b03      	cmp	r3, #3
 80012d4:	d005      	beq.n	80012e2 <HAL_ADC_ConfigChannel+0x46>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012da:	2b04      	cmp	r3, #4
 80012dc:	d001      	beq.n	80012e2 <HAL_ADC_ConfigChannel+0x46>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2234      	movs	r2, #52	; 0x34
 80012e6:	5c9b      	ldrb	r3, [r3, r2]
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d101      	bne.n	80012f0 <HAL_ADC_ConfigChannel+0x54>
 80012ec:	2302      	movs	r3, #2
 80012ee:	e0bb      	b.n	8001468 <HAL_ADC_ConfigChannel+0x1cc>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2234      	movs	r2, #52	; 0x34
 80012f4:	2101      	movs	r1, #1
 80012f6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	2204      	movs	r2, #4
 8001300:	4013      	ands	r3, r2
 8001302:	d000      	beq.n	8001306 <HAL_ADC_ConfigChannel+0x6a>
 8001304:	e09f      	b.n	8001446 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	4a59      	ldr	r2, [pc, #356]	; (8001470 <HAL_ADC_ConfigChannel+0x1d4>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d100      	bne.n	8001312 <HAL_ADC_ConfigChannel+0x76>
 8001310:	e077      	b.n	8001402 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2201      	movs	r2, #1
 800131e:	409a      	lsls	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	430a      	orrs	r2, r1
 8001326:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800132c:	2380      	movs	r3, #128	; 0x80
 800132e:	055b      	lsls	r3, r3, #21
 8001330:	429a      	cmp	r2, r3
 8001332:	d037      	beq.n	80013a4 <HAL_ADC_ConfigChannel+0x108>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001338:	2b01      	cmp	r3, #1
 800133a:	d033      	beq.n	80013a4 <HAL_ADC_ConfigChannel+0x108>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001340:	2b02      	cmp	r3, #2
 8001342:	d02f      	beq.n	80013a4 <HAL_ADC_ConfigChannel+0x108>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001348:	2b03      	cmp	r3, #3
 800134a:	d02b      	beq.n	80013a4 <HAL_ADC_ConfigChannel+0x108>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001350:	2b04      	cmp	r3, #4
 8001352:	d027      	beq.n	80013a4 <HAL_ADC_ConfigChannel+0x108>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001358:	2b05      	cmp	r3, #5
 800135a:	d023      	beq.n	80013a4 <HAL_ADC_ConfigChannel+0x108>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001360:	2b06      	cmp	r3, #6
 8001362:	d01f      	beq.n	80013a4 <HAL_ADC_ConfigChannel+0x108>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001368:	2b07      	cmp	r3, #7
 800136a:	d01b      	beq.n	80013a4 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	695b      	ldr	r3, [r3, #20]
 8001376:	2107      	movs	r1, #7
 8001378:	400b      	ands	r3, r1
 800137a:	429a      	cmp	r2, r3
 800137c:	d012      	beq.n	80013a4 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	695a      	ldr	r2, [r3, #20]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2107      	movs	r1, #7
 800138a:	438a      	bics	r2, r1
 800138c:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	6959      	ldr	r1, [r3, #20]
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	2207      	movs	r2, #7
 800139a:	401a      	ands	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	430a      	orrs	r2, r1
 80013a2:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2b10      	cmp	r3, #16
 80013aa:	d003      	beq.n	80013b4 <HAL_ADC_ConfigChannel+0x118>
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b11      	cmp	r3, #17
 80013b2:	d152      	bne.n	800145a <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80013b4:	4b2f      	ldr	r3, [pc, #188]	; (8001474 <HAL_ADC_ConfigChannel+0x1d8>)
 80013b6:	6819      	ldr	r1, [r3, #0]
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b10      	cmp	r3, #16
 80013be:	d102      	bne.n	80013c6 <HAL_ADC_ConfigChannel+0x12a>
 80013c0:	2380      	movs	r3, #128	; 0x80
 80013c2:	041b      	lsls	r3, r3, #16
 80013c4:	e001      	b.n	80013ca <HAL_ADC_ConfigChannel+0x12e>
 80013c6:	2380      	movs	r3, #128	; 0x80
 80013c8:	03db      	lsls	r3, r3, #15
 80013ca:	4a2a      	ldr	r2, [pc, #168]	; (8001474 <HAL_ADC_ConfigChannel+0x1d8>)
 80013cc:	430b      	orrs	r3, r1
 80013ce:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2b10      	cmp	r3, #16
 80013d6:	d140      	bne.n	800145a <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013d8:	4b27      	ldr	r3, [pc, #156]	; (8001478 <HAL_ADC_ConfigChannel+0x1dc>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4927      	ldr	r1, [pc, #156]	; (800147c <HAL_ADC_ConfigChannel+0x1e0>)
 80013de:	0018      	movs	r0, r3
 80013e0:	f7fe fe92 	bl	8000108 <__udivsi3>
 80013e4:	0003      	movs	r3, r0
 80013e6:	001a      	movs	r2, r3
 80013e8:	0013      	movs	r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	189b      	adds	r3, r3, r2
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013f2:	e002      	b.n	80013fa <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	3b01      	subs	r3, #1
 80013f8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d1f9      	bne.n	80013f4 <HAL_ADC_ConfigChannel+0x158>
 8001400:	e02b      	b.n	800145a <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	2101      	movs	r1, #1
 800140e:	4099      	lsls	r1, r3
 8001410:	000b      	movs	r3, r1
 8001412:	43d9      	mvns	r1, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	400a      	ands	r2, r1
 800141a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2b10      	cmp	r3, #16
 8001422:	d003      	beq.n	800142c <HAL_ADC_ConfigChannel+0x190>
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b11      	cmp	r3, #17
 800142a:	d116      	bne.n	800145a <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800142c:	4b11      	ldr	r3, [pc, #68]	; (8001474 <HAL_ADC_ConfigChannel+0x1d8>)
 800142e:	6819      	ldr	r1, [r3, #0]
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2b10      	cmp	r3, #16
 8001436:	d101      	bne.n	800143c <HAL_ADC_ConfigChannel+0x1a0>
 8001438:	4a11      	ldr	r2, [pc, #68]	; (8001480 <HAL_ADC_ConfigChannel+0x1e4>)
 800143a:	e000      	b.n	800143e <HAL_ADC_ConfigChannel+0x1a2>
 800143c:	4a11      	ldr	r2, [pc, #68]	; (8001484 <HAL_ADC_ConfigChannel+0x1e8>)
 800143e:	4b0d      	ldr	r3, [pc, #52]	; (8001474 <HAL_ADC_ConfigChannel+0x1d8>)
 8001440:	400a      	ands	r2, r1
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	e009      	b.n	800145a <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800144a:	2220      	movs	r2, #32
 800144c:	431a      	orrs	r2, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001452:	230f      	movs	r3, #15
 8001454:	18fb      	adds	r3, r7, r3
 8001456:	2201      	movs	r2, #1
 8001458:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2234      	movs	r2, #52	; 0x34
 800145e:	2100      	movs	r1, #0
 8001460:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001462:	230f      	movs	r3, #15
 8001464:	18fb      	adds	r3, r7, r3
 8001466:	781b      	ldrb	r3, [r3, #0]
}
 8001468:	0018      	movs	r0, r3
 800146a:	46bd      	mov	sp, r7
 800146c:	b004      	add	sp, #16
 800146e:	bd80      	pop	{r7, pc}
 8001470:	00001001 	.word	0x00001001
 8001474:	40012708 	.word	0x40012708
 8001478:	2000003c 	.word	0x2000003c
 800147c:	000f4240 	.word	0x000f4240
 8001480:	ff7fffff 	.word	0xff7fffff
 8001484:	ffbfffff 	.word	0xffbfffff

08001488 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001490:	2300      	movs	r3, #0
 8001492:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001494:	2300      	movs	r3, #0
 8001496:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	2203      	movs	r2, #3
 80014a0:	4013      	ands	r3, r2
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d112      	bne.n	80014cc <ADC_Enable+0x44>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2201      	movs	r2, #1
 80014ae:	4013      	ands	r3, r2
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d009      	beq.n	80014c8 <ADC_Enable+0x40>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	68da      	ldr	r2, [r3, #12]
 80014ba:	2380      	movs	r3, #128	; 0x80
 80014bc:	021b      	lsls	r3, r3, #8
 80014be:	401a      	ands	r2, r3
 80014c0:	2380      	movs	r3, #128	; 0x80
 80014c2:	021b      	lsls	r3, r3, #8
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d101      	bne.n	80014cc <ADC_Enable+0x44>
 80014c8:	2301      	movs	r3, #1
 80014ca:	e000      	b.n	80014ce <ADC_Enable+0x46>
 80014cc:	2300      	movs	r3, #0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d152      	bne.n	8001578 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	4a2a      	ldr	r2, [pc, #168]	; (8001584 <ADC_Enable+0xfc>)
 80014da:	4013      	ands	r3, r2
 80014dc:	d00d      	beq.n	80014fa <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014e2:	2210      	movs	r2, #16
 80014e4:	431a      	orrs	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014ee:	2201      	movs	r2, #1
 80014f0:	431a      	orrs	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e03f      	b.n	800157a <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	689a      	ldr	r2, [r3, #8]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2101      	movs	r1, #1
 8001506:	430a      	orrs	r2, r1
 8001508:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800150a:	4b1f      	ldr	r3, [pc, #124]	; (8001588 <ADC_Enable+0x100>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	491f      	ldr	r1, [pc, #124]	; (800158c <ADC_Enable+0x104>)
 8001510:	0018      	movs	r0, r3
 8001512:	f7fe fdf9 	bl	8000108 <__udivsi3>
 8001516:	0003      	movs	r3, r0
 8001518:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800151a:	e002      	b.n	8001522 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	3b01      	subs	r3, #1
 8001520:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d1f9      	bne.n	800151c <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001528:	f7ff fcb0 	bl	8000e8c <HAL_GetTick>
 800152c:	0003      	movs	r3, r0
 800152e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001530:	e01b      	b.n	800156a <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001532:	f7ff fcab 	bl	8000e8c <HAL_GetTick>
 8001536:	0002      	movs	r2, r0
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d914      	bls.n	800156a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2201      	movs	r2, #1
 8001548:	4013      	ands	r3, r2
 800154a:	2b01      	cmp	r3, #1
 800154c:	d00d      	beq.n	800156a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001552:	2210      	movs	r2, #16
 8001554:	431a      	orrs	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800155e:	2201      	movs	r2, #1
 8001560:	431a      	orrs	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e007      	b.n	800157a <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2201      	movs	r2, #1
 8001572:	4013      	ands	r3, r2
 8001574:	2b01      	cmp	r3, #1
 8001576:	d1dc      	bne.n	8001532 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001578:	2300      	movs	r3, #0
}
 800157a:	0018      	movs	r0, r3
 800157c:	46bd      	mov	sp, r7
 800157e:	b004      	add	sp, #16
 8001580:	bd80      	pop	{r7, pc}
 8001582:	46c0      	nop			; (mov r8, r8)
 8001584:	80000017 	.word	0x80000017
 8001588:	2000003c 	.word	0x2000003c
 800158c:	000f4240 	.word	0x000f4240

08001590 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015a2:	2250      	movs	r2, #80	; 0x50
 80015a4:	4013      	ands	r3, r2
 80015a6:	d140      	bne.n	800162a <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015ac:	2280      	movs	r2, #128	; 0x80
 80015ae:	0092      	lsls	r2, r2, #2
 80015b0:	431a      	orrs	r2, r3
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	68da      	ldr	r2, [r3, #12]
 80015bc:	23c0      	movs	r3, #192	; 0xc0
 80015be:	011b      	lsls	r3, r3, #4
 80015c0:	4013      	ands	r3, r2
 80015c2:	d12d      	bne.n	8001620 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d129      	bne.n	8001620 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2208      	movs	r2, #8
 80015d4:	4013      	ands	r3, r2
 80015d6:	2b08      	cmp	r3, #8
 80015d8:	d122      	bne.n	8001620 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	2204      	movs	r2, #4
 80015e2:	4013      	ands	r3, r2
 80015e4:	d110      	bne.n	8001608 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	685a      	ldr	r2, [r3, #4]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	210c      	movs	r1, #12
 80015f2:	438a      	bics	r2, r1
 80015f4:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015fa:	4a11      	ldr	r2, [pc, #68]	; (8001640 <ADC_DMAConvCplt+0xb0>)
 80015fc:	4013      	ands	r3, r2
 80015fe:	2201      	movs	r2, #1
 8001600:	431a      	orrs	r2, r3
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	639a      	str	r2, [r3, #56]	; 0x38
 8001606:	e00b      	b.n	8001620 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800160c:	2220      	movs	r2, #32
 800160e:	431a      	orrs	r2, r3
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001618:	2201      	movs	r2, #1
 800161a:	431a      	orrs	r2, r3
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	0018      	movs	r0, r3
 8001624:	f7ff fe22 	bl	800126c <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8001628:	e005      	b.n	8001636 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	0010      	movs	r0, r2
 8001634:	4798      	blx	r3
}
 8001636:	46c0      	nop			; (mov r8, r8)
 8001638:	46bd      	mov	sp, r7
 800163a:	b004      	add	sp, #16
 800163c:	bd80      	pop	{r7, pc}
 800163e:	46c0      	nop			; (mov r8, r8)
 8001640:	fffffefe 	.word	0xfffffefe

08001644 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b084      	sub	sp, #16
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001650:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	0018      	movs	r0, r3
 8001656:	f7ff fe11 	bl	800127c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800165a:	46c0      	nop			; (mov r8, r8)
 800165c:	46bd      	mov	sp, r7
 800165e:	b004      	add	sp, #16
 8001660:	bd80      	pop	{r7, pc}

08001662 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b084      	sub	sp, #16
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001674:	2240      	movs	r2, #64	; 0x40
 8001676:	431a      	orrs	r2, r3
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001680:	2204      	movs	r2, #4
 8001682:	431a      	orrs	r2, r3
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc); 
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	0018      	movs	r0, r3
 800168c:	f7ff fdfe 	bl	800128c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001690:	46c0      	nop			; (mov r8, r8)
 8001692:	46bd      	mov	sp, r7
 8001694:	b004      	add	sp, #16
 8001696:	bd80      	pop	{r7, pc}

08001698 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	0002      	movs	r2, r0
 80016a0:	1dfb      	adds	r3, r7, #7
 80016a2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80016a4:	1dfb      	adds	r3, r7, #7
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b7f      	cmp	r3, #127	; 0x7f
 80016aa:	d809      	bhi.n	80016c0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ac:	1dfb      	adds	r3, r7, #7
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	001a      	movs	r2, r3
 80016b2:	231f      	movs	r3, #31
 80016b4:	401a      	ands	r2, r3
 80016b6:	4b04      	ldr	r3, [pc, #16]	; (80016c8 <__NVIC_EnableIRQ+0x30>)
 80016b8:	2101      	movs	r1, #1
 80016ba:	4091      	lsls	r1, r2
 80016bc:	000a      	movs	r2, r1
 80016be:	601a      	str	r2, [r3, #0]
  }
}
 80016c0:	46c0      	nop			; (mov r8, r8)
 80016c2:	46bd      	mov	sp, r7
 80016c4:	b002      	add	sp, #8
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	e000e100 	.word	0xe000e100

080016cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016cc:	b590      	push	{r4, r7, lr}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	0002      	movs	r2, r0
 80016d4:	6039      	str	r1, [r7, #0]
 80016d6:	1dfb      	adds	r3, r7, #7
 80016d8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80016da:	1dfb      	adds	r3, r7, #7
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b7f      	cmp	r3, #127	; 0x7f
 80016e0:	d828      	bhi.n	8001734 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016e2:	4a2f      	ldr	r2, [pc, #188]	; (80017a0 <__NVIC_SetPriority+0xd4>)
 80016e4:	1dfb      	adds	r3, r7, #7
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	b25b      	sxtb	r3, r3
 80016ea:	089b      	lsrs	r3, r3, #2
 80016ec:	33c0      	adds	r3, #192	; 0xc0
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	589b      	ldr	r3, [r3, r2]
 80016f2:	1dfa      	adds	r2, r7, #7
 80016f4:	7812      	ldrb	r2, [r2, #0]
 80016f6:	0011      	movs	r1, r2
 80016f8:	2203      	movs	r2, #3
 80016fa:	400a      	ands	r2, r1
 80016fc:	00d2      	lsls	r2, r2, #3
 80016fe:	21ff      	movs	r1, #255	; 0xff
 8001700:	4091      	lsls	r1, r2
 8001702:	000a      	movs	r2, r1
 8001704:	43d2      	mvns	r2, r2
 8001706:	401a      	ands	r2, r3
 8001708:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	019b      	lsls	r3, r3, #6
 800170e:	22ff      	movs	r2, #255	; 0xff
 8001710:	401a      	ands	r2, r3
 8001712:	1dfb      	adds	r3, r7, #7
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	0018      	movs	r0, r3
 8001718:	2303      	movs	r3, #3
 800171a:	4003      	ands	r3, r0
 800171c:	00db      	lsls	r3, r3, #3
 800171e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001720:	481f      	ldr	r0, [pc, #124]	; (80017a0 <__NVIC_SetPriority+0xd4>)
 8001722:	1dfb      	adds	r3, r7, #7
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	b25b      	sxtb	r3, r3
 8001728:	089b      	lsrs	r3, r3, #2
 800172a:	430a      	orrs	r2, r1
 800172c:	33c0      	adds	r3, #192	; 0xc0
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001732:	e031      	b.n	8001798 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001734:	4a1b      	ldr	r2, [pc, #108]	; (80017a4 <__NVIC_SetPriority+0xd8>)
 8001736:	1dfb      	adds	r3, r7, #7
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	0019      	movs	r1, r3
 800173c:	230f      	movs	r3, #15
 800173e:	400b      	ands	r3, r1
 8001740:	3b08      	subs	r3, #8
 8001742:	089b      	lsrs	r3, r3, #2
 8001744:	3306      	adds	r3, #6
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	18d3      	adds	r3, r2, r3
 800174a:	3304      	adds	r3, #4
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	1dfa      	adds	r2, r7, #7
 8001750:	7812      	ldrb	r2, [r2, #0]
 8001752:	0011      	movs	r1, r2
 8001754:	2203      	movs	r2, #3
 8001756:	400a      	ands	r2, r1
 8001758:	00d2      	lsls	r2, r2, #3
 800175a:	21ff      	movs	r1, #255	; 0xff
 800175c:	4091      	lsls	r1, r2
 800175e:	000a      	movs	r2, r1
 8001760:	43d2      	mvns	r2, r2
 8001762:	401a      	ands	r2, r3
 8001764:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	019b      	lsls	r3, r3, #6
 800176a:	22ff      	movs	r2, #255	; 0xff
 800176c:	401a      	ands	r2, r3
 800176e:	1dfb      	adds	r3, r7, #7
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	0018      	movs	r0, r3
 8001774:	2303      	movs	r3, #3
 8001776:	4003      	ands	r3, r0
 8001778:	00db      	lsls	r3, r3, #3
 800177a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800177c:	4809      	ldr	r0, [pc, #36]	; (80017a4 <__NVIC_SetPriority+0xd8>)
 800177e:	1dfb      	adds	r3, r7, #7
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	001c      	movs	r4, r3
 8001784:	230f      	movs	r3, #15
 8001786:	4023      	ands	r3, r4
 8001788:	3b08      	subs	r3, #8
 800178a:	089b      	lsrs	r3, r3, #2
 800178c:	430a      	orrs	r2, r1
 800178e:	3306      	adds	r3, #6
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	18c3      	adds	r3, r0, r3
 8001794:	3304      	adds	r3, #4
 8001796:	601a      	str	r2, [r3, #0]
}
 8001798:	46c0      	nop			; (mov r8, r8)
 800179a:	46bd      	mov	sp, r7
 800179c:	b003      	add	sp, #12
 800179e:	bd90      	pop	{r4, r7, pc}
 80017a0:	e000e100 	.word	0xe000e100
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	1e5a      	subs	r2, r3, #1
 80017b4:	2380      	movs	r3, #128	; 0x80
 80017b6:	045b      	lsls	r3, r3, #17
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d301      	bcc.n	80017c0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017bc:	2301      	movs	r3, #1
 80017be:	e010      	b.n	80017e2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017c0:	4b0a      	ldr	r3, [pc, #40]	; (80017ec <SysTick_Config+0x44>)
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	3a01      	subs	r2, #1
 80017c6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017c8:	2301      	movs	r3, #1
 80017ca:	425b      	negs	r3, r3
 80017cc:	2103      	movs	r1, #3
 80017ce:	0018      	movs	r0, r3
 80017d0:	f7ff ff7c 	bl	80016cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017d4:	4b05      	ldr	r3, [pc, #20]	; (80017ec <SysTick_Config+0x44>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017da:	4b04      	ldr	r3, [pc, #16]	; (80017ec <SysTick_Config+0x44>)
 80017dc:	2207      	movs	r2, #7
 80017de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	0018      	movs	r0, r3
 80017e4:	46bd      	mov	sp, r7
 80017e6:	b002      	add	sp, #8
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	46c0      	nop			; (mov r8, r8)
 80017ec:	e000e010 	.word	0xe000e010

080017f0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60b9      	str	r1, [r7, #8]
 80017f8:	607a      	str	r2, [r7, #4]
 80017fa:	210f      	movs	r1, #15
 80017fc:	187b      	adds	r3, r7, r1
 80017fe:	1c02      	adds	r2, r0, #0
 8001800:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001802:	68ba      	ldr	r2, [r7, #8]
 8001804:	187b      	adds	r3, r7, r1
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	b25b      	sxtb	r3, r3
 800180a:	0011      	movs	r1, r2
 800180c:	0018      	movs	r0, r3
 800180e:	f7ff ff5d 	bl	80016cc <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8001812:	46c0      	nop			; (mov r8, r8)
 8001814:	46bd      	mov	sp, r7
 8001816:	b004      	add	sp, #16
 8001818:	bd80      	pop	{r7, pc}

0800181a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b082      	sub	sp, #8
 800181e:	af00      	add	r7, sp, #0
 8001820:	0002      	movs	r2, r0
 8001822:	1dfb      	adds	r3, r7, #7
 8001824:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001826:	1dfb      	adds	r3, r7, #7
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	b25b      	sxtb	r3, r3
 800182c:	0018      	movs	r0, r3
 800182e:	f7ff ff33 	bl	8001698 <__NVIC_EnableIRQ>
}
 8001832:	46c0      	nop			; (mov r8, r8)
 8001834:	46bd      	mov	sp, r7
 8001836:	b002      	add	sp, #8
 8001838:	bd80      	pop	{r7, pc}

0800183a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b082      	sub	sp, #8
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	0018      	movs	r0, r3
 8001846:	f7ff ffaf 	bl	80017a8 <SysTick_Config>
 800184a:	0003      	movs	r3, r0
}
 800184c:	0018      	movs	r0, r3
 800184e:	46bd      	mov	sp, r7
 8001850:	b002      	add	sp, #8
 8001852:	bd80      	pop	{r7, pc}

08001854 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800185c:	2300      	movs	r3, #0
 800185e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d101      	bne.n	800186a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e036      	b.n	80018d8 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2221      	movs	r2, #33	; 0x21
 800186e:	2102      	movs	r1, #2
 8001870:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	4a18      	ldr	r2, [pc, #96]	; (80018e0 <HAL_DMA_Init+0x8c>)
 800187e:	4013      	ands	r3, r2
 8001880:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800188a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001896:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	695b      	ldr	r3, [r3, #20]
 800189c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	69db      	ldr	r3, [r3, #28]
 80018a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80018aa:	68fa      	ldr	r2, [r7, #12]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	68fa      	ldr	r2, [r7, #12]
 80018b6:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	0018      	movs	r0, r3
 80018bc:	f000 f946 	bl	8001b4c <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2221      	movs	r2, #33	; 0x21
 80018ca:	2101      	movs	r1, #1
 80018cc:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2220      	movs	r2, #32
 80018d2:	2100      	movs	r1, #0
 80018d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80018d6:	2300      	movs	r3, #0
}
 80018d8:	0018      	movs	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	b004      	add	sp, #16
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	ffffc00f 	.word	0xffffc00f

080018e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
 80018f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018f2:	2317      	movs	r3, #23
 80018f4:	18fb      	adds	r3, r7, r3
 80018f6:	2200      	movs	r2, #0
 80018f8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2220      	movs	r2, #32
 80018fe:	5c9b      	ldrb	r3, [r3, r2]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d101      	bne.n	8001908 <HAL_DMA_Start_IT+0x24>
 8001904:	2302      	movs	r3, #2
 8001906:	e04f      	b.n	80019a8 <HAL_DMA_Start_IT+0xc4>
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2220      	movs	r2, #32
 800190c:	2101      	movs	r1, #1
 800190e:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2221      	movs	r2, #33	; 0x21
 8001914:	5c9b      	ldrb	r3, [r3, r2]
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b01      	cmp	r3, #1
 800191a:	d13a      	bne.n	8001992 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2221      	movs	r2, #33	; 0x21
 8001920:	2102      	movs	r1, #2
 8001922:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2200      	movs	r2, #0
 8001928:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2101      	movs	r1, #1
 8001936:	438a      	bics	r2, r1
 8001938:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	68b9      	ldr	r1, [r7, #8]
 8001940:	68f8      	ldr	r0, [r7, #12]
 8001942:	f000 f8d7 	bl	8001af4 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194a:	2b00      	cmp	r3, #0
 800194c:	d008      	beq.n	8001960 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	210e      	movs	r1, #14
 800195a:	430a      	orrs	r2, r1
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	e00f      	b.n	8001980 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	210a      	movs	r1, #10
 800196c:	430a      	orrs	r2, r1
 800196e:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2104      	movs	r1, #4
 800197c:	438a      	bics	r2, r1
 800197e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2101      	movs	r1, #1
 800198c:	430a      	orrs	r2, r1
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	e007      	b.n	80019a2 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2220      	movs	r2, #32
 8001996:	2100      	movs	r1, #0
 8001998:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800199a:	2317      	movs	r3, #23
 800199c:	18fb      	adds	r3, r7, r3
 800199e:	2202      	movs	r2, #2
 80019a0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80019a2:	2317      	movs	r3, #23
 80019a4:	18fb      	adds	r3, r7, r3
 80019a6:	781b      	ldrb	r3, [r3, #0]
}
 80019a8:	0018      	movs	r0, r3
 80019aa:	46bd      	mov	sp, r7
 80019ac:	b006      	add	sp, #24
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019cc:	2204      	movs	r2, #4
 80019ce:	409a      	lsls	r2, r3
 80019d0:	0013      	movs	r3, r2
 80019d2:	68fa      	ldr	r2, [r7, #12]
 80019d4:	4013      	ands	r3, r2
 80019d6:	d024      	beq.n	8001a22 <HAL_DMA_IRQHandler+0x72>
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	2204      	movs	r2, #4
 80019dc:	4013      	ands	r3, r2
 80019de:	d020      	beq.n	8001a22 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2220      	movs	r2, #32
 80019e8:	4013      	ands	r3, r2
 80019ea:	d107      	bne.n	80019fc <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2104      	movs	r1, #4
 80019f8:	438a      	bics	r2, r1
 80019fa:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a04:	2104      	movs	r1, #4
 8001a06:	4091      	lsls	r1, r2
 8001a08:	000a      	movs	r2, r1
 8001a0a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d100      	bne.n	8001a16 <HAL_DMA_IRQHandler+0x66>
 8001a14:	e06a      	b.n	8001aec <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	0010      	movs	r0, r2
 8001a1e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001a20:	e064      	b.n	8001aec <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a26:	2202      	movs	r2, #2
 8001a28:	409a      	lsls	r2, r3
 8001a2a:	0013      	movs	r3, r2
 8001a2c:	68fa      	ldr	r2, [r7, #12]
 8001a2e:	4013      	ands	r3, r2
 8001a30:	d02b      	beq.n	8001a8a <HAL_DMA_IRQHandler+0xda>
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	2202      	movs	r2, #2
 8001a36:	4013      	ands	r3, r2
 8001a38:	d027      	beq.n	8001a8a <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2220      	movs	r2, #32
 8001a42:	4013      	ands	r3, r2
 8001a44:	d10b      	bne.n	8001a5e <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	210a      	movs	r1, #10
 8001a52:	438a      	bics	r2, r1
 8001a54:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2221      	movs	r2, #33	; 0x21
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a66:	2102      	movs	r1, #2
 8001a68:	4091      	lsls	r1, r2
 8001a6a:	000a      	movs	r2, r1
 8001a6c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2220      	movs	r2, #32
 8001a72:	2100      	movs	r1, #0
 8001a74:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d036      	beq.n	8001aec <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	0010      	movs	r0, r2
 8001a86:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001a88:	e030      	b.n	8001aec <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8e:	2208      	movs	r2, #8
 8001a90:	409a      	lsls	r2, r3
 8001a92:	0013      	movs	r3, r2
 8001a94:	68fa      	ldr	r2, [r7, #12]
 8001a96:	4013      	ands	r3, r2
 8001a98:	d028      	beq.n	8001aec <HAL_DMA_IRQHandler+0x13c>
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	2208      	movs	r2, #8
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	d024      	beq.n	8001aec <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	210e      	movs	r1, #14
 8001aae:	438a      	bics	r2, r1
 8001ab0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aba:	2101      	movs	r1, #1
 8001abc:	4091      	lsls	r1, r2
 8001abe:	000a      	movs	r2, r1
 8001ac0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2221      	movs	r2, #33	; 0x21
 8001acc:	2101      	movs	r1, #1
 8001ace:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2220      	movs	r2, #32
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d005      	beq.n	8001aec <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	0010      	movs	r0, r2
 8001ae8:	4798      	blx	r3
    }
  }
}
 8001aea:	e7ff      	b.n	8001aec <HAL_DMA_IRQHandler+0x13c>
 8001aec:	46c0      	nop			; (mov r8, r8)
 8001aee:	46bd      	mov	sp, r7
 8001af0:	b004      	add	sp, #16
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	607a      	str	r2, [r7, #4]
 8001b00:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b0a:	2101      	movs	r1, #1
 8001b0c:	4091      	lsls	r1, r2
 8001b0e:	000a      	movs	r2, r1
 8001b10:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	683a      	ldr	r2, [r7, #0]
 8001b18:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b10      	cmp	r3, #16
 8001b20:	d108      	bne.n	8001b34 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	68ba      	ldr	r2, [r7, #8]
 8001b30:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b32:	e007      	b.n	8001b44 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	68ba      	ldr	r2, [r7, #8]
 8001b3a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	60da      	str	r2, [r3, #12]
}
 8001b44:	46c0      	nop			; (mov r8, r8)
 8001b46:	46bd      	mov	sp, r7
 8001b48:	b004      	add	sp, #16
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a08      	ldr	r2, [pc, #32]	; (8001b7c <DMA_CalcBaseAndBitshift+0x30>)
 8001b5a:	4694      	mov	ip, r2
 8001b5c:	4463      	add	r3, ip
 8001b5e:	2114      	movs	r1, #20
 8001b60:	0018      	movs	r0, r3
 8001b62:	f7fe fad1 	bl	8000108 <__udivsi3>
 8001b66:	0003      	movs	r3, r0
 8001b68:	009a      	lsls	r2, r3, #2
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a03      	ldr	r2, [pc, #12]	; (8001b80 <DMA_CalcBaseAndBitshift+0x34>)
 8001b72:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8001b74:	46c0      	nop			; (mov r8, r8)
 8001b76:	46bd      	mov	sp, r7
 8001b78:	b002      	add	sp, #8
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	bffdfff8 	.word	0xbffdfff8
 8001b80:	40020000 	.word	0x40020000

08001b84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b92:	e14f      	b.n	8001e34 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2101      	movs	r1, #1
 8001b9a:	697a      	ldr	r2, [r7, #20]
 8001b9c:	4091      	lsls	r1, r2
 8001b9e:	000a      	movs	r2, r1
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d100      	bne.n	8001bac <HAL_GPIO_Init+0x28>
 8001baa:	e140      	b.n	8001e2e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	2203      	movs	r2, #3
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d005      	beq.n	8001bc4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	2203      	movs	r2, #3
 8001bbe:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d130      	bne.n	8001c26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	2203      	movs	r2, #3
 8001bd0:	409a      	lsls	r2, r3
 8001bd2:	0013      	movs	r3, r2
 8001bd4:	43da      	mvns	r2, r3
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	68da      	ldr	r2, [r3, #12]
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	409a      	lsls	r2, r3
 8001be6:	0013      	movs	r3, r2
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	409a      	lsls	r2, r3
 8001c00:	0013      	movs	r3, r2
 8001c02:	43da      	mvns	r2, r3
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	4013      	ands	r3, r2
 8001c08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	091b      	lsrs	r3, r3, #4
 8001c10:	2201      	movs	r2, #1
 8001c12:	401a      	ands	r2, r3
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	409a      	lsls	r2, r3
 8001c18:	0013      	movs	r3, r2
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	2203      	movs	r2, #3
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	2b03      	cmp	r3, #3
 8001c30:	d017      	beq.n	8001c62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	2203      	movs	r2, #3
 8001c3e:	409a      	lsls	r2, r3
 8001c40:	0013      	movs	r3, r2
 8001c42:	43da      	mvns	r2, r3
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	4013      	ands	r3, r2
 8001c48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	689a      	ldr	r2, [r3, #8]
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	409a      	lsls	r2, r3
 8001c54:	0013      	movs	r3, r2
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	2203      	movs	r2, #3
 8001c68:	4013      	ands	r3, r2
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d123      	bne.n	8001cb6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	08da      	lsrs	r2, r3, #3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	3208      	adds	r2, #8
 8001c76:	0092      	lsls	r2, r2, #2
 8001c78:	58d3      	ldr	r3, [r2, r3]
 8001c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	2207      	movs	r2, #7
 8001c80:	4013      	ands	r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	220f      	movs	r2, #15
 8001c86:	409a      	lsls	r2, r3
 8001c88:	0013      	movs	r3, r2
 8001c8a:	43da      	mvns	r2, r3
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	691a      	ldr	r2, [r3, #16]
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	2107      	movs	r1, #7
 8001c9a:	400b      	ands	r3, r1
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	409a      	lsls	r2, r3
 8001ca0:	0013      	movs	r3, r2
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	08da      	lsrs	r2, r3, #3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	3208      	adds	r2, #8
 8001cb0:	0092      	lsls	r2, r2, #2
 8001cb2:	6939      	ldr	r1, [r7, #16]
 8001cb4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	2203      	movs	r2, #3
 8001cc2:	409a      	lsls	r2, r3
 8001cc4:	0013      	movs	r3, r2
 8001cc6:	43da      	mvns	r2, r3
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	2203      	movs	r2, #3
 8001cd4:	401a      	ands	r2, r3
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	409a      	lsls	r2, r3
 8001cdc:	0013      	movs	r3, r2
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685a      	ldr	r2, [r3, #4]
 8001cee:	23c0      	movs	r3, #192	; 0xc0
 8001cf0:	029b      	lsls	r3, r3, #10
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	d100      	bne.n	8001cf8 <HAL_GPIO_Init+0x174>
 8001cf6:	e09a      	b.n	8001e2e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cf8:	4b54      	ldr	r3, [pc, #336]	; (8001e4c <HAL_GPIO_Init+0x2c8>)
 8001cfa:	699a      	ldr	r2, [r3, #24]
 8001cfc:	4b53      	ldr	r3, [pc, #332]	; (8001e4c <HAL_GPIO_Init+0x2c8>)
 8001cfe:	2101      	movs	r1, #1
 8001d00:	430a      	orrs	r2, r1
 8001d02:	619a      	str	r2, [r3, #24]
 8001d04:	4b51      	ldr	r3, [pc, #324]	; (8001e4c <HAL_GPIO_Init+0x2c8>)
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	60bb      	str	r3, [r7, #8]
 8001d0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001d10:	4a4f      	ldr	r2, [pc, #316]	; (8001e50 <HAL_GPIO_Init+0x2cc>)
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	089b      	lsrs	r3, r3, #2
 8001d16:	3302      	adds	r3, #2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	589b      	ldr	r3, [r3, r2]
 8001d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	2203      	movs	r2, #3
 8001d22:	4013      	ands	r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	220f      	movs	r2, #15
 8001d28:	409a      	lsls	r2, r3
 8001d2a:	0013      	movs	r3, r2
 8001d2c:	43da      	mvns	r2, r3
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	4013      	ands	r3, r2
 8001d32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d34:	687a      	ldr	r2, [r7, #4]
 8001d36:	2390      	movs	r3, #144	; 0x90
 8001d38:	05db      	lsls	r3, r3, #23
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d013      	beq.n	8001d66 <HAL_GPIO_Init+0x1e2>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a44      	ldr	r2, [pc, #272]	; (8001e54 <HAL_GPIO_Init+0x2d0>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d00d      	beq.n	8001d62 <HAL_GPIO_Init+0x1de>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a43      	ldr	r2, [pc, #268]	; (8001e58 <HAL_GPIO_Init+0x2d4>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d007      	beq.n	8001d5e <HAL_GPIO_Init+0x1da>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a42      	ldr	r2, [pc, #264]	; (8001e5c <HAL_GPIO_Init+0x2d8>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d101      	bne.n	8001d5a <HAL_GPIO_Init+0x1d6>
 8001d56:	2303      	movs	r3, #3
 8001d58:	e006      	b.n	8001d68 <HAL_GPIO_Init+0x1e4>
 8001d5a:	2305      	movs	r3, #5
 8001d5c:	e004      	b.n	8001d68 <HAL_GPIO_Init+0x1e4>
 8001d5e:	2302      	movs	r3, #2
 8001d60:	e002      	b.n	8001d68 <HAL_GPIO_Init+0x1e4>
 8001d62:	2301      	movs	r3, #1
 8001d64:	e000      	b.n	8001d68 <HAL_GPIO_Init+0x1e4>
 8001d66:	2300      	movs	r3, #0
 8001d68:	697a      	ldr	r2, [r7, #20]
 8001d6a:	2103      	movs	r1, #3
 8001d6c:	400a      	ands	r2, r1
 8001d6e:	0092      	lsls	r2, r2, #2
 8001d70:	4093      	lsls	r3, r2
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d78:	4935      	ldr	r1, [pc, #212]	; (8001e50 <HAL_GPIO_Init+0x2cc>)
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	089b      	lsrs	r3, r3, #2
 8001d7e:	3302      	adds	r3, #2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d86:	4b36      	ldr	r3, [pc, #216]	; (8001e60 <HAL_GPIO_Init+0x2dc>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	43da      	mvns	r2, r3
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	4013      	ands	r3, r2
 8001d94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685a      	ldr	r2, [r3, #4]
 8001d9a:	2380      	movs	r3, #128	; 0x80
 8001d9c:	035b      	lsls	r3, r3, #13
 8001d9e:	4013      	ands	r3, r2
 8001da0:	d003      	beq.n	8001daa <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001daa:	4b2d      	ldr	r3, [pc, #180]	; (8001e60 <HAL_GPIO_Init+0x2dc>)
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001db0:	4b2b      	ldr	r3, [pc, #172]	; (8001e60 <HAL_GPIO_Init+0x2dc>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	43da      	mvns	r2, r3
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685a      	ldr	r2, [r3, #4]
 8001dc4:	2380      	movs	r3, #128	; 0x80
 8001dc6:	039b      	lsls	r3, r3, #14
 8001dc8:	4013      	ands	r3, r2
 8001dca:	d003      	beq.n	8001dd4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001dd4:	4b22      	ldr	r3, [pc, #136]	; (8001e60 <HAL_GPIO_Init+0x2dc>)
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001dda:	4b21      	ldr	r3, [pc, #132]	; (8001e60 <HAL_GPIO_Init+0x2dc>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	43da      	mvns	r2, r3
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	4013      	ands	r3, r2
 8001de8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685a      	ldr	r2, [r3, #4]
 8001dee:	2380      	movs	r3, #128	; 0x80
 8001df0:	029b      	lsls	r3, r3, #10
 8001df2:	4013      	ands	r3, r2
 8001df4:	d003      	beq.n	8001dfe <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001dfe:	4b18      	ldr	r3, [pc, #96]	; (8001e60 <HAL_GPIO_Init+0x2dc>)
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001e04:	4b16      	ldr	r3, [pc, #88]	; (8001e60 <HAL_GPIO_Init+0x2dc>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	43da      	mvns	r2, r3
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	4013      	ands	r3, r2
 8001e12:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685a      	ldr	r2, [r3, #4]
 8001e18:	2380      	movs	r3, #128	; 0x80
 8001e1a:	025b      	lsls	r3, r3, #9
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	d003      	beq.n	8001e28 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001e28:	4b0d      	ldr	r3, [pc, #52]	; (8001e60 <HAL_GPIO_Init+0x2dc>)
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	3301      	adds	r3, #1
 8001e32:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	40da      	lsrs	r2, r3
 8001e3c:	1e13      	subs	r3, r2, #0
 8001e3e:	d000      	beq.n	8001e42 <HAL_GPIO_Init+0x2be>
 8001e40:	e6a8      	b.n	8001b94 <HAL_GPIO_Init+0x10>
  } 
}
 8001e42:	46c0      	nop			; (mov r8, r8)
 8001e44:	46c0      	nop			; (mov r8, r8)
 8001e46:	46bd      	mov	sp, r7
 8001e48:	b006      	add	sp, #24
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40021000 	.word	0x40021000
 8001e50:	40010000 	.word	0x40010000
 8001e54:	48000400 	.word	0x48000400
 8001e58:	48000800 	.word	0x48000800
 8001e5c:	48000c00 	.word	0x48000c00
 8001e60:	40010400 	.word	0x40010400

08001e64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	0008      	movs	r0, r1
 8001e6e:	0011      	movs	r1, r2
 8001e70:	1cbb      	adds	r3, r7, #2
 8001e72:	1c02      	adds	r2, r0, #0
 8001e74:	801a      	strh	r2, [r3, #0]
 8001e76:	1c7b      	adds	r3, r7, #1
 8001e78:	1c0a      	adds	r2, r1, #0
 8001e7a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e7c:	1c7b      	adds	r3, r7, #1
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d004      	beq.n	8001e8e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e84:	1cbb      	adds	r3, r7, #2
 8001e86:	881a      	ldrh	r2, [r3, #0]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e8c:	e003      	b.n	8001e96 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e8e:	1cbb      	adds	r3, r7, #2
 8001e90:	881a      	ldrh	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e96:	46c0      	nop			; (mov r8, r8)
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	b002      	add	sp, #8
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b084      	sub	sp, #16
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
 8001ea6:	000a      	movs	r2, r1
 8001ea8:	1cbb      	adds	r3, r7, #2
 8001eaa:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	695b      	ldr	r3, [r3, #20]
 8001eb0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001eb2:	1cbb      	adds	r3, r7, #2
 8001eb4:	881b      	ldrh	r3, [r3, #0]
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	041a      	lsls	r2, r3, #16
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	1cb9      	adds	r1, r7, #2
 8001ec2:	8809      	ldrh	r1, [r1, #0]
 8001ec4:	400b      	ands	r3, r1
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	619a      	str	r2, [r3, #24]
}
 8001ecc:	46c0      	nop			; (mov r8, r8)
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	b004      	add	sp, #16
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b088      	sub	sp, #32
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e305      	b.n	80024f2 <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2201      	movs	r2, #1
 8001eec:	4013      	ands	r3, r2
 8001eee:	d100      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x1e>
 8001ef0:	e08d      	b.n	800200e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001ef2:	4bc5      	ldr	r3, [pc, #788]	; (8002208 <HAL_RCC_OscConfig+0x334>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	220c      	movs	r2, #12
 8001ef8:	4013      	ands	r3, r2
 8001efa:	2b04      	cmp	r3, #4
 8001efc:	d00e      	beq.n	8001f1c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001efe:	4bc2      	ldr	r3, [pc, #776]	; (8002208 <HAL_RCC_OscConfig+0x334>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	220c      	movs	r2, #12
 8001f04:	4013      	ands	r3, r2
 8001f06:	2b08      	cmp	r3, #8
 8001f08:	d116      	bne.n	8001f38 <HAL_RCC_OscConfig+0x64>
 8001f0a:	4bbf      	ldr	r3, [pc, #764]	; (8002208 <HAL_RCC_OscConfig+0x334>)
 8001f0c:	685a      	ldr	r2, [r3, #4]
 8001f0e:	23c0      	movs	r3, #192	; 0xc0
 8001f10:	025b      	lsls	r3, r3, #9
 8001f12:	401a      	ands	r2, r3
 8001f14:	2380      	movs	r3, #128	; 0x80
 8001f16:	025b      	lsls	r3, r3, #9
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d10d      	bne.n	8001f38 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f1c:	4bba      	ldr	r3, [pc, #744]	; (8002208 <HAL_RCC_OscConfig+0x334>)
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	2380      	movs	r3, #128	; 0x80
 8001f22:	029b      	lsls	r3, r3, #10
 8001f24:	4013      	ands	r3, r2
 8001f26:	d100      	bne.n	8001f2a <HAL_RCC_OscConfig+0x56>
 8001f28:	e070      	b.n	800200c <HAL_RCC_OscConfig+0x138>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d000      	beq.n	8001f34 <HAL_RCC_OscConfig+0x60>
 8001f32:	e06b      	b.n	800200c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e2dc      	b.n	80024f2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d107      	bne.n	8001f50 <HAL_RCC_OscConfig+0x7c>
 8001f40:	4bb1      	ldr	r3, [pc, #708]	; (8002208 <HAL_RCC_OscConfig+0x334>)
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	4bb0      	ldr	r3, [pc, #704]	; (8002208 <HAL_RCC_OscConfig+0x334>)
 8001f46:	2180      	movs	r1, #128	; 0x80
 8001f48:	0249      	lsls	r1, r1, #9
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	e02f      	b.n	8001fb0 <HAL_RCC_OscConfig+0xdc>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d10c      	bne.n	8001f72 <HAL_RCC_OscConfig+0x9e>
 8001f58:	4bab      	ldr	r3, [pc, #684]	; (8002208 <HAL_RCC_OscConfig+0x334>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	4baa      	ldr	r3, [pc, #680]	; (8002208 <HAL_RCC_OscConfig+0x334>)
 8001f5e:	49ab      	ldr	r1, [pc, #684]	; (800220c <HAL_RCC_OscConfig+0x338>)
 8001f60:	400a      	ands	r2, r1
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	4ba8      	ldr	r3, [pc, #672]	; (8002208 <HAL_RCC_OscConfig+0x334>)
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	4ba7      	ldr	r3, [pc, #668]	; (8002208 <HAL_RCC_OscConfig+0x334>)
 8001f6a:	49a9      	ldr	r1, [pc, #676]	; (8002210 <HAL_RCC_OscConfig+0x33c>)
 8001f6c:	400a      	ands	r2, r1
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	e01e      	b.n	8001fb0 <HAL_RCC_OscConfig+0xdc>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	2b05      	cmp	r3, #5
 8001f78:	d10e      	bne.n	8001f98 <HAL_RCC_OscConfig+0xc4>
 8001f7a:	4ba3      	ldr	r3, [pc, #652]	; (8002208 <HAL_RCC_OscConfig+0x334>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	4ba2      	ldr	r3, [pc, #648]	; (8002208 <HAL_RCC_OscConfig+0x334>)
 8001f80:	2180      	movs	r1, #128	; 0x80
 8001f82:	02c9      	lsls	r1, r1, #11
 8001f84:	430a      	orrs	r2, r1
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	4b9f      	ldr	r3, [pc, #636]	; (8002208 <HAL_RCC_OscConfig+0x334>)
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	4b9e      	ldr	r3, [pc, #632]	; (8002208 <HAL_RCC_OscConfig+0x334>)
 8001f8e:	2180      	movs	r1, #128	; 0x80
 8001f90:	0249      	lsls	r1, r1, #9
 8001f92:	430a      	orrs	r2, r1
 8001f94:	601a      	str	r2, [r3, #0]
 8001f96:	e00b      	b.n	8001fb0 <HAL_RCC_OscConfig+0xdc>
 8001f98:	4b9b      	ldr	r3, [pc, #620]	; (8002208 <HAL_RCC_OscConfig+0x334>)
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	4b9a      	ldr	r3, [pc, #616]	; (8002208 <HAL_RCC_OscConfig+0x334>)
 8001f9e:	499b      	ldr	r1, [pc, #620]	; (800220c <HAL_RCC_OscConfig+0x338>)
 8001fa0:	400a      	ands	r2, r1
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	4b98      	ldr	r3, [pc, #608]	; (8002208 <HAL_RCC_OscConfig+0x334>)
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	4b97      	ldr	r3, [pc, #604]	; (8002208 <HAL_RCC_OscConfig+0x334>)
 8001faa:	4999      	ldr	r1, [pc, #612]	; (8002210 <HAL_RCC_OscConfig+0x33c>)
 8001fac:	400a      	ands	r2, r1
 8001fae:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d014      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb8:	f7fe ff68 	bl	8000e8c <HAL_GetTick>
 8001fbc:	0003      	movs	r3, r0
 8001fbe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fc0:	e008      	b.n	8001fd4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fc2:	f7fe ff63 	bl	8000e8c <HAL_GetTick>
 8001fc6:	0002      	movs	r2, r0
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b64      	cmp	r3, #100	; 0x64
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e28e      	b.n	80024f2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fd4:	4b8c      	ldr	r3, [pc, #560]	; (8002208 <HAL_RCC_OscConfig+0x334>)
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	2380      	movs	r3, #128	; 0x80
 8001fda:	029b      	lsls	r3, r3, #10
 8001fdc:	4013      	ands	r3, r2
 8001fde:	d0f0      	beq.n	8001fc2 <HAL_RCC_OscConfig+0xee>
 8001fe0:	e015      	b.n	800200e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe2:	f7fe ff53 	bl	8000e8c <HAL_GetTick>
 8001fe6:	0003      	movs	r3, r0
 8001fe8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fec:	f7fe ff4e 	bl	8000e8c <HAL_GetTick>
 8001ff0:	0002      	movs	r2, r0
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b64      	cmp	r3, #100	; 0x64
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e279      	b.n	80024f2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ffe:	4b82      	ldr	r3, [pc, #520]	; (8002208 <HAL_RCC_OscConfig+0x334>)
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	2380      	movs	r3, #128	; 0x80
 8002004:	029b      	lsls	r3, r3, #10
 8002006:	4013      	ands	r3, r2
 8002008:	d1f0      	bne.n	8001fec <HAL_RCC_OscConfig+0x118>
 800200a:	e000      	b.n	800200e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800200c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2202      	movs	r2, #2
 8002014:	4013      	ands	r3, r2
 8002016:	d100      	bne.n	800201a <HAL_RCC_OscConfig+0x146>
 8002018:	e06c      	b.n	80020f4 <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800201a:	4b7b      	ldr	r3, [pc, #492]	; (8002208 <HAL_RCC_OscConfig+0x334>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	220c      	movs	r2, #12
 8002020:	4013      	ands	r3, r2
 8002022:	d00e      	beq.n	8002042 <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002024:	4b78      	ldr	r3, [pc, #480]	; (8002208 <HAL_RCC_OscConfig+0x334>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	220c      	movs	r2, #12
 800202a:	4013      	ands	r3, r2
 800202c:	2b08      	cmp	r3, #8
 800202e:	d11f      	bne.n	8002070 <HAL_RCC_OscConfig+0x19c>
 8002030:	4b75      	ldr	r3, [pc, #468]	; (8002208 <HAL_RCC_OscConfig+0x334>)
 8002032:	685a      	ldr	r2, [r3, #4]
 8002034:	23c0      	movs	r3, #192	; 0xc0
 8002036:	025b      	lsls	r3, r3, #9
 8002038:	401a      	ands	r2, r3
 800203a:	2380      	movs	r3, #128	; 0x80
 800203c:	021b      	lsls	r3, r3, #8
 800203e:	429a      	cmp	r2, r3
 8002040:	d116      	bne.n	8002070 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002042:	4b71      	ldr	r3, [pc, #452]	; (8002208 <HAL_RCC_OscConfig+0x334>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2202      	movs	r2, #2
 8002048:	4013      	ands	r3, r2
 800204a:	d005      	beq.n	8002058 <HAL_RCC_OscConfig+0x184>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d001      	beq.n	8002058 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e24c      	b.n	80024f2 <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002058:	4b6b      	ldr	r3, [pc, #428]	; (8002208 <HAL_RCC_OscConfig+0x334>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	22f8      	movs	r2, #248	; 0xf8
 800205e:	4393      	bics	r3, r2
 8002060:	0019      	movs	r1, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	00da      	lsls	r2, r3, #3
 8002068:	4b67      	ldr	r3, [pc, #412]	; (8002208 <HAL_RCC_OscConfig+0x334>)
 800206a:	430a      	orrs	r2, r1
 800206c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800206e:	e041      	b.n	80020f4 <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d024      	beq.n	80020c2 <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002078:	4b63      	ldr	r3, [pc, #396]	; (8002208 <HAL_RCC_OscConfig+0x334>)
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	4b62      	ldr	r3, [pc, #392]	; (8002208 <HAL_RCC_OscConfig+0x334>)
 800207e:	2101      	movs	r1, #1
 8002080:	430a      	orrs	r2, r1
 8002082:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002084:	f7fe ff02 	bl	8000e8c <HAL_GetTick>
 8002088:	0003      	movs	r3, r0
 800208a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800208c:	e008      	b.n	80020a0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800208e:	f7fe fefd 	bl	8000e8c <HAL_GetTick>
 8002092:	0002      	movs	r2, r0
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e228      	b.n	80024f2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a0:	4b59      	ldr	r3, [pc, #356]	; (8002208 <HAL_RCC_OscConfig+0x334>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2202      	movs	r2, #2
 80020a6:	4013      	ands	r3, r2
 80020a8:	d0f1      	beq.n	800208e <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020aa:	4b57      	ldr	r3, [pc, #348]	; (8002208 <HAL_RCC_OscConfig+0x334>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	22f8      	movs	r2, #248	; 0xf8
 80020b0:	4393      	bics	r3, r2
 80020b2:	0019      	movs	r1, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	00da      	lsls	r2, r3, #3
 80020ba:	4b53      	ldr	r3, [pc, #332]	; (8002208 <HAL_RCC_OscConfig+0x334>)
 80020bc:	430a      	orrs	r2, r1
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	e018      	b.n	80020f4 <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020c2:	4b51      	ldr	r3, [pc, #324]	; (8002208 <HAL_RCC_OscConfig+0x334>)
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	4b50      	ldr	r3, [pc, #320]	; (8002208 <HAL_RCC_OscConfig+0x334>)
 80020c8:	2101      	movs	r1, #1
 80020ca:	438a      	bics	r2, r1
 80020cc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ce:	f7fe fedd 	bl	8000e8c <HAL_GetTick>
 80020d2:	0003      	movs	r3, r0
 80020d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020d8:	f7fe fed8 	bl	8000e8c <HAL_GetTick>
 80020dc:	0002      	movs	r2, r0
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e203      	b.n	80024f2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ea:	4b47      	ldr	r3, [pc, #284]	; (8002208 <HAL_RCC_OscConfig+0x334>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2202      	movs	r2, #2
 80020f0:	4013      	ands	r3, r2
 80020f2:	d1f1      	bne.n	80020d8 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2208      	movs	r2, #8
 80020fa:	4013      	ands	r3, r2
 80020fc:	d036      	beq.n	800216c <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d019      	beq.n	800213a <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002106:	4b40      	ldr	r3, [pc, #256]	; (8002208 <HAL_RCC_OscConfig+0x334>)
 8002108:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800210a:	4b3f      	ldr	r3, [pc, #252]	; (8002208 <HAL_RCC_OscConfig+0x334>)
 800210c:	2101      	movs	r1, #1
 800210e:	430a      	orrs	r2, r1
 8002110:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002112:	f7fe febb 	bl	8000e8c <HAL_GetTick>
 8002116:	0003      	movs	r3, r0
 8002118:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800211c:	f7fe feb6 	bl	8000e8c <HAL_GetTick>
 8002120:	0002      	movs	r2, r0
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e1e1      	b.n	80024f2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800212e:	4b36      	ldr	r3, [pc, #216]	; (8002208 <HAL_RCC_OscConfig+0x334>)
 8002130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002132:	2202      	movs	r2, #2
 8002134:	4013      	ands	r3, r2
 8002136:	d0f1      	beq.n	800211c <HAL_RCC_OscConfig+0x248>
 8002138:	e018      	b.n	800216c <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800213a:	4b33      	ldr	r3, [pc, #204]	; (8002208 <HAL_RCC_OscConfig+0x334>)
 800213c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800213e:	4b32      	ldr	r3, [pc, #200]	; (8002208 <HAL_RCC_OscConfig+0x334>)
 8002140:	2101      	movs	r1, #1
 8002142:	438a      	bics	r2, r1
 8002144:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002146:	f7fe fea1 	bl	8000e8c <HAL_GetTick>
 800214a:	0003      	movs	r3, r0
 800214c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002150:	f7fe fe9c 	bl	8000e8c <HAL_GetTick>
 8002154:	0002      	movs	r2, r0
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e1c7      	b.n	80024f2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002162:	4b29      	ldr	r3, [pc, #164]	; (8002208 <HAL_RCC_OscConfig+0x334>)
 8002164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002166:	2202      	movs	r2, #2
 8002168:	4013      	ands	r3, r2
 800216a:	d1f1      	bne.n	8002150 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2204      	movs	r2, #4
 8002172:	4013      	ands	r3, r2
 8002174:	d100      	bne.n	8002178 <HAL_RCC_OscConfig+0x2a4>
 8002176:	e0b5      	b.n	80022e4 <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002178:	201f      	movs	r0, #31
 800217a:	183b      	adds	r3, r7, r0
 800217c:	2200      	movs	r2, #0
 800217e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002180:	4b21      	ldr	r3, [pc, #132]	; (8002208 <HAL_RCC_OscConfig+0x334>)
 8002182:	69da      	ldr	r2, [r3, #28]
 8002184:	2380      	movs	r3, #128	; 0x80
 8002186:	055b      	lsls	r3, r3, #21
 8002188:	4013      	ands	r3, r2
 800218a:	d110      	bne.n	80021ae <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800218c:	4b1e      	ldr	r3, [pc, #120]	; (8002208 <HAL_RCC_OscConfig+0x334>)
 800218e:	69da      	ldr	r2, [r3, #28]
 8002190:	4b1d      	ldr	r3, [pc, #116]	; (8002208 <HAL_RCC_OscConfig+0x334>)
 8002192:	2180      	movs	r1, #128	; 0x80
 8002194:	0549      	lsls	r1, r1, #21
 8002196:	430a      	orrs	r2, r1
 8002198:	61da      	str	r2, [r3, #28]
 800219a:	4b1b      	ldr	r3, [pc, #108]	; (8002208 <HAL_RCC_OscConfig+0x334>)
 800219c:	69da      	ldr	r2, [r3, #28]
 800219e:	2380      	movs	r3, #128	; 0x80
 80021a0:	055b      	lsls	r3, r3, #21
 80021a2:	4013      	ands	r3, r2
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80021a8:	183b      	adds	r3, r7, r0
 80021aa:	2201      	movs	r2, #1
 80021ac:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ae:	4b19      	ldr	r3, [pc, #100]	; (8002214 <HAL_RCC_OscConfig+0x340>)
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	2380      	movs	r3, #128	; 0x80
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	4013      	ands	r3, r2
 80021b8:	d11a      	bne.n	80021f0 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021ba:	4b16      	ldr	r3, [pc, #88]	; (8002214 <HAL_RCC_OscConfig+0x340>)
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	4b15      	ldr	r3, [pc, #84]	; (8002214 <HAL_RCC_OscConfig+0x340>)
 80021c0:	2180      	movs	r1, #128	; 0x80
 80021c2:	0049      	lsls	r1, r1, #1
 80021c4:	430a      	orrs	r2, r1
 80021c6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021c8:	f7fe fe60 	bl	8000e8c <HAL_GetTick>
 80021cc:	0003      	movs	r3, r0
 80021ce:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d0:	e008      	b.n	80021e4 <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021d2:	f7fe fe5b 	bl	8000e8c <HAL_GetTick>
 80021d6:	0002      	movs	r2, r0
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	2b64      	cmp	r3, #100	; 0x64
 80021de:	d901      	bls.n	80021e4 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 80021e0:	2303      	movs	r3, #3
 80021e2:	e186      	b.n	80024f2 <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e4:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <HAL_RCC_OscConfig+0x340>)
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	2380      	movs	r3, #128	; 0x80
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	4013      	ands	r3, r2
 80021ee:	d0f0      	beq.n	80021d2 <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d10f      	bne.n	8002218 <HAL_RCC_OscConfig+0x344>
 80021f8:	4b03      	ldr	r3, [pc, #12]	; (8002208 <HAL_RCC_OscConfig+0x334>)
 80021fa:	6a1a      	ldr	r2, [r3, #32]
 80021fc:	4b02      	ldr	r3, [pc, #8]	; (8002208 <HAL_RCC_OscConfig+0x334>)
 80021fe:	2101      	movs	r1, #1
 8002200:	430a      	orrs	r2, r1
 8002202:	621a      	str	r2, [r3, #32]
 8002204:	e036      	b.n	8002274 <HAL_RCC_OscConfig+0x3a0>
 8002206:	46c0      	nop			; (mov r8, r8)
 8002208:	40021000 	.word	0x40021000
 800220c:	fffeffff 	.word	0xfffeffff
 8002210:	fffbffff 	.word	0xfffbffff
 8002214:	40007000 	.word	0x40007000
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d10c      	bne.n	800223a <HAL_RCC_OscConfig+0x366>
 8002220:	4bb6      	ldr	r3, [pc, #728]	; (80024fc <HAL_RCC_OscConfig+0x628>)
 8002222:	6a1a      	ldr	r2, [r3, #32]
 8002224:	4bb5      	ldr	r3, [pc, #724]	; (80024fc <HAL_RCC_OscConfig+0x628>)
 8002226:	2101      	movs	r1, #1
 8002228:	438a      	bics	r2, r1
 800222a:	621a      	str	r2, [r3, #32]
 800222c:	4bb3      	ldr	r3, [pc, #716]	; (80024fc <HAL_RCC_OscConfig+0x628>)
 800222e:	6a1a      	ldr	r2, [r3, #32]
 8002230:	4bb2      	ldr	r3, [pc, #712]	; (80024fc <HAL_RCC_OscConfig+0x628>)
 8002232:	2104      	movs	r1, #4
 8002234:	438a      	bics	r2, r1
 8002236:	621a      	str	r2, [r3, #32]
 8002238:	e01c      	b.n	8002274 <HAL_RCC_OscConfig+0x3a0>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	2b05      	cmp	r3, #5
 8002240:	d10c      	bne.n	800225c <HAL_RCC_OscConfig+0x388>
 8002242:	4bae      	ldr	r3, [pc, #696]	; (80024fc <HAL_RCC_OscConfig+0x628>)
 8002244:	6a1a      	ldr	r2, [r3, #32]
 8002246:	4bad      	ldr	r3, [pc, #692]	; (80024fc <HAL_RCC_OscConfig+0x628>)
 8002248:	2104      	movs	r1, #4
 800224a:	430a      	orrs	r2, r1
 800224c:	621a      	str	r2, [r3, #32]
 800224e:	4bab      	ldr	r3, [pc, #684]	; (80024fc <HAL_RCC_OscConfig+0x628>)
 8002250:	6a1a      	ldr	r2, [r3, #32]
 8002252:	4baa      	ldr	r3, [pc, #680]	; (80024fc <HAL_RCC_OscConfig+0x628>)
 8002254:	2101      	movs	r1, #1
 8002256:	430a      	orrs	r2, r1
 8002258:	621a      	str	r2, [r3, #32]
 800225a:	e00b      	b.n	8002274 <HAL_RCC_OscConfig+0x3a0>
 800225c:	4ba7      	ldr	r3, [pc, #668]	; (80024fc <HAL_RCC_OscConfig+0x628>)
 800225e:	6a1a      	ldr	r2, [r3, #32]
 8002260:	4ba6      	ldr	r3, [pc, #664]	; (80024fc <HAL_RCC_OscConfig+0x628>)
 8002262:	2101      	movs	r1, #1
 8002264:	438a      	bics	r2, r1
 8002266:	621a      	str	r2, [r3, #32]
 8002268:	4ba4      	ldr	r3, [pc, #656]	; (80024fc <HAL_RCC_OscConfig+0x628>)
 800226a:	6a1a      	ldr	r2, [r3, #32]
 800226c:	4ba3      	ldr	r3, [pc, #652]	; (80024fc <HAL_RCC_OscConfig+0x628>)
 800226e:	2104      	movs	r1, #4
 8002270:	438a      	bics	r2, r1
 8002272:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d014      	beq.n	80022a6 <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800227c:	f7fe fe06 	bl	8000e8c <HAL_GetTick>
 8002280:	0003      	movs	r3, r0
 8002282:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002284:	e009      	b.n	800229a <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002286:	f7fe fe01 	bl	8000e8c <HAL_GetTick>
 800228a:	0002      	movs	r2, r0
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	4a9b      	ldr	r2, [pc, #620]	; (8002500 <HAL_RCC_OscConfig+0x62c>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d901      	bls.n	800229a <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e12b      	b.n	80024f2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800229a:	4b98      	ldr	r3, [pc, #608]	; (80024fc <HAL_RCC_OscConfig+0x628>)
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	2202      	movs	r2, #2
 80022a0:	4013      	ands	r3, r2
 80022a2:	d0f0      	beq.n	8002286 <HAL_RCC_OscConfig+0x3b2>
 80022a4:	e013      	b.n	80022ce <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022a6:	f7fe fdf1 	bl	8000e8c <HAL_GetTick>
 80022aa:	0003      	movs	r3, r0
 80022ac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022ae:	e009      	b.n	80022c4 <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022b0:	f7fe fdec 	bl	8000e8c <HAL_GetTick>
 80022b4:	0002      	movs	r2, r0
 80022b6:	69bb      	ldr	r3, [r7, #24]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	4a91      	ldr	r2, [pc, #580]	; (8002500 <HAL_RCC_OscConfig+0x62c>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e116      	b.n	80024f2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022c4:	4b8d      	ldr	r3, [pc, #564]	; (80024fc <HAL_RCC_OscConfig+0x628>)
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	2202      	movs	r2, #2
 80022ca:	4013      	ands	r3, r2
 80022cc:	d1f0      	bne.n	80022b0 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022ce:	231f      	movs	r3, #31
 80022d0:	18fb      	adds	r3, r7, r3
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d105      	bne.n	80022e4 <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022d8:	4b88      	ldr	r3, [pc, #544]	; (80024fc <HAL_RCC_OscConfig+0x628>)
 80022da:	69da      	ldr	r2, [r3, #28]
 80022dc:	4b87      	ldr	r3, [pc, #540]	; (80024fc <HAL_RCC_OscConfig+0x628>)
 80022de:	4989      	ldr	r1, [pc, #548]	; (8002504 <HAL_RCC_OscConfig+0x630>)
 80022e0:	400a      	ands	r2, r1
 80022e2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2210      	movs	r2, #16
 80022ea:	4013      	ands	r3, r2
 80022ec:	d063      	beq.n	80023b6 <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d12a      	bne.n	800234c <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80022f6:	4b81      	ldr	r3, [pc, #516]	; (80024fc <HAL_RCC_OscConfig+0x628>)
 80022f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022fa:	4b80      	ldr	r3, [pc, #512]	; (80024fc <HAL_RCC_OscConfig+0x628>)
 80022fc:	2104      	movs	r1, #4
 80022fe:	430a      	orrs	r2, r1
 8002300:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002302:	4b7e      	ldr	r3, [pc, #504]	; (80024fc <HAL_RCC_OscConfig+0x628>)
 8002304:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002306:	4b7d      	ldr	r3, [pc, #500]	; (80024fc <HAL_RCC_OscConfig+0x628>)
 8002308:	2101      	movs	r1, #1
 800230a:	430a      	orrs	r2, r1
 800230c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800230e:	f7fe fdbd 	bl	8000e8c <HAL_GetTick>
 8002312:	0003      	movs	r3, r0
 8002314:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002316:	e008      	b.n	800232a <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002318:	f7fe fdb8 	bl	8000e8c <HAL_GetTick>
 800231c:	0002      	movs	r2, r0
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b02      	cmp	r3, #2
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e0e3      	b.n	80024f2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800232a:	4b74      	ldr	r3, [pc, #464]	; (80024fc <HAL_RCC_OscConfig+0x628>)
 800232c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800232e:	2202      	movs	r2, #2
 8002330:	4013      	ands	r3, r2
 8002332:	d0f1      	beq.n	8002318 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002334:	4b71      	ldr	r3, [pc, #452]	; (80024fc <HAL_RCC_OscConfig+0x628>)
 8002336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002338:	22f8      	movs	r2, #248	; 0xf8
 800233a:	4393      	bics	r3, r2
 800233c:	0019      	movs	r1, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	00da      	lsls	r2, r3, #3
 8002344:	4b6d      	ldr	r3, [pc, #436]	; (80024fc <HAL_RCC_OscConfig+0x628>)
 8002346:	430a      	orrs	r2, r1
 8002348:	635a      	str	r2, [r3, #52]	; 0x34
 800234a:	e034      	b.n	80023b6 <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	695b      	ldr	r3, [r3, #20]
 8002350:	3305      	adds	r3, #5
 8002352:	d111      	bne.n	8002378 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002354:	4b69      	ldr	r3, [pc, #420]	; (80024fc <HAL_RCC_OscConfig+0x628>)
 8002356:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002358:	4b68      	ldr	r3, [pc, #416]	; (80024fc <HAL_RCC_OscConfig+0x628>)
 800235a:	2104      	movs	r1, #4
 800235c:	438a      	bics	r2, r1
 800235e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002360:	4b66      	ldr	r3, [pc, #408]	; (80024fc <HAL_RCC_OscConfig+0x628>)
 8002362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002364:	22f8      	movs	r2, #248	; 0xf8
 8002366:	4393      	bics	r3, r2
 8002368:	0019      	movs	r1, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	00da      	lsls	r2, r3, #3
 8002370:	4b62      	ldr	r3, [pc, #392]	; (80024fc <HAL_RCC_OscConfig+0x628>)
 8002372:	430a      	orrs	r2, r1
 8002374:	635a      	str	r2, [r3, #52]	; 0x34
 8002376:	e01e      	b.n	80023b6 <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002378:	4b60      	ldr	r3, [pc, #384]	; (80024fc <HAL_RCC_OscConfig+0x628>)
 800237a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800237c:	4b5f      	ldr	r3, [pc, #380]	; (80024fc <HAL_RCC_OscConfig+0x628>)
 800237e:	2104      	movs	r1, #4
 8002380:	430a      	orrs	r2, r1
 8002382:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002384:	4b5d      	ldr	r3, [pc, #372]	; (80024fc <HAL_RCC_OscConfig+0x628>)
 8002386:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002388:	4b5c      	ldr	r3, [pc, #368]	; (80024fc <HAL_RCC_OscConfig+0x628>)
 800238a:	2101      	movs	r1, #1
 800238c:	438a      	bics	r2, r1
 800238e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002390:	f7fe fd7c 	bl	8000e8c <HAL_GetTick>
 8002394:	0003      	movs	r3, r0
 8002396:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002398:	e008      	b.n	80023ac <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800239a:	f7fe fd77 	bl	8000e8c <HAL_GetTick>
 800239e:	0002      	movs	r2, r0
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e0a2      	b.n	80024f2 <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80023ac:	4b53      	ldr	r3, [pc, #332]	; (80024fc <HAL_RCC_OscConfig+0x628>)
 80023ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023b0:	2202      	movs	r2, #2
 80023b2:	4013      	ands	r3, r2
 80023b4:	d1f1      	bne.n	800239a <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d100      	bne.n	80023c0 <HAL_RCC_OscConfig+0x4ec>
 80023be:	e097      	b.n	80024f0 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023c0:	4b4e      	ldr	r3, [pc, #312]	; (80024fc <HAL_RCC_OscConfig+0x628>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	220c      	movs	r2, #12
 80023c6:	4013      	ands	r3, r2
 80023c8:	2b08      	cmp	r3, #8
 80023ca:	d100      	bne.n	80023ce <HAL_RCC_OscConfig+0x4fa>
 80023cc:	e06b      	b.n	80024a6 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d14c      	bne.n	8002470 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023d6:	4b49      	ldr	r3, [pc, #292]	; (80024fc <HAL_RCC_OscConfig+0x628>)
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	4b48      	ldr	r3, [pc, #288]	; (80024fc <HAL_RCC_OscConfig+0x628>)
 80023dc:	494a      	ldr	r1, [pc, #296]	; (8002508 <HAL_RCC_OscConfig+0x634>)
 80023de:	400a      	ands	r2, r1
 80023e0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e2:	f7fe fd53 	bl	8000e8c <HAL_GetTick>
 80023e6:	0003      	movs	r3, r0
 80023e8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023ea:	e008      	b.n	80023fe <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023ec:	f7fe fd4e 	bl	8000e8c <HAL_GetTick>
 80023f0:	0002      	movs	r2, r0
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e079      	b.n	80024f2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023fe:	4b3f      	ldr	r3, [pc, #252]	; (80024fc <HAL_RCC_OscConfig+0x628>)
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	2380      	movs	r3, #128	; 0x80
 8002404:	049b      	lsls	r3, r3, #18
 8002406:	4013      	ands	r3, r2
 8002408:	d1f0      	bne.n	80023ec <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800240a:	4b3c      	ldr	r3, [pc, #240]	; (80024fc <HAL_RCC_OscConfig+0x628>)
 800240c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240e:	220f      	movs	r2, #15
 8002410:	4393      	bics	r3, r2
 8002412:	0019      	movs	r1, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002418:	4b38      	ldr	r3, [pc, #224]	; (80024fc <HAL_RCC_OscConfig+0x628>)
 800241a:	430a      	orrs	r2, r1
 800241c:	62da      	str	r2, [r3, #44]	; 0x2c
 800241e:	4b37      	ldr	r3, [pc, #220]	; (80024fc <HAL_RCC_OscConfig+0x628>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	4a3a      	ldr	r2, [pc, #232]	; (800250c <HAL_RCC_OscConfig+0x638>)
 8002424:	4013      	ands	r3, r2
 8002426:	0019      	movs	r1, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002430:	431a      	orrs	r2, r3
 8002432:	4b32      	ldr	r3, [pc, #200]	; (80024fc <HAL_RCC_OscConfig+0x628>)
 8002434:	430a      	orrs	r2, r1
 8002436:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002438:	4b30      	ldr	r3, [pc, #192]	; (80024fc <HAL_RCC_OscConfig+0x628>)
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	4b2f      	ldr	r3, [pc, #188]	; (80024fc <HAL_RCC_OscConfig+0x628>)
 800243e:	2180      	movs	r1, #128	; 0x80
 8002440:	0449      	lsls	r1, r1, #17
 8002442:	430a      	orrs	r2, r1
 8002444:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002446:	f7fe fd21 	bl	8000e8c <HAL_GetTick>
 800244a:	0003      	movs	r3, r0
 800244c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002450:	f7fe fd1c 	bl	8000e8c <HAL_GetTick>
 8002454:	0002      	movs	r2, r0
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e047      	b.n	80024f2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002462:	4b26      	ldr	r3, [pc, #152]	; (80024fc <HAL_RCC_OscConfig+0x628>)
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	2380      	movs	r3, #128	; 0x80
 8002468:	049b      	lsls	r3, r3, #18
 800246a:	4013      	ands	r3, r2
 800246c:	d0f0      	beq.n	8002450 <HAL_RCC_OscConfig+0x57c>
 800246e:	e03f      	b.n	80024f0 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002470:	4b22      	ldr	r3, [pc, #136]	; (80024fc <HAL_RCC_OscConfig+0x628>)
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	4b21      	ldr	r3, [pc, #132]	; (80024fc <HAL_RCC_OscConfig+0x628>)
 8002476:	4924      	ldr	r1, [pc, #144]	; (8002508 <HAL_RCC_OscConfig+0x634>)
 8002478:	400a      	ands	r2, r1
 800247a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800247c:	f7fe fd06 	bl	8000e8c <HAL_GetTick>
 8002480:	0003      	movs	r3, r0
 8002482:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002484:	e008      	b.n	8002498 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002486:	f7fe fd01 	bl	8000e8c <HAL_GetTick>
 800248a:	0002      	movs	r2, r0
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b02      	cmp	r3, #2
 8002492:	d901      	bls.n	8002498 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e02c      	b.n	80024f2 <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002498:	4b18      	ldr	r3, [pc, #96]	; (80024fc <HAL_RCC_OscConfig+0x628>)
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	2380      	movs	r3, #128	; 0x80
 800249e:	049b      	lsls	r3, r3, #18
 80024a0:	4013      	ands	r3, r2
 80024a2:	d1f0      	bne.n	8002486 <HAL_RCC_OscConfig+0x5b2>
 80024a4:	e024      	b.n	80024f0 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a1b      	ldr	r3, [r3, #32]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d101      	bne.n	80024b2 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e01f      	b.n	80024f2 <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80024b2:	4b12      	ldr	r3, [pc, #72]	; (80024fc <HAL_RCC_OscConfig+0x628>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80024b8:	4b10      	ldr	r3, [pc, #64]	; (80024fc <HAL_RCC_OscConfig+0x628>)
 80024ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024bc:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	23c0      	movs	r3, #192	; 0xc0
 80024c2:	025b      	lsls	r3, r3, #9
 80024c4:	401a      	ands	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d10e      	bne.n	80024ec <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	220f      	movs	r2, #15
 80024d2:	401a      	ands	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80024d8:	429a      	cmp	r2, r3
 80024da:	d107      	bne.n	80024ec <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80024dc:	697a      	ldr	r2, [r7, #20]
 80024de:	23f0      	movs	r3, #240	; 0xf0
 80024e0:	039b      	lsls	r3, r3, #14
 80024e2:	401a      	ands	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d001      	beq.n	80024f0 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e000      	b.n	80024f2 <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	0018      	movs	r0, r3
 80024f4:	46bd      	mov	sp, r7
 80024f6:	b008      	add	sp, #32
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	46c0      	nop			; (mov r8, r8)
 80024fc:	40021000 	.word	0x40021000
 8002500:	00001388 	.word	0x00001388
 8002504:	efffffff 	.word	0xefffffff
 8002508:	feffffff 	.word	0xfeffffff
 800250c:	ffc27fff 	.word	0xffc27fff

08002510 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d101      	bne.n	8002524 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e0b3      	b.n	800268c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002524:	4b5b      	ldr	r3, [pc, #364]	; (8002694 <HAL_RCC_ClockConfig+0x184>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2201      	movs	r2, #1
 800252a:	4013      	ands	r3, r2
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	429a      	cmp	r2, r3
 8002530:	d911      	bls.n	8002556 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002532:	4b58      	ldr	r3, [pc, #352]	; (8002694 <HAL_RCC_ClockConfig+0x184>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2201      	movs	r2, #1
 8002538:	4393      	bics	r3, r2
 800253a:	0019      	movs	r1, r3
 800253c:	4b55      	ldr	r3, [pc, #340]	; (8002694 <HAL_RCC_ClockConfig+0x184>)
 800253e:	683a      	ldr	r2, [r7, #0]
 8002540:	430a      	orrs	r2, r1
 8002542:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002544:	4b53      	ldr	r3, [pc, #332]	; (8002694 <HAL_RCC_ClockConfig+0x184>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2201      	movs	r2, #1
 800254a:	4013      	ands	r3, r2
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	429a      	cmp	r2, r3
 8002550:	d001      	beq.n	8002556 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e09a      	b.n	800268c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2202      	movs	r2, #2
 800255c:	4013      	ands	r3, r2
 800255e:	d015      	beq.n	800258c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2204      	movs	r2, #4
 8002566:	4013      	ands	r3, r2
 8002568:	d006      	beq.n	8002578 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800256a:	4b4b      	ldr	r3, [pc, #300]	; (8002698 <HAL_RCC_ClockConfig+0x188>)
 800256c:	685a      	ldr	r2, [r3, #4]
 800256e:	4b4a      	ldr	r3, [pc, #296]	; (8002698 <HAL_RCC_ClockConfig+0x188>)
 8002570:	21e0      	movs	r1, #224	; 0xe0
 8002572:	00c9      	lsls	r1, r1, #3
 8002574:	430a      	orrs	r2, r1
 8002576:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002578:	4b47      	ldr	r3, [pc, #284]	; (8002698 <HAL_RCC_ClockConfig+0x188>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	22f0      	movs	r2, #240	; 0xf0
 800257e:	4393      	bics	r3, r2
 8002580:	0019      	movs	r1, r3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	689a      	ldr	r2, [r3, #8]
 8002586:	4b44      	ldr	r3, [pc, #272]	; (8002698 <HAL_RCC_ClockConfig+0x188>)
 8002588:	430a      	orrs	r2, r1
 800258a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2201      	movs	r2, #1
 8002592:	4013      	ands	r3, r2
 8002594:	d040      	beq.n	8002618 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d107      	bne.n	80025ae <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800259e:	4b3e      	ldr	r3, [pc, #248]	; (8002698 <HAL_RCC_ClockConfig+0x188>)
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	2380      	movs	r3, #128	; 0x80
 80025a4:	029b      	lsls	r3, r3, #10
 80025a6:	4013      	ands	r3, r2
 80025a8:	d114      	bne.n	80025d4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e06e      	b.n	800268c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d107      	bne.n	80025c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025b6:	4b38      	ldr	r3, [pc, #224]	; (8002698 <HAL_RCC_ClockConfig+0x188>)
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	2380      	movs	r3, #128	; 0x80
 80025bc:	049b      	lsls	r3, r3, #18
 80025be:	4013      	ands	r3, r2
 80025c0:	d108      	bne.n	80025d4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e062      	b.n	800268c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025c6:	4b34      	ldr	r3, [pc, #208]	; (8002698 <HAL_RCC_ClockConfig+0x188>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2202      	movs	r2, #2
 80025cc:	4013      	ands	r3, r2
 80025ce:	d101      	bne.n	80025d4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e05b      	b.n	800268c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025d4:	4b30      	ldr	r3, [pc, #192]	; (8002698 <HAL_RCC_ClockConfig+0x188>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	2203      	movs	r2, #3
 80025da:	4393      	bics	r3, r2
 80025dc:	0019      	movs	r1, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685a      	ldr	r2, [r3, #4]
 80025e2:	4b2d      	ldr	r3, [pc, #180]	; (8002698 <HAL_RCC_ClockConfig+0x188>)
 80025e4:	430a      	orrs	r2, r1
 80025e6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025e8:	f7fe fc50 	bl	8000e8c <HAL_GetTick>
 80025ec:	0003      	movs	r3, r0
 80025ee:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025f0:	e009      	b.n	8002606 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025f2:	f7fe fc4b 	bl	8000e8c <HAL_GetTick>
 80025f6:	0002      	movs	r2, r0
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	4a27      	ldr	r2, [pc, #156]	; (800269c <HAL_RCC_ClockConfig+0x18c>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e042      	b.n	800268c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002606:	4b24      	ldr	r3, [pc, #144]	; (8002698 <HAL_RCC_ClockConfig+0x188>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	220c      	movs	r2, #12
 800260c:	401a      	ands	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	429a      	cmp	r2, r3
 8002616:	d1ec      	bne.n	80025f2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002618:	4b1e      	ldr	r3, [pc, #120]	; (8002694 <HAL_RCC_ClockConfig+0x184>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2201      	movs	r2, #1
 800261e:	4013      	ands	r3, r2
 8002620:	683a      	ldr	r2, [r7, #0]
 8002622:	429a      	cmp	r2, r3
 8002624:	d211      	bcs.n	800264a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002626:	4b1b      	ldr	r3, [pc, #108]	; (8002694 <HAL_RCC_ClockConfig+0x184>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2201      	movs	r2, #1
 800262c:	4393      	bics	r3, r2
 800262e:	0019      	movs	r1, r3
 8002630:	4b18      	ldr	r3, [pc, #96]	; (8002694 <HAL_RCC_ClockConfig+0x184>)
 8002632:	683a      	ldr	r2, [r7, #0]
 8002634:	430a      	orrs	r2, r1
 8002636:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002638:	4b16      	ldr	r3, [pc, #88]	; (8002694 <HAL_RCC_ClockConfig+0x184>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2201      	movs	r2, #1
 800263e:	4013      	ands	r3, r2
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	429a      	cmp	r2, r3
 8002644:	d001      	beq.n	800264a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e020      	b.n	800268c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2204      	movs	r2, #4
 8002650:	4013      	ands	r3, r2
 8002652:	d009      	beq.n	8002668 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002654:	4b10      	ldr	r3, [pc, #64]	; (8002698 <HAL_RCC_ClockConfig+0x188>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	4a11      	ldr	r2, [pc, #68]	; (80026a0 <HAL_RCC_ClockConfig+0x190>)
 800265a:	4013      	ands	r3, r2
 800265c:	0019      	movs	r1, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	68da      	ldr	r2, [r3, #12]
 8002662:	4b0d      	ldr	r3, [pc, #52]	; (8002698 <HAL_RCC_ClockConfig+0x188>)
 8002664:	430a      	orrs	r2, r1
 8002666:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002668:	f000 f820 	bl	80026ac <HAL_RCC_GetSysClockFreq>
 800266c:	0001      	movs	r1, r0
 800266e:	4b0a      	ldr	r3, [pc, #40]	; (8002698 <HAL_RCC_ClockConfig+0x188>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	091b      	lsrs	r3, r3, #4
 8002674:	220f      	movs	r2, #15
 8002676:	4013      	ands	r3, r2
 8002678:	4a0a      	ldr	r2, [pc, #40]	; (80026a4 <HAL_RCC_ClockConfig+0x194>)
 800267a:	5cd3      	ldrb	r3, [r2, r3]
 800267c:	000a      	movs	r2, r1
 800267e:	40da      	lsrs	r2, r3
 8002680:	4b09      	ldr	r3, [pc, #36]	; (80026a8 <HAL_RCC_ClockConfig+0x198>)
 8002682:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002684:	2003      	movs	r0, #3
 8002686:	f7fe fbbb 	bl	8000e00 <HAL_InitTick>
  
  return HAL_OK;
 800268a:	2300      	movs	r3, #0
}
 800268c:	0018      	movs	r0, r3
 800268e:	46bd      	mov	sp, r7
 8002690:	b004      	add	sp, #16
 8002692:	bd80      	pop	{r7, pc}
 8002694:	40022000 	.word	0x40022000
 8002698:	40021000 	.word	0x40021000
 800269c:	00001388 	.word	0x00001388
 80026a0:	fffff8ff 	.word	0xfffff8ff
 80026a4:	08003620 	.word	0x08003620
 80026a8:	2000003c 	.word	0x2000003c

080026ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026b2:	2300      	movs	r3, #0
 80026b4:	60fb      	str	r3, [r7, #12]
 80026b6:	2300      	movs	r3, #0
 80026b8:	60bb      	str	r3, [r7, #8]
 80026ba:	2300      	movs	r3, #0
 80026bc:	617b      	str	r3, [r7, #20]
 80026be:	2300      	movs	r3, #0
 80026c0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80026c2:	2300      	movs	r3, #0
 80026c4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80026c6:	4b21      	ldr	r3, [pc, #132]	; (800274c <HAL_RCC_GetSysClockFreq+0xa0>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	220c      	movs	r2, #12
 80026d0:	4013      	ands	r3, r2
 80026d2:	2b04      	cmp	r3, #4
 80026d4:	d002      	beq.n	80026dc <HAL_RCC_GetSysClockFreq+0x30>
 80026d6:	2b08      	cmp	r3, #8
 80026d8:	d003      	beq.n	80026e2 <HAL_RCC_GetSysClockFreq+0x36>
 80026da:	e02e      	b.n	800273a <HAL_RCC_GetSysClockFreq+0x8e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026dc:	4b1c      	ldr	r3, [pc, #112]	; (8002750 <HAL_RCC_GetSysClockFreq+0xa4>)
 80026de:	613b      	str	r3, [r7, #16]
      break;
 80026e0:	e02e      	b.n	8002740 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	0c9b      	lsrs	r3, r3, #18
 80026e6:	220f      	movs	r2, #15
 80026e8:	4013      	ands	r3, r2
 80026ea:	4a1a      	ldr	r2, [pc, #104]	; (8002754 <HAL_RCC_GetSysClockFreq+0xa8>)
 80026ec:	5cd3      	ldrb	r3, [r2, r3]
 80026ee:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80026f0:	4b16      	ldr	r3, [pc, #88]	; (800274c <HAL_RCC_GetSysClockFreq+0xa0>)
 80026f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f4:	220f      	movs	r2, #15
 80026f6:	4013      	ands	r3, r2
 80026f8:	4a17      	ldr	r2, [pc, #92]	; (8002758 <HAL_RCC_GetSysClockFreq+0xac>)
 80026fa:	5cd3      	ldrb	r3, [r2, r3]
 80026fc:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	23c0      	movs	r3, #192	; 0xc0
 8002702:	025b      	lsls	r3, r3, #9
 8002704:	401a      	ands	r2, r3
 8002706:	2380      	movs	r3, #128	; 0x80
 8002708:	025b      	lsls	r3, r3, #9
 800270a:	429a      	cmp	r2, r3
 800270c:	d109      	bne.n	8002722 <HAL_RCC_GetSysClockFreq+0x76>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800270e:	68b9      	ldr	r1, [r7, #8]
 8002710:	480f      	ldr	r0, [pc, #60]	; (8002750 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002712:	f7fd fcf9 	bl	8000108 <__udivsi3>
 8002716:	0003      	movs	r3, r0
 8002718:	001a      	movs	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4353      	muls	r3, r2
 800271e:	617b      	str	r3, [r7, #20]
 8002720:	e008      	b.n	8002734 <HAL_RCC_GetSysClockFreq+0x88>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002722:	68b9      	ldr	r1, [r7, #8]
 8002724:	480d      	ldr	r0, [pc, #52]	; (800275c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002726:	f7fd fcef 	bl	8000108 <__udivsi3>
 800272a:	0003      	movs	r3, r0
 800272c:	001a      	movs	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4353      	muls	r3, r2
 8002732:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	613b      	str	r3, [r7, #16]
      break;
 8002738:	e002      	b.n	8002740 <HAL_RCC_GetSysClockFreq+0x94>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800273a:	4b08      	ldr	r3, [pc, #32]	; (800275c <HAL_RCC_GetSysClockFreq+0xb0>)
 800273c:	613b      	str	r3, [r7, #16]
      break;
 800273e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002740:	693b      	ldr	r3, [r7, #16]
}
 8002742:	0018      	movs	r0, r3
 8002744:	46bd      	mov	sp, r7
 8002746:	b006      	add	sp, #24
 8002748:	bd80      	pop	{r7, pc}
 800274a:	46c0      	nop			; (mov r8, r8)
 800274c:	40021000 	.word	0x40021000
 8002750:	00f42400 	.word	0x00f42400
 8002754:	08003630 	.word	0x08003630
 8002758:	08003640 	.word	0x08003640
 800275c:	007a1200 	.word	0x007a1200

08002760 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e0a8      	b.n	80028c4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002776:	2b00      	cmp	r3, #0
 8002778:	d109      	bne.n	800278e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685a      	ldr	r2, [r3, #4]
 800277e:	2382      	movs	r3, #130	; 0x82
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	429a      	cmp	r2, r3
 8002784:	d009      	beq.n	800279a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	61da      	str	r2, [r3, #28]
 800278c:	e005      	b.n	800279a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	225d      	movs	r2, #93	; 0x5d
 80027a4:	5c9b      	ldrb	r3, [r3, r2]
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d107      	bne.n	80027bc <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	225c      	movs	r2, #92	; 0x5c
 80027b0:	2100      	movs	r1, #0
 80027b2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	0018      	movs	r0, r3
 80027b8:	f7fe fa56 	bl	8000c68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	225d      	movs	r2, #93	; 0x5d
 80027c0:	2102      	movs	r1, #2
 80027c2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2140      	movs	r1, #64	; 0x40
 80027d0:	438a      	bics	r2, r1
 80027d2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68da      	ldr	r2, [r3, #12]
 80027d8:	23e0      	movs	r3, #224	; 0xe0
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	429a      	cmp	r2, r3
 80027de:	d902      	bls.n	80027e6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80027e0:	2300      	movs	r3, #0
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	e002      	b.n	80027ec <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80027e6:	2380      	movs	r3, #128	; 0x80
 80027e8:	015b      	lsls	r3, r3, #5
 80027ea:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	68da      	ldr	r2, [r3, #12]
 80027f0:	23f0      	movs	r3, #240	; 0xf0
 80027f2:	011b      	lsls	r3, r3, #4
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d008      	beq.n	800280a <HAL_SPI_Init+0xaa>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	68da      	ldr	r2, [r3, #12]
 80027fc:	23e0      	movs	r3, #224	; 0xe0
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	429a      	cmp	r2, r3
 8002802:	d002      	beq.n	800280a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685a      	ldr	r2, [r3, #4]
 800280e:	2382      	movs	r3, #130	; 0x82
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	401a      	ands	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6899      	ldr	r1, [r3, #8]
 8002818:	2384      	movs	r3, #132	; 0x84
 800281a:	021b      	lsls	r3, r3, #8
 800281c:	400b      	ands	r3, r1
 800281e:	431a      	orrs	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	691b      	ldr	r3, [r3, #16]
 8002824:	2102      	movs	r1, #2
 8002826:	400b      	ands	r3, r1
 8002828:	431a      	orrs	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	2101      	movs	r1, #1
 8002830:	400b      	ands	r3, r1
 8002832:	431a      	orrs	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6999      	ldr	r1, [r3, #24]
 8002838:	2380      	movs	r3, #128	; 0x80
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	400b      	ands	r3, r1
 800283e:	431a      	orrs	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	69db      	ldr	r3, [r3, #28]
 8002844:	2138      	movs	r1, #56	; 0x38
 8002846:	400b      	ands	r3, r1
 8002848:	431a      	orrs	r2, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a1b      	ldr	r3, [r3, #32]
 800284e:	2180      	movs	r1, #128	; 0x80
 8002850:	400b      	ands	r3, r1
 8002852:	431a      	orrs	r2, r3
 8002854:	0011      	movs	r1, r2
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800285a:	2380      	movs	r3, #128	; 0x80
 800285c:	019b      	lsls	r3, r3, #6
 800285e:	401a      	ands	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	430a      	orrs	r2, r1
 8002866:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	0c1b      	lsrs	r3, r3, #16
 800286e:	2204      	movs	r2, #4
 8002870:	401a      	ands	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002876:	2110      	movs	r1, #16
 8002878:	400b      	ands	r3, r1
 800287a:	431a      	orrs	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002880:	2108      	movs	r1, #8
 8002882:	400b      	ands	r3, r1
 8002884:	431a      	orrs	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	68d9      	ldr	r1, [r3, #12]
 800288a:	23f0      	movs	r3, #240	; 0xf0
 800288c:	011b      	lsls	r3, r3, #4
 800288e:	400b      	ands	r3, r1
 8002890:	431a      	orrs	r2, r3
 8002892:	0011      	movs	r1, r2
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	2380      	movs	r3, #128	; 0x80
 8002898:	015b      	lsls	r3, r3, #5
 800289a:	401a      	ands	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	430a      	orrs	r2, r1
 80028a2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	69da      	ldr	r2, [r3, #28]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4907      	ldr	r1, [pc, #28]	; (80028cc <HAL_SPI_Init+0x16c>)
 80028b0:	400a      	ands	r2, r1
 80028b2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	225d      	movs	r2, #93	; 0x5d
 80028be:	2101      	movs	r1, #1
 80028c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	0018      	movs	r0, r3
 80028c6:	46bd      	mov	sp, r7
 80028c8:	b004      	add	sp, #16
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	fffff7ff 	.word	0xfffff7ff

080028d0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b088      	sub	sp, #32
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	60b9      	str	r1, [r7, #8]
 80028da:	603b      	str	r3, [r7, #0]
 80028dc:	1dbb      	adds	r3, r7, #6
 80028de:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80028e0:	231f      	movs	r3, #31
 80028e2:	18fb      	adds	r3, r7, r3
 80028e4:	2200      	movs	r2, #0
 80028e6:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	225c      	movs	r2, #92	; 0x5c
 80028ec:	5c9b      	ldrb	r3, [r3, r2]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d101      	bne.n	80028f6 <HAL_SPI_Transmit+0x26>
 80028f2:	2302      	movs	r3, #2
 80028f4:	e147      	b.n	8002b86 <HAL_SPI_Transmit+0x2b6>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	225c      	movs	r2, #92	; 0x5c
 80028fa:	2101      	movs	r1, #1
 80028fc:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80028fe:	f7fe fac5 	bl	8000e8c <HAL_GetTick>
 8002902:	0003      	movs	r3, r0
 8002904:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002906:	2316      	movs	r3, #22
 8002908:	18fb      	adds	r3, r7, r3
 800290a:	1dba      	adds	r2, r7, #6
 800290c:	8812      	ldrh	r2, [r2, #0]
 800290e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	225d      	movs	r2, #93	; 0x5d
 8002914:	5c9b      	ldrb	r3, [r3, r2]
 8002916:	b2db      	uxtb	r3, r3
 8002918:	2b01      	cmp	r3, #1
 800291a:	d004      	beq.n	8002926 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800291c:	231f      	movs	r3, #31
 800291e:	18fb      	adds	r3, r7, r3
 8002920:	2202      	movs	r2, #2
 8002922:	701a      	strb	r2, [r3, #0]
    goto error;
 8002924:	e128      	b.n	8002b78 <HAL_SPI_Transmit+0x2a8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d003      	beq.n	8002934 <HAL_SPI_Transmit+0x64>
 800292c:	1dbb      	adds	r3, r7, #6
 800292e:	881b      	ldrh	r3, [r3, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d104      	bne.n	800293e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002934:	231f      	movs	r3, #31
 8002936:	18fb      	adds	r3, r7, r3
 8002938:	2201      	movs	r2, #1
 800293a:	701a      	strb	r2, [r3, #0]
    goto error;
 800293c:	e11c      	b.n	8002b78 <HAL_SPI_Transmit+0x2a8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	225d      	movs	r2, #93	; 0x5d
 8002942:	2103      	movs	r1, #3
 8002944:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2200      	movs	r2, #0
 800294a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	68ba      	ldr	r2, [r7, #8]
 8002950:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	1dba      	adds	r2, r7, #6
 8002956:	8812      	ldrh	r2, [r2, #0]
 8002958:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	1dba      	adds	r2, r7, #6
 800295e:	8812      	ldrh	r2, [r2, #0]
 8002960:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2200      	movs	r2, #0
 8002966:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2244      	movs	r2, #68	; 0x44
 800296c:	2100      	movs	r1, #0
 800296e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2246      	movs	r2, #70	; 0x46
 8002974:	2100      	movs	r1, #0
 8002976:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2200      	movs	r2, #0
 800297c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2200      	movs	r2, #0
 8002982:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	689a      	ldr	r2, [r3, #8]
 8002988:	2380      	movs	r3, #128	; 0x80
 800298a:	021b      	lsls	r3, r3, #8
 800298c:	429a      	cmp	r2, r3
 800298e:	d110      	bne.n	80029b2 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2140      	movs	r1, #64	; 0x40
 800299c:	438a      	bics	r2, r1
 800299e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2180      	movs	r1, #128	; 0x80
 80029ac:	01c9      	lsls	r1, r1, #7
 80029ae:	430a      	orrs	r2, r1
 80029b0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2240      	movs	r2, #64	; 0x40
 80029ba:	4013      	ands	r3, r2
 80029bc:	2b40      	cmp	r3, #64	; 0x40
 80029be:	d007      	beq.n	80029d0 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2140      	movs	r1, #64	; 0x40
 80029cc:	430a      	orrs	r2, r1
 80029ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	68da      	ldr	r2, [r3, #12]
 80029d4:	23e0      	movs	r3, #224	; 0xe0
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	429a      	cmp	r2, r3
 80029da:	d952      	bls.n	8002a82 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d004      	beq.n	80029ee <HAL_SPI_Transmit+0x11e>
 80029e4:	2316      	movs	r3, #22
 80029e6:	18fb      	adds	r3, r7, r3
 80029e8:	881b      	ldrh	r3, [r3, #0]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d143      	bne.n	8002a76 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f2:	881a      	ldrh	r2, [r3, #0]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029fe:	1c9a      	adds	r2, r3, #2
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002a12:	e030      	b.n	8002a76 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	2202      	movs	r2, #2
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d112      	bne.n	8002a48 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a26:	881a      	ldrh	r2, [r3, #0]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a32:	1c9a      	adds	r2, r3, #2
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a46:	e016      	b.n	8002a76 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a48:	f7fe fa20 	bl	8000e8c <HAL_GetTick>
 8002a4c:	0002      	movs	r2, r0
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	683a      	ldr	r2, [r7, #0]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d802      	bhi.n	8002a5e <HAL_SPI_Transmit+0x18e>
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	d102      	bne.n	8002a64 <HAL_SPI_Transmit+0x194>
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d108      	bne.n	8002a76 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8002a64:	231f      	movs	r3, #31
 8002a66:	18fb      	adds	r3, r7, r3
 8002a68:	2203      	movs	r2, #3
 8002a6a:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	225d      	movs	r2, #93	; 0x5d
 8002a70:	2101      	movs	r1, #1
 8002a72:	5499      	strb	r1, [r3, r2]
          goto error;
 8002a74:	e080      	b.n	8002b78 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d1c9      	bne.n	8002a14 <HAL_SPI_Transmit+0x144>
 8002a80:	e053      	b.n	8002b2a <HAL_SPI_Transmit+0x25a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d004      	beq.n	8002a94 <HAL_SPI_Transmit+0x1c4>
 8002a8a:	2316      	movs	r3, #22
 8002a8c:	18fb      	adds	r3, r7, r3
 8002a8e:	881b      	ldrh	r3, [r3, #0]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d145      	bne.n	8002b20 <HAL_SPI_Transmit+0x250>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	330c      	adds	r3, #12
 8002a9e:	7812      	ldrb	r2, [r2, #0]
 8002aa0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa6:	1c5a      	adds	r2, r3, #1
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8002aba:	e031      	b.n	8002b20 <HAL_SPI_Transmit+0x250>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	2202      	movs	r2, #2
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d113      	bne.n	8002af2 <HAL_SPI_Transmit+0x222>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	330c      	adds	r3, #12
 8002ad4:	7812      	ldrb	r2, [r2, #0]
 8002ad6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002adc:	1c5a      	adds	r2, r3, #1
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002af0:	e016      	b.n	8002b20 <HAL_SPI_Transmit+0x250>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002af2:	f7fe f9cb 	bl	8000e8c <HAL_GetTick>
 8002af6:	0002      	movs	r2, r0
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d802      	bhi.n	8002b08 <HAL_SPI_Transmit+0x238>
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	3301      	adds	r3, #1
 8002b06:	d102      	bne.n	8002b0e <HAL_SPI_Transmit+0x23e>
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d108      	bne.n	8002b20 <HAL_SPI_Transmit+0x250>
        {
          errorcode = HAL_TIMEOUT;
 8002b0e:	231f      	movs	r3, #31
 8002b10:	18fb      	adds	r3, r7, r3
 8002b12:	2203      	movs	r2, #3
 8002b14:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	225d      	movs	r2, #93	; 0x5d
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	5499      	strb	r1, [r3, r2]
          goto error;
 8002b1e:	e02b      	b.n	8002b78 <HAL_SPI_Transmit+0x2a8>
    while (hspi->TxXferCount > 0U)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1c8      	bne.n	8002abc <HAL_SPI_Transmit+0x1ec>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	6839      	ldr	r1, [r7, #0]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	0018      	movs	r0, r3
 8002b32:	f000 fcef 	bl	8003514 <SPI_EndRxTxTransaction>
 8002b36:	1e03      	subs	r3, r0, #0
 8002b38:	d002      	beq.n	8002b40 <HAL_SPI_Transmit+0x270>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2220      	movs	r2, #32
 8002b3e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d10a      	bne.n	8002b5e <HAL_SPI_Transmit+0x28e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b48:	2300      	movs	r3, #0
 8002b4a:	613b      	str	r3, [r7, #16]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	613b      	str	r3, [r7, #16]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	613b      	str	r3, [r7, #16]
 8002b5c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d004      	beq.n	8002b70 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8002b66:	231f      	movs	r3, #31
 8002b68:	18fb      	adds	r3, r7, r3
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	701a      	strb	r2, [r3, #0]
 8002b6e:	e003      	b.n	8002b78 <HAL_SPI_Transmit+0x2a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	225d      	movs	r2, #93	; 0x5d
 8002b74:	2101      	movs	r1, #1
 8002b76:	5499      	strb	r1, [r3, r2]
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	225c      	movs	r2, #92	; 0x5c
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002b80:	231f      	movs	r3, #31
 8002b82:	18fb      	adds	r3, r7, r3
 8002b84:	781b      	ldrb	r3, [r3, #0]
}
 8002b86:	0018      	movs	r0, r3
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	b008      	add	sp, #32
 8002b8c:	bd80      	pop	{r7, pc}
	...

08002b90 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b90:	b590      	push	{r4, r7, lr}
 8002b92:	b089      	sub	sp, #36	; 0x24
 8002b94:	af02      	add	r7, sp, #8
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	603b      	str	r3, [r7, #0]
 8002b9c:	1dbb      	adds	r3, r7, #6
 8002b9e:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ba0:	2117      	movs	r1, #23
 8002ba2:	187b      	adds	r3, r7, r1
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	701a      	strb	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	225d      	movs	r2, #93	; 0x5d
 8002bac:	5c9b      	ldrb	r3, [r3, r2]
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d003      	beq.n	8002bbc <HAL_SPI_Receive+0x2c>
  {
    errorcode = HAL_BUSY;
 8002bb4:	187b      	adds	r3, r7, r1
 8002bb6:	2202      	movs	r2, #2
 8002bb8:	701a      	strb	r2, [r3, #0]
    goto error;
 8002bba:	e12b      	b.n	8002e14 <HAL_SPI_Receive+0x284>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	685a      	ldr	r2, [r3, #4]
 8002bc0:	2382      	movs	r3, #130	; 0x82
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d113      	bne.n	8002bf0 <HAL_SPI_Receive+0x60>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d10f      	bne.n	8002bf0 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	225d      	movs	r2, #93	; 0x5d
 8002bd4:	2104      	movs	r1, #4
 8002bd6:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002bd8:	1dbb      	adds	r3, r7, #6
 8002bda:	881c      	ldrh	r4, [r3, #0]
 8002bdc:	68ba      	ldr	r2, [r7, #8]
 8002bde:	68b9      	ldr	r1, [r7, #8]
 8002be0:	68f8      	ldr	r0, [r7, #12]
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	9300      	str	r3, [sp, #0]
 8002be6:	0023      	movs	r3, r4
 8002be8:	f000 f924 	bl	8002e34 <HAL_SPI_TransmitReceive>
 8002bec:	0003      	movs	r3, r0
 8002bee:	e118      	b.n	8002e22 <HAL_SPI_Receive+0x292>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	225c      	movs	r2, #92	; 0x5c
 8002bf4:	5c9b      	ldrb	r3, [r3, r2]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d101      	bne.n	8002bfe <HAL_SPI_Receive+0x6e>
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	e111      	b.n	8002e22 <HAL_SPI_Receive+0x292>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	225c      	movs	r2, #92	; 0x5c
 8002c02:	2101      	movs	r1, #1
 8002c04:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c06:	f7fe f941 	bl	8000e8c <HAL_GetTick>
 8002c0a:	0003      	movs	r3, r0
 8002c0c:	613b      	str	r3, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d003      	beq.n	8002c1c <HAL_SPI_Receive+0x8c>
 8002c14:	1dbb      	adds	r3, r7, #6
 8002c16:	881b      	ldrh	r3, [r3, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d104      	bne.n	8002c26 <HAL_SPI_Receive+0x96>
  {
    errorcode = HAL_ERROR;
 8002c1c:	2317      	movs	r3, #23
 8002c1e:	18fb      	adds	r3, r7, r3
 8002c20:	2201      	movs	r2, #1
 8002c22:	701a      	strb	r2, [r3, #0]
    goto error;
 8002c24:	e0f6      	b.n	8002e14 <HAL_SPI_Receive+0x284>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	225d      	movs	r2, #93	; 0x5d
 8002c2a:	2104      	movs	r1, #4
 8002c2c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	68ba      	ldr	r2, [r7, #8]
 8002c38:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	1dba      	adds	r2, r7, #6
 8002c3e:	2144      	movs	r1, #68	; 0x44
 8002c40:	8812      	ldrh	r2, [r2, #0]
 8002c42:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	1dba      	adds	r2, r7, #6
 8002c48:	2146      	movs	r1, #70	; 0x46
 8002c4a:	8812      	ldrh	r2, [r2, #0]
 8002c4c:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2200      	movs	r2, #0
 8002c64:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	68da      	ldr	r2, [r3, #12]
 8002c70:	23e0      	movs	r3, #224	; 0xe0
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d908      	bls.n	8002c8a <HAL_SPI_Receive+0xfa>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	685a      	ldr	r2, [r3, #4]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	496a      	ldr	r1, [pc, #424]	; (8002e2c <HAL_SPI_Receive+0x29c>)
 8002c84:	400a      	ands	r2, r1
 8002c86:	605a      	str	r2, [r3, #4]
 8002c88:	e008      	b.n	8002c9c <HAL_SPI_Receive+0x10c>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	685a      	ldr	r2, [r3, #4]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2180      	movs	r1, #128	; 0x80
 8002c96:	0149      	lsls	r1, r1, #5
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	689a      	ldr	r2, [r3, #8]
 8002ca0:	2380      	movs	r3, #128	; 0x80
 8002ca2:	021b      	lsls	r3, r3, #8
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d10f      	bne.n	8002cc8 <HAL_SPI_Receive+0x138>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2140      	movs	r1, #64	; 0x40
 8002cb4:	438a      	bics	r2, r1
 8002cb6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	495b      	ldr	r1, [pc, #364]	; (8002e30 <HAL_SPI_Receive+0x2a0>)
 8002cc4:	400a      	ands	r2, r1
 8002cc6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2240      	movs	r2, #64	; 0x40
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	2b40      	cmp	r3, #64	; 0x40
 8002cd4:	d007      	beq.n	8002ce6 <HAL_SPI_Receive+0x156>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2140      	movs	r1, #64	; 0x40
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	68da      	ldr	r2, [r3, #12]
 8002cea:	23e0      	movs	r3, #224	; 0xe0
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d900      	bls.n	8002cf4 <HAL_SPI_Receive+0x164>
 8002cf2:	e071      	b.n	8002dd8 <HAL_SPI_Receive+0x248>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002cf4:	e035      	b.n	8002d62 <HAL_SPI_Receive+0x1d2>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	4013      	ands	r3, r2
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d117      	bne.n	8002d34 <HAL_SPI_Receive+0x1a4>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	330c      	adds	r3, #12
 8002d0a:	001a      	movs	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d10:	7812      	ldrb	r2, [r2, #0]
 8002d12:	b2d2      	uxtb	r2, r2
 8002d14:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	1c5a      	adds	r2, r3, #1
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2246      	movs	r2, #70	; 0x46
 8002d24:	5a9b      	ldrh	r3, [r3, r2]
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	b299      	uxth	r1, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2246      	movs	r2, #70	; 0x46
 8002d30:	5299      	strh	r1, [r3, r2]
 8002d32:	e016      	b.n	8002d62 <HAL_SPI_Receive+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d34:	f7fe f8aa 	bl	8000e8c <HAL_GetTick>
 8002d38:	0002      	movs	r2, r0
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	683a      	ldr	r2, [r7, #0]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d802      	bhi.n	8002d4a <HAL_SPI_Receive+0x1ba>
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	3301      	adds	r3, #1
 8002d48:	d102      	bne.n	8002d50 <HAL_SPI_Receive+0x1c0>
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d108      	bne.n	8002d62 <HAL_SPI_Receive+0x1d2>
        {
          errorcode = HAL_TIMEOUT;
 8002d50:	2317      	movs	r3, #23
 8002d52:	18fb      	adds	r3, r7, r3
 8002d54:	2203      	movs	r2, #3
 8002d56:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	225d      	movs	r2, #93	; 0x5d
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	5499      	strb	r1, [r3, r2]
          goto error;
 8002d60:	e058      	b.n	8002e14 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2246      	movs	r2, #70	; 0x46
 8002d66:	5a9b      	ldrh	r3, [r3, r2]
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1c3      	bne.n	8002cf6 <HAL_SPI_Receive+0x166>
 8002d6e:	e039      	b.n	8002de4 <HAL_SPI_Receive+0x254>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	2201      	movs	r2, #1
 8002d78:	4013      	ands	r3, r2
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d115      	bne.n	8002daa <HAL_SPI_Receive+0x21a>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68da      	ldr	r2, [r3, #12]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d88:	b292      	uxth	r2, r2
 8002d8a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d90:	1c9a      	adds	r2, r3, #2
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2246      	movs	r2, #70	; 0x46
 8002d9a:	5a9b      	ldrh	r3, [r3, r2]
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	b299      	uxth	r1, r3
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2246      	movs	r2, #70	; 0x46
 8002da6:	5299      	strh	r1, [r3, r2]
 8002da8:	e016      	b.n	8002dd8 <HAL_SPI_Receive+0x248>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002daa:	f7fe f86f 	bl	8000e8c <HAL_GetTick>
 8002dae:	0002      	movs	r2, r0
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	683a      	ldr	r2, [r7, #0]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d802      	bhi.n	8002dc0 <HAL_SPI_Receive+0x230>
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	d102      	bne.n	8002dc6 <HAL_SPI_Receive+0x236>
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d108      	bne.n	8002dd8 <HAL_SPI_Receive+0x248>
        {
          errorcode = HAL_TIMEOUT;
 8002dc6:	2317      	movs	r3, #23
 8002dc8:	18fb      	adds	r3, r7, r3
 8002dca:	2203      	movs	r2, #3
 8002dcc:	701a      	strb	r2, [r3, #0]
          hspi->State = HAL_SPI_STATE_READY;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	225d      	movs	r2, #93	; 0x5d
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	5499      	strb	r1, [r3, r2]
          goto error;
 8002dd6:	e01d      	b.n	8002e14 <HAL_SPI_Receive+0x284>
    while (hspi->RxXferCount > 0U)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2246      	movs	r2, #70	; 0x46
 8002ddc:	5a9b      	ldrh	r3, [r3, r2]
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d1c5      	bne.n	8002d70 <HAL_SPI_Receive+0x1e0>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	6839      	ldr	r1, [r7, #0]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	0018      	movs	r0, r3
 8002dec:	f000 fb34 	bl	8003458 <SPI_EndRxTransaction>
 8002df0:	1e03      	subs	r3, r0, #0
 8002df2:	d002      	beq.n	8002dfa <HAL_SPI_Receive+0x26a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2220      	movs	r2, #32
 8002df8:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d004      	beq.n	8002e0c <HAL_SPI_Receive+0x27c>
  {
    errorcode = HAL_ERROR;
 8002e02:	2317      	movs	r3, #23
 8002e04:	18fb      	adds	r3, r7, r3
 8002e06:	2201      	movs	r2, #1
 8002e08:	701a      	strb	r2, [r3, #0]
 8002e0a:	e003      	b.n	8002e14 <HAL_SPI_Receive+0x284>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	225d      	movs	r2, #93	; 0x5d
 8002e10:	2101      	movs	r1, #1
 8002e12:	5499      	strb	r1, [r3, r2]
  }

error :
  __HAL_UNLOCK(hspi);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	225c      	movs	r2, #92	; 0x5c
 8002e18:	2100      	movs	r1, #0
 8002e1a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002e1c:	2317      	movs	r3, #23
 8002e1e:	18fb      	adds	r3, r7, r3
 8002e20:	781b      	ldrb	r3, [r3, #0]
}
 8002e22:	0018      	movs	r0, r3
 8002e24:	46bd      	mov	sp, r7
 8002e26:	b007      	add	sp, #28
 8002e28:	bd90      	pop	{r4, r7, pc}
 8002e2a:	46c0      	nop			; (mov r8, r8)
 8002e2c:	ffffefff 	.word	0xffffefff
 8002e30:	ffffbfff 	.word	0xffffbfff

08002e34 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b08a      	sub	sp, #40	; 0x28
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
 8002e40:	001a      	movs	r2, r3
 8002e42:	1cbb      	adds	r3, r7, #2
 8002e44:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002e46:	2301      	movs	r3, #1
 8002e48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002e4a:	2323      	movs	r3, #35	; 0x23
 8002e4c:	18fb      	adds	r3, r7, r3
 8002e4e:	2200      	movs	r2, #0
 8002e50:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	225c      	movs	r2, #92	; 0x5c
 8002e56:	5c9b      	ldrb	r3, [r3, r2]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d101      	bne.n	8002e60 <HAL_SPI_TransmitReceive+0x2c>
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	e1c4      	b.n	80031ea <HAL_SPI_TransmitReceive+0x3b6>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	225c      	movs	r2, #92	; 0x5c
 8002e64:	2101      	movs	r1, #1
 8002e66:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e68:	f7fe f810 	bl	8000e8c <HAL_GetTick>
 8002e6c:	0003      	movs	r3, r0
 8002e6e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002e70:	201b      	movs	r0, #27
 8002e72:	183b      	adds	r3, r7, r0
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	215d      	movs	r1, #93	; 0x5d
 8002e78:	5c52      	ldrb	r2, [r2, r1]
 8002e7a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002e82:	2312      	movs	r3, #18
 8002e84:	18fb      	adds	r3, r7, r3
 8002e86:	1cba      	adds	r2, r7, #2
 8002e88:	8812      	ldrh	r2, [r2, #0]
 8002e8a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002e8c:	183b      	adds	r3, r7, r0
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d011      	beq.n	8002eb8 <HAL_SPI_TransmitReceive+0x84>
 8002e94:	697a      	ldr	r2, [r7, #20]
 8002e96:	2382      	movs	r3, #130	; 0x82
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d107      	bne.n	8002eae <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d103      	bne.n	8002eae <HAL_SPI_TransmitReceive+0x7a>
 8002ea6:	183b      	adds	r3, r7, r0
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	2b04      	cmp	r3, #4
 8002eac:	d004      	beq.n	8002eb8 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8002eae:	2323      	movs	r3, #35	; 0x23
 8002eb0:	18fb      	adds	r3, r7, r3
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	701a      	strb	r2, [r3, #0]
    goto error;
 8002eb6:	e191      	b.n	80031dc <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d006      	beq.n	8002ecc <HAL_SPI_TransmitReceive+0x98>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d003      	beq.n	8002ecc <HAL_SPI_TransmitReceive+0x98>
 8002ec4:	1cbb      	adds	r3, r7, #2
 8002ec6:	881b      	ldrh	r3, [r3, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d104      	bne.n	8002ed6 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002ecc:	2323      	movs	r3, #35	; 0x23
 8002ece:	18fb      	adds	r3, r7, r3
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	701a      	strb	r2, [r3, #0]
    goto error;
 8002ed4:	e182      	b.n	80031dc <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	225d      	movs	r2, #93	; 0x5d
 8002eda:	5c9b      	ldrb	r3, [r3, r2]
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b04      	cmp	r3, #4
 8002ee0:	d003      	beq.n	8002eea <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	225d      	movs	r2, #93	; 0x5d
 8002ee6:	2105      	movs	r1, #5
 8002ee8:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2200      	movs	r2, #0
 8002eee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	1cba      	adds	r2, r7, #2
 8002efa:	2146      	movs	r1, #70	; 0x46
 8002efc:	8812      	ldrh	r2, [r2, #0]
 8002efe:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	1cba      	adds	r2, r7, #2
 8002f04:	2144      	movs	r1, #68	; 0x44
 8002f06:	8812      	ldrh	r2, [r2, #0]
 8002f08:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	68ba      	ldr	r2, [r7, #8]
 8002f0e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	1cba      	adds	r2, r7, #2
 8002f14:	8812      	ldrh	r2, [r2, #0]
 8002f16:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	1cba      	adds	r2, r7, #2
 8002f1c:	8812      	ldrh	r2, [r2, #0]
 8002f1e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	68da      	ldr	r2, [r3, #12]
 8002f30:	23e0      	movs	r3, #224	; 0xe0
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d908      	bls.n	8002f4a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	685a      	ldr	r2, [r3, #4]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	49ac      	ldr	r1, [pc, #688]	; (80031f4 <HAL_SPI_TransmitReceive+0x3c0>)
 8002f44:	400a      	ands	r2, r1
 8002f46:	605a      	str	r2, [r3, #4]
 8002f48:	e008      	b.n	8002f5c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	685a      	ldr	r2, [r3, #4]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2180      	movs	r1, #128	; 0x80
 8002f56:	0149      	lsls	r1, r1, #5
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2240      	movs	r2, #64	; 0x40
 8002f64:	4013      	ands	r3, r2
 8002f66:	2b40      	cmp	r3, #64	; 0x40
 8002f68:	d007      	beq.n	8002f7a <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2140      	movs	r1, #64	; 0x40
 8002f76:	430a      	orrs	r2, r1
 8002f78:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	68da      	ldr	r2, [r3, #12]
 8002f7e:	23e0      	movs	r3, #224	; 0xe0
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d800      	bhi.n	8002f88 <HAL_SPI_TransmitReceive+0x154>
 8002f86:	e083      	b.n	8003090 <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d005      	beq.n	8002f9c <HAL_SPI_TransmitReceive+0x168>
 8002f90:	2312      	movs	r3, #18
 8002f92:	18fb      	adds	r3, r7, r3
 8002f94:	881b      	ldrh	r3, [r3, #0]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d000      	beq.n	8002f9c <HAL_SPI_TransmitReceive+0x168>
 8002f9a:	e06d      	b.n	8003078 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa0:	881a      	ldrh	r2, [r3, #0]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fac:	1c9a      	adds	r2, r3, #2
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	b29a      	uxth	r2, r3
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fc0:	e05a      	b.n	8003078 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	2202      	movs	r2, #2
 8002fca:	4013      	ands	r3, r2
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d11b      	bne.n	8003008 <HAL_SPI_TransmitReceive+0x1d4>
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d016      	beq.n	8003008 <HAL_SPI_TransmitReceive+0x1d4>
 8002fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d113      	bne.n	8003008 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe4:	881a      	ldrh	r2, [r3, #0]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff0:	1c9a      	adds	r2, r3, #2
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003004:	2300      	movs	r3, #0
 8003006:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	2201      	movs	r2, #1
 8003010:	4013      	ands	r3, r2
 8003012:	2b01      	cmp	r3, #1
 8003014:	d11c      	bne.n	8003050 <HAL_SPI_TransmitReceive+0x21c>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2246      	movs	r2, #70	; 0x46
 800301a:	5a9b      	ldrh	r3, [r3, r2]
 800301c:	b29b      	uxth	r3, r3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d016      	beq.n	8003050 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68da      	ldr	r2, [r3, #12]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302c:	b292      	uxth	r2, r2
 800302e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003034:	1c9a      	adds	r2, r3, #2
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2246      	movs	r2, #70	; 0x46
 800303e:	5a9b      	ldrh	r3, [r3, r2]
 8003040:	b29b      	uxth	r3, r3
 8003042:	3b01      	subs	r3, #1
 8003044:	b299      	uxth	r1, r3
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2246      	movs	r2, #70	; 0x46
 800304a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800304c:	2301      	movs	r3, #1
 800304e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003050:	f7fd ff1c 	bl	8000e8c <HAL_GetTick>
 8003054:	0002      	movs	r2, r0
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800305c:	429a      	cmp	r2, r3
 800305e:	d80b      	bhi.n	8003078 <HAL_SPI_TransmitReceive+0x244>
 8003060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003062:	3301      	adds	r3, #1
 8003064:	d008      	beq.n	8003078 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 8003066:	2323      	movs	r3, #35	; 0x23
 8003068:	18fb      	adds	r3, r7, r3
 800306a:	2203      	movs	r2, #3
 800306c:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	225d      	movs	r2, #93	; 0x5d
 8003072:	2101      	movs	r1, #1
 8003074:	5499      	strb	r1, [r3, r2]
        goto error;
 8003076:	e0b1      	b.n	80031dc <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800307c:	b29b      	uxth	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d19f      	bne.n	8002fc2 <HAL_SPI_TransmitReceive+0x18e>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2246      	movs	r2, #70	; 0x46
 8003086:	5a9b      	ldrh	r3, [r3, r2]
 8003088:	b29b      	uxth	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d199      	bne.n	8002fc2 <HAL_SPI_TransmitReceive+0x18e>
 800308e:	e089      	b.n	80031a4 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d005      	beq.n	80030a4 <HAL_SPI_TransmitReceive+0x270>
 8003098:	2312      	movs	r3, #18
 800309a:	18fb      	adds	r3, r7, r3
 800309c:	881b      	ldrh	r3, [r3, #0]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d000      	beq.n	80030a4 <HAL_SPI_TransmitReceive+0x270>
 80030a2:	e074      	b.n	800318e <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	330c      	adds	r3, #12
 80030ae:	7812      	ldrb	r2, [r2, #0]
 80030b0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b6:	1c5a      	adds	r2, r3, #1
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	3b01      	subs	r3, #1
 80030c4:	b29a      	uxth	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030ca:	e060      	b.n	800318e <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	2202      	movs	r2, #2
 80030d4:	4013      	ands	r3, r2
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d11c      	bne.n	8003114 <HAL_SPI_TransmitReceive+0x2e0>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030de:	b29b      	uxth	r3, r3
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d017      	beq.n	8003114 <HAL_SPI_TransmitReceive+0x2e0>
 80030e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d114      	bne.n	8003114 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	330c      	adds	r3, #12
 80030f4:	7812      	ldrb	r2, [r2, #0]
 80030f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030fc:	1c5a      	adds	r2, r3, #1
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003106:	b29b      	uxth	r3, r3
 8003108:	3b01      	subs	r3, #1
 800310a:	b29a      	uxth	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003110:	2300      	movs	r3, #0
 8003112:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	2201      	movs	r2, #1
 800311c:	4013      	ands	r3, r2
 800311e:	2b01      	cmp	r3, #1
 8003120:	d11e      	bne.n	8003160 <HAL_SPI_TransmitReceive+0x32c>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2246      	movs	r2, #70	; 0x46
 8003126:	5a9b      	ldrh	r3, [r3, r2]
 8003128:	b29b      	uxth	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d018      	beq.n	8003160 <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	330c      	adds	r3, #12
 8003134:	001a      	movs	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313a:	7812      	ldrb	r2, [r2, #0]
 800313c:	b2d2      	uxtb	r2, r2
 800313e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003144:	1c5a      	adds	r2, r3, #1
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2246      	movs	r2, #70	; 0x46
 800314e:	5a9b      	ldrh	r3, [r3, r2]
 8003150:	b29b      	uxth	r3, r3
 8003152:	3b01      	subs	r3, #1
 8003154:	b299      	uxth	r1, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2246      	movs	r2, #70	; 0x46
 800315a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800315c:	2301      	movs	r3, #1
 800315e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003160:	f7fd fe94 	bl	8000e8c <HAL_GetTick>
 8003164:	0002      	movs	r2, r0
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800316c:	429a      	cmp	r2, r3
 800316e:	d802      	bhi.n	8003176 <HAL_SPI_TransmitReceive+0x342>
 8003170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003172:	3301      	adds	r3, #1
 8003174:	d102      	bne.n	800317c <HAL_SPI_TransmitReceive+0x348>
 8003176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003178:	2b00      	cmp	r3, #0
 800317a:	d108      	bne.n	800318e <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 800317c:	2323      	movs	r3, #35	; 0x23
 800317e:	18fb      	adds	r3, r7, r3
 8003180:	2203      	movs	r2, #3
 8003182:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	225d      	movs	r2, #93	; 0x5d
 8003188:	2101      	movs	r1, #1
 800318a:	5499      	strb	r1, [r3, r2]
        goto error;
 800318c:	e026      	b.n	80031dc <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003192:	b29b      	uxth	r3, r3
 8003194:	2b00      	cmp	r3, #0
 8003196:	d199      	bne.n	80030cc <HAL_SPI_TransmitReceive+0x298>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2246      	movs	r2, #70	; 0x46
 800319c:	5a9b      	ldrh	r3, [r3, r2]
 800319e:	b29b      	uxth	r3, r3
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d193      	bne.n	80030cc <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80031a4:	69fa      	ldr	r2, [r7, #28]
 80031a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	0018      	movs	r0, r3
 80031ac:	f000 f9b2 	bl	8003514 <SPI_EndRxTxTransaction>
 80031b0:	1e03      	subs	r3, r0, #0
 80031b2:	d006      	beq.n	80031c2 <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 80031b4:	2323      	movs	r3, #35	; 0x23
 80031b6:	18fb      	adds	r3, r7, r3
 80031b8:	2201      	movs	r2, #1
 80031ba:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2220      	movs	r2, #32
 80031c0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d004      	beq.n	80031d4 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 80031ca:	2323      	movs	r3, #35	; 0x23
 80031cc:	18fb      	adds	r3, r7, r3
 80031ce:	2201      	movs	r2, #1
 80031d0:	701a      	strb	r2, [r3, #0]
 80031d2:	e003      	b.n	80031dc <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	225d      	movs	r2, #93	; 0x5d
 80031d8:	2101      	movs	r1, #1
 80031da:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	225c      	movs	r2, #92	; 0x5c
 80031e0:	2100      	movs	r1, #0
 80031e2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80031e4:	2323      	movs	r3, #35	; 0x23
 80031e6:	18fb      	adds	r3, r7, r3
 80031e8:	781b      	ldrb	r3, [r3, #0]
}
 80031ea:	0018      	movs	r0, r3
 80031ec:	46bd      	mov	sp, r7
 80031ee:	b00a      	add	sp, #40	; 0x28
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	46c0      	nop			; (mov r8, r8)
 80031f4:	ffffefff 	.word	0xffffefff

080031f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b088      	sub	sp, #32
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	603b      	str	r3, [r7, #0]
 8003204:	1dfb      	adds	r3, r7, #7
 8003206:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003208:	f7fd fe40 	bl	8000e8c <HAL_GetTick>
 800320c:	0002      	movs	r2, r0
 800320e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003210:	1a9b      	subs	r3, r3, r2
 8003212:	683a      	ldr	r2, [r7, #0]
 8003214:	18d3      	adds	r3, r2, r3
 8003216:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003218:	f7fd fe38 	bl	8000e8c <HAL_GetTick>
 800321c:	0003      	movs	r3, r0
 800321e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003220:	4b3a      	ldr	r3, [pc, #232]	; (800330c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	015b      	lsls	r3, r3, #5
 8003226:	0d1b      	lsrs	r3, r3, #20
 8003228:	69fa      	ldr	r2, [r7, #28]
 800322a:	4353      	muls	r3, r2
 800322c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800322e:	e058      	b.n	80032e2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	3301      	adds	r3, #1
 8003234:	d055      	beq.n	80032e2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003236:	f7fd fe29 	bl	8000e8c <HAL_GetTick>
 800323a:	0002      	movs	r2, r0
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	69fa      	ldr	r2, [r7, #28]
 8003242:	429a      	cmp	r2, r3
 8003244:	d902      	bls.n	800324c <SPI_WaitFlagStateUntilTimeout+0x54>
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d142      	bne.n	80032d2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	685a      	ldr	r2, [r3, #4]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	21e0      	movs	r1, #224	; 0xe0
 8003258:	438a      	bics	r2, r1
 800325a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	685a      	ldr	r2, [r3, #4]
 8003260:	2382      	movs	r3, #130	; 0x82
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	429a      	cmp	r2, r3
 8003266:	d113      	bne.n	8003290 <SPI_WaitFlagStateUntilTimeout+0x98>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	2380      	movs	r3, #128	; 0x80
 800326e:	021b      	lsls	r3, r3, #8
 8003270:	429a      	cmp	r2, r3
 8003272:	d005      	beq.n	8003280 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	689a      	ldr	r2, [r3, #8]
 8003278:	2380      	movs	r3, #128	; 0x80
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	429a      	cmp	r2, r3
 800327e:	d107      	bne.n	8003290 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2140      	movs	r1, #64	; 0x40
 800328c:	438a      	bics	r2, r1
 800328e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003294:	2380      	movs	r3, #128	; 0x80
 8003296:	019b      	lsls	r3, r3, #6
 8003298:	429a      	cmp	r2, r3
 800329a:	d110      	bne.n	80032be <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	491a      	ldr	r1, [pc, #104]	; (8003310 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80032a8:	400a      	ands	r2, r1
 80032aa:	601a      	str	r2, [r3, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2180      	movs	r1, #128	; 0x80
 80032b8:	0189      	lsls	r1, r1, #6
 80032ba:	430a      	orrs	r2, r1
 80032bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	225d      	movs	r2, #93	; 0x5d
 80032c2:	2101      	movs	r1, #1
 80032c4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	225c      	movs	r2, #92	; 0x5c
 80032ca:	2100      	movs	r1, #0
 80032cc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e017      	b.n	8003302 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d101      	bne.n	80032dc <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80032d8:	2300      	movs	r3, #0
 80032da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	3b01      	subs	r3, #1
 80032e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	68ba      	ldr	r2, [r7, #8]
 80032ea:	4013      	ands	r3, r2
 80032ec:	68ba      	ldr	r2, [r7, #8]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	425a      	negs	r2, r3
 80032f2:	4153      	adcs	r3, r2
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	001a      	movs	r2, r3
 80032f8:	1dfb      	adds	r3, r7, #7
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d197      	bne.n	8003230 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	0018      	movs	r0, r3
 8003304:	46bd      	mov	sp, r7
 8003306:	b008      	add	sp, #32
 8003308:	bd80      	pop	{r7, pc}
 800330a:	46c0      	nop			; (mov r8, r8)
 800330c:	2000003c 	.word	0x2000003c
 8003310:	ffffdfff 	.word	0xffffdfff

08003314 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b08a      	sub	sp, #40	; 0x28
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	607a      	str	r2, [r7, #4]
 8003320:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003322:	2317      	movs	r3, #23
 8003324:	18fb      	adds	r3, r7, r3
 8003326:	2200      	movs	r2, #0
 8003328:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800332a:	f7fd fdaf 	bl	8000e8c <HAL_GetTick>
 800332e:	0002      	movs	r2, r0
 8003330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003332:	1a9b      	subs	r3, r3, r2
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	18d3      	adds	r3, r2, r3
 8003338:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800333a:	f7fd fda7 	bl	8000e8c <HAL_GetTick>
 800333e:	0003      	movs	r3, r0
 8003340:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	330c      	adds	r3, #12
 8003348:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800334a:	4b41      	ldr	r3, [pc, #260]	; (8003450 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	0013      	movs	r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	189b      	adds	r3, r3, r2
 8003354:	00da      	lsls	r2, r3, #3
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	0d1b      	lsrs	r3, r3, #20
 800335a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800335c:	4353      	muls	r3, r2
 800335e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003360:	e068      	b.n	8003434 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003362:	68ba      	ldr	r2, [r7, #8]
 8003364:	23c0      	movs	r3, #192	; 0xc0
 8003366:	00db      	lsls	r3, r3, #3
 8003368:	429a      	cmp	r2, r3
 800336a:	d10a      	bne.n	8003382 <SPI_WaitFifoStateUntilTimeout+0x6e>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d107      	bne.n	8003382 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	b2da      	uxtb	r2, r3
 8003378:	2117      	movs	r1, #23
 800337a:	187b      	adds	r3, r7, r1
 800337c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800337e:	187b      	adds	r3, r7, r1
 8003380:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	3301      	adds	r3, #1
 8003386:	d055      	beq.n	8003434 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003388:	f7fd fd80 	bl	8000e8c <HAL_GetTick>
 800338c:	0002      	movs	r2, r0
 800338e:	6a3b      	ldr	r3, [r7, #32]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003394:	429a      	cmp	r2, r3
 8003396:	d902      	bls.n	800339e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339a:	2b00      	cmp	r3, #0
 800339c:	d142      	bne.n	8003424 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	685a      	ldr	r2, [r3, #4]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	21e0      	movs	r1, #224	; 0xe0
 80033aa:	438a      	bics	r2, r1
 80033ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	685a      	ldr	r2, [r3, #4]
 80033b2:	2382      	movs	r3, #130	; 0x82
 80033b4:	005b      	lsls	r3, r3, #1
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d113      	bne.n	80033e2 <SPI_WaitFifoStateUntilTimeout+0xce>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	689a      	ldr	r2, [r3, #8]
 80033be:	2380      	movs	r3, #128	; 0x80
 80033c0:	021b      	lsls	r3, r3, #8
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d005      	beq.n	80033d2 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	689a      	ldr	r2, [r3, #8]
 80033ca:	2380      	movs	r3, #128	; 0x80
 80033cc:	00db      	lsls	r3, r3, #3
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d107      	bne.n	80033e2 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2140      	movs	r1, #64	; 0x40
 80033de:	438a      	bics	r2, r1
 80033e0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033e6:	2380      	movs	r3, #128	; 0x80
 80033e8:	019b      	lsls	r3, r3, #6
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d110      	bne.n	8003410 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4916      	ldr	r1, [pc, #88]	; (8003454 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80033fa:	400a      	ands	r2, r1
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2180      	movs	r1, #128	; 0x80
 800340a:	0189      	lsls	r1, r1, #6
 800340c:	430a      	orrs	r2, r1
 800340e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	225d      	movs	r2, #93	; 0x5d
 8003414:	2101      	movs	r1, #1
 8003416:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	225c      	movs	r2, #92	; 0x5c
 800341c:	2100      	movs	r1, #0
 800341e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e010      	b.n	8003446 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d101      	bne.n	800342e <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800342a:	2300      	movs	r3, #0
 800342c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	3b01      	subs	r3, #1
 8003432:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	68ba      	ldr	r2, [r7, #8]
 800343c:	4013      	ands	r3, r2
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	429a      	cmp	r2, r3
 8003442:	d18e      	bne.n	8003362 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	0018      	movs	r0, r3
 8003448:	46bd      	mov	sp, r7
 800344a:	b00a      	add	sp, #40	; 0x28
 800344c:	bd80      	pop	{r7, pc}
 800344e:	46c0      	nop			; (mov r8, r8)
 8003450:	2000003c 	.word	0x2000003c
 8003454:	ffffdfff 	.word	0xffffdfff

08003458 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b086      	sub	sp, #24
 800345c:	af02      	add	r7, sp, #8
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	685a      	ldr	r2, [r3, #4]
 8003468:	2382      	movs	r3, #130	; 0x82
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	429a      	cmp	r2, r3
 800346e:	d113      	bne.n	8003498 <SPI_EndRxTransaction+0x40>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	689a      	ldr	r2, [r3, #8]
 8003474:	2380      	movs	r3, #128	; 0x80
 8003476:	021b      	lsls	r3, r3, #8
 8003478:	429a      	cmp	r2, r3
 800347a:	d005      	beq.n	8003488 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	689a      	ldr	r2, [r3, #8]
 8003480:	2380      	movs	r3, #128	; 0x80
 8003482:	00db      	lsls	r3, r3, #3
 8003484:	429a      	cmp	r2, r3
 8003486:	d107      	bne.n	8003498 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2140      	movs	r1, #64	; 0x40
 8003494:	438a      	bics	r2, r1
 8003496:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003498:	68ba      	ldr	r2, [r7, #8]
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	9300      	str	r3, [sp, #0]
 80034a0:	0013      	movs	r3, r2
 80034a2:	2200      	movs	r2, #0
 80034a4:	2180      	movs	r1, #128	; 0x80
 80034a6:	f7ff fea7 	bl	80031f8 <SPI_WaitFlagStateUntilTimeout>
 80034aa:	1e03      	subs	r3, r0, #0
 80034ac:	d007      	beq.n	80034be <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034b2:	2220      	movs	r2, #32
 80034b4:	431a      	orrs	r2, r3
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e026      	b.n	800350c <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	2382      	movs	r3, #130	; 0x82
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d11f      	bne.n	800350a <SPI_EndRxTransaction+0xb2>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	689a      	ldr	r2, [r3, #8]
 80034ce:	2380      	movs	r3, #128	; 0x80
 80034d0:	021b      	lsls	r3, r3, #8
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d005      	beq.n	80034e2 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	689a      	ldr	r2, [r3, #8]
 80034da:	2380      	movs	r3, #128	; 0x80
 80034dc:	00db      	lsls	r3, r3, #3
 80034de:	429a      	cmp	r2, r3
 80034e0:	d113      	bne.n	800350a <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80034e2:	68ba      	ldr	r2, [r7, #8]
 80034e4:	23c0      	movs	r3, #192	; 0xc0
 80034e6:	00d9      	lsls	r1, r3, #3
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	0013      	movs	r3, r2
 80034f0:	2200      	movs	r2, #0
 80034f2:	f7ff ff0f 	bl	8003314 <SPI_WaitFifoStateUntilTimeout>
 80034f6:	1e03      	subs	r3, r0, #0
 80034f8:	d007      	beq.n	800350a <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034fe:	2220      	movs	r2, #32
 8003500:	431a      	orrs	r2, r3
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e000      	b.n	800350c <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	0018      	movs	r0, r3
 800350e:	46bd      	mov	sp, r7
 8003510:	b004      	add	sp, #16
 8003512:	bd80      	pop	{r7, pc}

08003514 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b086      	sub	sp, #24
 8003518:	af02      	add	r7, sp, #8
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003520:	68ba      	ldr	r2, [r7, #8]
 8003522:	23c0      	movs	r3, #192	; 0xc0
 8003524:	0159      	lsls	r1, r3, #5
 8003526:	68f8      	ldr	r0, [r7, #12]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	9300      	str	r3, [sp, #0]
 800352c:	0013      	movs	r3, r2
 800352e:	2200      	movs	r2, #0
 8003530:	f7ff fef0 	bl	8003314 <SPI_WaitFifoStateUntilTimeout>
 8003534:	1e03      	subs	r3, r0, #0
 8003536:	d007      	beq.n	8003548 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800353c:	2220      	movs	r2, #32
 800353e:	431a      	orrs	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e027      	b.n	8003598 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003548:	68ba      	ldr	r2, [r7, #8]
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	9300      	str	r3, [sp, #0]
 8003550:	0013      	movs	r3, r2
 8003552:	2200      	movs	r2, #0
 8003554:	2180      	movs	r1, #128	; 0x80
 8003556:	f7ff fe4f 	bl	80031f8 <SPI_WaitFlagStateUntilTimeout>
 800355a:	1e03      	subs	r3, r0, #0
 800355c:	d007      	beq.n	800356e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003562:	2220      	movs	r2, #32
 8003564:	431a      	orrs	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e014      	b.n	8003598 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800356e:	68ba      	ldr	r2, [r7, #8]
 8003570:	23c0      	movs	r3, #192	; 0xc0
 8003572:	00d9      	lsls	r1, r3, #3
 8003574:	68f8      	ldr	r0, [r7, #12]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	9300      	str	r3, [sp, #0]
 800357a:	0013      	movs	r3, r2
 800357c:	2200      	movs	r2, #0
 800357e:	f7ff fec9 	bl	8003314 <SPI_WaitFifoStateUntilTimeout>
 8003582:	1e03      	subs	r3, r0, #0
 8003584:	d007      	beq.n	8003596 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800358a:	2220      	movs	r2, #32
 800358c:	431a      	orrs	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e000      	b.n	8003598 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	0018      	movs	r0, r3
 800359a:	46bd      	mov	sp, r7
 800359c:	b004      	add	sp, #16
 800359e:	bd80      	pop	{r7, pc}

080035a0 <__libc_init_array>:
 80035a0:	b570      	push	{r4, r5, r6, lr}
 80035a2:	2600      	movs	r6, #0
 80035a4:	4d0c      	ldr	r5, [pc, #48]	; (80035d8 <__libc_init_array+0x38>)
 80035a6:	4c0d      	ldr	r4, [pc, #52]	; (80035dc <__libc_init_array+0x3c>)
 80035a8:	1b64      	subs	r4, r4, r5
 80035aa:	10a4      	asrs	r4, r4, #2
 80035ac:	42a6      	cmp	r6, r4
 80035ae:	d109      	bne.n	80035c4 <__libc_init_array+0x24>
 80035b0:	2600      	movs	r6, #0
 80035b2:	f000 f821 	bl	80035f8 <_init>
 80035b6:	4d0a      	ldr	r5, [pc, #40]	; (80035e0 <__libc_init_array+0x40>)
 80035b8:	4c0a      	ldr	r4, [pc, #40]	; (80035e4 <__libc_init_array+0x44>)
 80035ba:	1b64      	subs	r4, r4, r5
 80035bc:	10a4      	asrs	r4, r4, #2
 80035be:	42a6      	cmp	r6, r4
 80035c0:	d105      	bne.n	80035ce <__libc_init_array+0x2e>
 80035c2:	bd70      	pop	{r4, r5, r6, pc}
 80035c4:	00b3      	lsls	r3, r6, #2
 80035c6:	58eb      	ldr	r3, [r5, r3]
 80035c8:	4798      	blx	r3
 80035ca:	3601      	adds	r6, #1
 80035cc:	e7ee      	b.n	80035ac <__libc_init_array+0xc>
 80035ce:	00b3      	lsls	r3, r6, #2
 80035d0:	58eb      	ldr	r3, [r5, r3]
 80035d2:	4798      	blx	r3
 80035d4:	3601      	adds	r6, #1
 80035d6:	e7f2      	b.n	80035be <__libc_init_array+0x1e>
 80035d8:	08003650 	.word	0x08003650
 80035dc:	08003650 	.word	0x08003650
 80035e0:	08003650 	.word	0x08003650
 80035e4:	08003654 	.word	0x08003654

080035e8 <memset>:
 80035e8:	0003      	movs	r3, r0
 80035ea:	1882      	adds	r2, r0, r2
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d100      	bne.n	80035f2 <memset+0xa>
 80035f0:	4770      	bx	lr
 80035f2:	7019      	strb	r1, [r3, #0]
 80035f4:	3301      	adds	r3, #1
 80035f6:	e7f9      	b.n	80035ec <memset+0x4>

080035f8 <_init>:
 80035f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035fa:	46c0      	nop			; (mov r8, r8)
 80035fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035fe:	bc08      	pop	{r3}
 8003600:	469e      	mov	lr, r3
 8003602:	4770      	bx	lr

08003604 <_fini>:
 8003604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003606:	46c0      	nop			; (mov r8, r8)
 8003608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800360a:	bc08      	pop	{r3}
 800360c:	469e      	mov	lr, r3
 800360e:	4770      	bx	lr
